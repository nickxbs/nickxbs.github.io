define(['dart_sdk', 'packages/intl/intl', 'packages/angular_components/model/date/date', 'packages/timezone/src/env', 'packages/googleapis/drive/v3', 'packages/http/src/base_client', 'packages/timezone/browser', 'packages/nightscout_reporter/messages/messages_all', 'packages/intl/date_symbol_data_local', 'packages/_discoveryapis_commons/_discoveryapis_commons', 'packages/googleapis_auth/auth', 'packages/angular/src/bootstrap/modules', 'packages/timezone/src/date_time', 'packages/crypto/crypto', 'packages/googleapis_auth/auth_browser', 'packages/angular/src/core/change_detection/change_detection', 'packages/angular_components/material_input/material_input'], (function load__packages__nightscout_reporter__src__controls__datepicker__datepicker_component(dart_sdk, packages__intl__intl, packages__angular_components__model__date__date, packages__timezone__src__env, packages__googleapis__drive__v3, packages__http__src__base_client, packages__timezone__browser, packages__nightscout_reporter__messages__messages_all, packages__intl__date_symbol_data_local, packages___discoveryapis_commons___discoveryapis_commons, packages__googleapis_auth__auth, packages__angular__src__bootstrap__modules, packages__timezone__src__date_time, packages__crypto__crypto, packages__googleapis_auth__auth_browser, packages__angular__src__core__change_detection__change_detection, packages__angular_components__material_input__material_input) {
  'use strict';
  const core = dart_sdk.core;
  const async = dart_sdk.async;
  const html = dart_sdk.html;
  const _interceptors = dart_sdk._interceptors;
  const _js_helper = dart_sdk._js_helper;
  const convert = dart_sdk.convert;
  const math = dart_sdk.math;
  const typed_data = dart_sdk.typed_data;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const intl = packages__intl__intl.intl;
  const date$ = packages__angular_components__model__date__date.model__date__date;
  const env = packages__timezone__src__env.src__env;
  const location = packages__timezone__src__env.src__location;
  const v3 = packages__googleapis__drive__v3.drive__v3;
  const browser_client = packages__http__src__base_client.src__browser_client;
  const response = packages__http__src__base_client.src__response;
  const browser = packages__timezone__browser.browser;
  const messages_all = packages__nightscout_reporter__messages__messages_all.messages__messages_all;
  const date_symbol_data_local = packages__intl__date_symbol_data_local.date_symbol_data_local;
  const requests = packages___discoveryapis_commons___discoveryapis_commons.src__requests;
  const auth = packages__googleapis_auth__auth.auth;
  const dom_sanitization_service = packages__angular__src__bootstrap__modules.src__security__dom_sanitization_service;
  const date_time = packages__timezone__src__date_time.src__date_time;
  const sha1 = packages__crypto__crypto.src__sha1;
  const auth_browser = packages__googleapis_auth__auth_browser.auth_browser;
  const lifecycle_hooks = packages__angular__src__core__change_detection__change_detection.src__core__metadata__lifecycle_hooks;
  const material_input = packages__angular_components__material_input__material_input.material_input__material_input;
  var dsgvo_component = Object.create(dart.library);
  var globals = Object.create(dart.library);
  var json_data = Object.create(dart.library);
  var base_print = Object.create(dart.library);
  var print_cgp = Object.create(dart.library);
  var datepicker_component = Object.create(dart.library);
  var month_component = Object.create(dart.library);
  var base_daily = Object.create(dart.library);
  var signin_component = Object.create(dart.library);
  var print_analysis = Object.create(dart.library);
  var print_daily_statistics = Object.create(dart.library);
  var base_profile = Object.create(dart.library);
  var print_basalrate = Object.create(dart.library);
  var infoview_component = Object.create(dart.library);
  var print_user_data = Object.create(dart.library);
  var print_test = Object.create(dart.library);
  var print_daily_graphic = Object.create(dart.library);
  var impressum_component = Object.create(dart.library);
  var print_daily_gluc = Object.create(dart.library);
  var print_daily_analysis = Object.create(dart.library);
  var welcome_component = Object.create(dart.library);
  var print_daily_log = Object.create(dart.library);
  var print_daily_profile = Object.create(dart.library);
  var printparams_component = Object.create(dart.library);
  var formparams_component = Object.create(dart.library);
  var helpview_component = Object.create(dart.library);
  var settings_component = Object.create(dart.library);
  var print_daily_hours = Object.create(dart.library);
  var print_profile = Object.create(dart.library);
  var shortcutedit_component = Object.create(dart.library);
  var print_percentile = Object.create(dart.library);
  var whatsnew_component = Object.create(dart.library);
  var print_weekly_graphic = Object.create(dart.library);
  var $isNotEmpty = dartx.isNotEmpty;
  var $clear = dartx.clear;
  var $toString = dartx.toString;
  var $stackTrace = dartx.stackTrace;
  var $isEmpty = dartx.isEmpty;
  var $location = dartx.location;
  var $contains = dartx.contains;
  var $_get = dartx._get;
  var $trim = dartx.trim;
  var $toLowerCase = dartx.toLowerCase;
  var $startsWith = dartx.startsWith;
  var $endsWith = dartx.endsWith;
  var $add = dartx.add;
  var $split = dartx.split;
  var $length = dartx.length;
  var $firstWhere = dartx.firstWhere;
  var $sublist = dartx.sublist;
  var $substring = dartx.substring;
  var $remove = dartx.remove;
  var $_set = dartx._set;
  var $join = dartx.join;
  var $indexWhere = dartx.indexWhere;
  var $compareTo = dartx.compareTo;
  var $sort = dartx.sort;
  var $truncate = dartx.truncate;
  var $forEach = dartx.forEach;
  var $codeUnits = dartx.codeUnits;
  var $values = dartx.values;
  var $lastIndexOf = dartx.lastIndexOf;
  var $toInt = dartx.toInt;
  var $open = dartx.open;
  var $indexOf = dartx.indexOf;
  var $entries = dartx.entries;
  var $addAll = dartx.addAll;
  var $padRight = dartx.padRight;
  var $round = dartx.round;
  var $keys = dartx.keys;
  var $last = dartx.last;
  var $elementAt = dartx.elementAt;
  var $modulo = dartx['%'];
  var $toDouble = dartx.toDouble;
  var $first = dartx.first;
  var $insert = dartx.insert;
  var $where = dartx.where;
  var $toList = dartx.toList;
  var $removeAt = dartx.removeAt;
  var $reduce = dartx.reduce;
  var $removeLast = dartx.removeLast;
  var $removeRange = dartx.removeRange;
  var $containsKey = dartx.containsKey;
  var $lastWhere = dartx.lastWhere;
  var $removeWhere = dartx.removeWhere;
  var $abs = dartx.abs;
  var $replaceAll = dartx.replaceAll;
  var $response = dartx.response;
  var $asUint8List = dartx.asUint8List;
  var $floor = dartx.floor;
  var $toRadixString = dartx.toRadixString;
  var $ceil = dartx.ceil;
  var $isNaN = dartx.isNaN;
  var $reversed = dartx.reversed;
  var $files = dartx.files;
  var $target = dartx.target;
  var $onLoadEnd = dartx.onLoadEnd;
  var $result = dartx.result;
  var UIEventL = () => (UIEventL = dart.constFn(dart.legacy(html.UIEvent)))();
  var StreamControllerOfUIEventL = () => (StreamControllerOfUIEventL = dart.constFn(async.StreamController$(UIEventL())))();
  var StringL = () => (StringL = dart.constFn(dart.legacy(core.String)))();
  var JSArrayOfStringL = () => (JSArrayOfStringL = dart.constFn(_interceptors.JSArray$(StringL())))();
  var ErrorL = () => (ErrorL = dart.constFn(dart.legacy(core.Error)))();
  var FormConfigL = () => (FormConfigL = dart.constFn(dart.legacy(base_print.FormConfig)))();
  var JSArrayOfFormConfigL = () => (JSArrayOfFormConfigL = dart.constFn(_interceptors.JSArray$(FormConfigL())))();
  var MapOfStringL$StringL = () => (MapOfStringL$StringL = dart.constFn(core.Map$(StringL(), StringL())))();
  var LangDataL = () => (LangDataL = dart.constFn(dart.legacy(globals.LangData)))();
  var JSArrayOfLangDataL = () => (JSArrayOfLangDataL = dart.constFn(_interceptors.JSArray$(LangDataL())))();
  var ShortcutDataL = () => (ShortcutDataL = dart.constFn(dart.legacy(globals.ShortcutData)))();
  var JSArrayOfShortcutDataL = () => (JSArrayOfShortcutDataL = dart.constFn(_interceptors.JSArray$(ShortcutDataL())))();
  var UserDataL = () => (UserDataL = dart.constFn(dart.legacy(globals.UserData)))();
  var JSArrayOfUserDataL = () => (JSArrayOfUserDataL = dart.constFn(_interceptors.JSArray$(UserDataL())))();
  var boolL = () => (boolL = dart.constFn(dart.legacy(core.bool)))();
  var JSArrayOfboolL = () => (JSArrayOfboolL = dart.constFn(_interceptors.JSArray$(boolL())))();
  var DatepickerPeriodL = () => (DatepickerPeriodL = dart.constFn(dart.legacy(datepicker_component.DatepickerPeriod)))();
  var DatepickerPeriodLToNullN = () => (DatepickerPeriodLToNullN = dart.constFn(dart.fnType(core.Null, [DatepickerPeriodL()])))();
  var DateL = () => (DateL = dart.constFn(dart.legacy(date$.Date)))();
  var DateLToDateL = () => (DateLToDateL = dart.constFn(dart.fnType(DateL(), [DateL()])))();
  var FormConfigLToboolL = () => (FormConfigLToboolL = dart.constFn(dart.fnType(boolL(), [FormConfigL()])))();
  var VoidToNullN = () => (VoidToNullN = dart.constFn(dart.fnType(core.Null, [])))();
  var IdentityMapOfStringL$dynamic = () => (IdentityMapOfStringL$dynamic = dart.constFn(_js_helper.IdentityMap$(StringL(), dart.dynamic)))();
  var GlobalsL = () => (GlobalsL = dart.constFn(dart.legacy(globals.Globals)))();
  var intL = () => (intL = dart.constFn(dart.legacy(core.int)))();
  var LangDataLToboolL = () => (LangDataLToboolL = dart.constFn(dart.fnType(boolL(), [LangDataL()])))();
  var IterableL = () => (IterableL = dart.constFn(dart.legacy(core.Iterable)))();
  var UserDataLAndUserDataLTointL = () => (UserDataLAndUserDataLTointL = dart.constFn(dart.fnType(intL(), [UserDataL(), UserDataL()])))();
  var intLToNullN = () => (intLToNullN = dart.constFn(dart.fnType(core.Null, [intL()])))();
  var doubleL = () => (doubleL = dart.constFn(dart.legacy(core.double)))();
  var JSArrayOfdoubleL = () => (JSArrayOfdoubleL = dart.constFn(_interceptors.JSArray$(doubleL())))();
  var JSArrayOfintL = () => (JSArrayOfintL = dart.constFn(_interceptors.JSArray$(intL())))();
  var FutureOfNullN = () => (FutureOfNullN = dart.constFn(async.Future$(core.Null)))();
  var PeriodShiftL = () => (PeriodShiftL = dart.constFn(dart.legacy(globals.PeriodShift)))();
  var JSArrayOfPeriodShiftL = () => (JSArrayOfPeriodShiftL = dart.constFn(_interceptors.JSArray$(PeriodShiftL())))();
  var ObjectL = () => (ObjectL = dart.constFn(dart.legacy(core.Object)))();
  var IdentityMapOfStringL$ObjectL = () => (IdentityMapOfStringL$ObjectL = dart.constFn(_js_helper.IdentityMap$(StringL(), ObjectL())))();
  var numL = () => (numL = dart.constFn(dart.legacy(core.num)))();
  var StringLTodynamic = () => (StringLTodynamic = dart.constFn(dart.fnType(dart.dynamic, [StringL()])))();
  var ResponseL = () => (ResponseL = dart.constFn(dart.legacy(response.Response)))();
  var ResponseLToStringL = () => (ResponseLToStringL = dart.constFn(dart.fnType(StringL(), [ResponseL()])))();
  var dynamicToStringL = () => (dynamicToStringL = dart.constFn(dart.fnType(StringL(), [dart.dynamic])))();
  var StringLToNullN = () => (StringLToNullN = dart.constFn(dart.fnType(core.Null, [StringL()])))();
  var dynamicToNullN = () => (dynamicToNullN = dart.constFn(dart.fnType(core.Null, [dart.dynamic])))();
  var voidToNullN = () => (voidToNullN = dart.constFn(dart.fnType(core.Null, [dart.void])))();
  var StreamControllerOfStringL = () => (StreamControllerOfStringL = dart.constFn(async.StreamController$(StringL())))();
  var ListOfintL = () => (ListOfintL = dart.constFn(core.List$(intL())))();
  var ListLOfintL = () => (ListLOfintL = dart.constFn(dart.legacy(ListOfintL())))();
  var FileL = () => (FileL = dart.constFn(dart.legacy(v3.File)))();
  var FileLToNullN = () => (FileLToNullN = dart.constFn(dart.fnType(core.Null, [FileL()])))();
  var GeneratedIdsL = () => (GeneratedIdsL = dart.constFn(dart.legacy(v3.GeneratedIds)))();
  var GeneratedIdsLToNullN = () => (GeneratedIdsLToNullN = dart.constFn(dart.fnType(core.Null, [GeneratedIdsL()])))();
  var ObjectLToboolL = () => (ObjectLToboolL = dart.constFn(dart.fnType(boolL(), [ObjectL()])))();
  var MediaL = () => (MediaL = dart.constFn(dart.legacy(requests.Media)))();
  var FileListL = () => (FileListL = dart.constFn(dart.legacy(v3.FileList)))();
  var FileListLToNullN = () => (FileListLToNullN = dart.constFn(dart.fnType(core.Null, [FileListL()])))();
  var JSArrayOfFileL = () => (JSArrayOfFileL = dart.constFn(_interceptors.JSArray$(FileL())))();
  var FutureOfFileListL = () => (FutureOfFileListL = dart.constFn(async.Future$(FileListL())))();
  var FutureLOfFileListL = () => (FutureLOfFileListL = dart.constFn(dart.legacy(FutureOfFileListL())))();
  var FileListLToFutureLOfFileListL = () => (FileListLToFutureLOfFileListL = dart.constFn(dart.fnType(FutureLOfFileListL(), [FileListL()])))();
  var StringLToFutureLOfFileListL = () => (StringLToFutureLOfFileListL = dart.constFn(dart.fnType(FutureLOfFileListL(), [StringL()])))();
  var dynamicAnddynamicTointL = () => (dynamicAnddynamicTointL = dart.constFn(dart.fnType(intL(), [dart.dynamic, dart.dynamic])))();
  var UrlDataL = () => (UrlDataL = dart.constFn(dart.legacy(globals.UrlData)))();
  var JSArrayOfUrlDataL = () => (JSArrayOfUrlDataL = dart.constFn(_interceptors.JSArray$(UrlDataL())))();
  var UrlDataLToboolL = () => (UrlDataLToboolL = dart.constFn(dart.fnType(boolL(), [UrlDataL()])))();
  var IdentityMapOfStringL$StringL = () => (IdentityMapOfStringL$StringL = dart.constFn(_js_helper.IdentityMap$(StringL(), StringL())))();
  var UrlDataLAndUrlDataLTointL = () => (UrlDataLAndUrlDataLTointL = dart.constFn(dart.fnType(intL(), [UrlDataL(), UrlDataL()])))();
  var MapOfStringL$dynamic = () => (MapOfStringL$dynamic = dart.constFn(core.Map$(StringL(), dart.dynamic)))();
  var MapLOfStringL$dynamic = () => (MapLOfStringL$dynamic = dart.constFn(dart.legacy(MapOfStringL$dynamic())))();
  var UploaderL = () => (UploaderL = dart.constFn(dart.legacy(json_data.Uploader)))();
  var ProfileEntryDataL = () => (ProfileEntryDataL = dart.constFn(dart.legacy(json_data.ProfileEntryData)))();
  var JSArrayOfProfileEntryDataL = () => (JSArrayOfProfileEntryDataL = dart.constFn(_interceptors.JSArray$(ProfileEntryDataL())))();
  var ProfileEntryDataLAndProfileEntryDataLTointL = () => (ProfileEntryDataLAndProfileEntryDataLTointL = dart.constFn(dart.fnType(intL(), [ProfileEntryDataL(), ProfileEntryDataL()])))();
  var ProfileEntryDataLToboolL = () => (ProfileEntryDataLToboolL = dart.constFn(dart.fnType(boolL(), [ProfileEntryDataL()])))();
  var ProfileStoreDataL = () => (ProfileStoreDataL = dart.constFn(dart.legacy(json_data.ProfileStoreData)))();
  var IdentityMapOfStringL$ProfileStoreDataL = () => (IdentityMapOfStringL$ProfileStoreDataL = dart.constFn(_js_helper.IdentityMap$(StringL(), ProfileStoreDataL())))();
  var StringLAndStringLToStringL = () => (StringLAndStringLToStringL = dart.constFn(dart.fnType(StringL(), [StringL(), StringL()])))();
  var MapEntryOfStringL$dynamic = () => (MapEntryOfStringL$dynamic = dart.constFn(core.MapEntry$(StringL(), dart.dynamic)))();
  var MapEntryLOfStringL$dynamic = () => (MapEntryLOfStringL$dynamic = dart.constFn(dart.legacy(MapEntryOfStringL$dynamic())))();
  var MapEntryLOfStringL$dynamicToboolL = () => (MapEntryLOfStringL$dynamicToboolL = dart.constFn(dart.fnType(boolL(), [MapEntryLOfStringL$dynamic()])))();
  var InsulinInjectionDataL = () => (InsulinInjectionDataL = dart.constFn(dart.legacy(json_data.InsulinInjectionData)))();
  var JSArrayOfInsulinInjectionDataL = () => (JSArrayOfInsulinInjectionDataL = dart.constFn(_interceptors.JSArray$(InsulinInjectionDataL())))();
  var ListL = () => (ListL = dart.constFn(dart.legacy(core.List)))();
  var EntryDataL = () => (EntryDataL = dart.constFn(dart.legacy(json_data.EntryData)))();
  var JSArrayOfEntryDataL = () => (JSArrayOfEntryDataL = dart.constFn(_interceptors.JSArray$(EntryDataL())))();
  var TreatmentDataL = () => (TreatmentDataL = dart.constFn(dart.legacy(json_data.TreatmentData)))();
  var JSArrayOfTreatmentDataL = () => (JSArrayOfTreatmentDataL = dart.constFn(_interceptors.JSArray$(TreatmentDataL())))();
  var DeviceStatusDataL = () => (DeviceStatusDataL = dart.constFn(dart.legacy(json_data.DeviceStatusData)))();
  var JSArrayOfDeviceStatusDataL = () => (JSArrayOfDeviceStatusDataL = dart.constFn(_interceptors.JSArray$(DeviceStatusDataL())))();
  var TreatmentDataLToboolL = () => (TreatmentDataLToboolL = dart.constFn(dart.fnType(boolL(), [TreatmentDataL()])))();
  var DateTimeL = () => (DateTimeL = dart.constFn(dart.legacy(core.DateTime)))();
  var DayDataL = () => (DayDataL = dart.constFn(dart.legacy(json_data.DayData)))();
  var JSArrayOfDayDataL = () => (JSArrayOfDayDataL = dart.constFn(_interceptors.JSArray$(DayDataL())))();
  var StatisticDataL = () => (StatisticDataL = dart.constFn(dart.legacy(json_data.StatisticData)))();
  var IdentityMapOfStringL$StatisticDataL = () => (IdentityMapOfStringL$StatisticDataL = dart.constFn(_js_helper.IdentityMap$(StringL(), StatisticDataL())))();
  var EntryDataLToboolL = () => (EntryDataLToboolL = dart.constFn(dart.fnType(boolL(), [EntryDataL()])))();
  var EntryDataLAndEntryDataLTointL = () => (EntryDataLAndEntryDataLTointL = dart.constFn(dart.fnType(intL(), [EntryDataL(), EntryDataL()])))();
  var TreatmentDataLAndTreatmentDataLTointL = () => (TreatmentDataLAndTreatmentDataLTointL = dart.constFn(dart.fnType(intL(), [TreatmentDataL(), TreatmentDataL()])))();
  var DayDataLToboolL = () => (DayDataLToboolL = dart.constFn(dart.fnType(boolL(), [DayDataL()])))();
  var DeviceStatusDataLToboolL = () => (DeviceStatusDataLToboolL = dart.constFn(dart.fnType(boolL(), [DeviceStatusDataL()])))();
  var ProfileDataL = () => (ProfileDataL = dart.constFn(dart.legacy(json_data.ProfileData)))();
  var JSArrayOfProfileDataL = () => (JSArrayOfProfileDataL = dart.constFn(_interceptors.JSArray$(ProfileDataL())))();
  var IdentityMapOfStringL$doubleL = () => (IdentityMapOfStringL$doubleL = dart.constFn(_js_helper.IdentityMap$(StringL(), doubleL())))();
  var IdentityMapOfStringL$ListL = () => (IdentityMapOfStringL$ListL = dart.constFn(_js_helper.IdentityMap$(StringL(), ListL())))();
  var ParamTypeL = () => (ParamTypeL = dart.constFn(dart.legacy(base_print.ParamType)))();
  var ParamInfoL = () => (ParamInfoL = dart.constFn(dart.legacy(base_print.ParamInfo)))();
  var JSArrayOfParamInfoL = () => (JSArrayOfParamInfoL = dart.constFn(_interceptors.JSArray$(ParamInfoL())))();
  var PageL = () => (PageL = dart.constFn(dart.legacy(base_print.Page)))();
  var JSArrayOfPageL = () => (JSArrayOfPageL = dart.constFn(_interceptors.JSArray$(PageL())))();
  var HelpItemL = () => (HelpItemL = dart.constFn(dart.legacy(base_print.HelpItem)))();
  var JSArrayOfHelpItemL = () => (JSArrayOfHelpItemL = dart.constFn(_interceptors.JSArray$(HelpItemL())))();
  var ParamInfoLToboolL = () => (ParamInfoLToboolL = dart.constFn(dart.fnType(boolL(), [ParamInfoL()])))();
  var ParamInfoLAndParamInfoLTointL = () => (ParamInfoLAndParamInfoLTointL = dart.constFn(dart.fnType(intL(), [ParamInfoL(), ParamInfoL()])))();
  var JSArrayOfObjectL = () => (JSArrayOfObjectL = dart.constFn(_interceptors.JSArray$(ObjectL())))();
  var IdentityMapOfStringL$intL = () => (IdentityMapOfStringL$intL = dart.constFn(_js_helper.IdentityMap$(StringL(), intL())))();
  var MapLOfStringL$StringL = () => (MapLOfStringL$StringL = dart.constFn(dart.legacy(MapOfStringL$StringL())))();
  var JSArrayOfMapLOfStringL$StringL = () => (JSArrayOfMapLOfStringL$StringL = dart.constFn(_interceptors.JSArray$(MapLOfStringL$StringL())))();
  var ListOfMapLOfStringL$StringL = () => (ListOfMapLOfStringL$StringL = dart.constFn(core.List$(MapLOfStringL$StringL())))();
  var ListLOfMapLOfStringL$StringL = () => (ListLOfMapLOfStringL$StringL = dart.constFn(dart.legacy(ListOfMapLOfStringL$StringL())))();
  var JSArrayOfListLOfMapLOfStringL$StringL = () => (JSArrayOfListLOfMapLOfStringL$StringL = dart.constFn(_interceptors.JSArray$(ListLOfMapLOfStringL$StringL())))();
  var ListOfObjectL = () => (ListOfObjectL = dart.constFn(core.List$(ObjectL())))();
  var ListLOfObjectL = () => (ListLOfObjectL = dart.constFn(dart.legacy(ListOfObjectL())))();
  var IdentityMapOfStringL$ListLOfObjectL = () => (IdentityMapOfStringL$ListLOfObjectL = dart.constFn(_js_helper.IdentityMap$(StringL(), ListLOfObjectL())))();
  var MapOfStringL$ObjectL = () => (MapOfStringL$ObjectL = dart.constFn(core.Map$(StringL(), ObjectL())))();
  var MapLOfStringL$ObjectL = () => (MapLOfStringL$ObjectL = dart.constFn(dart.legacy(MapOfStringL$ObjectL())))();
  var JSArrayOfMapLOfStringL$ObjectL = () => (JSArrayOfMapLOfStringL$ObjectL = dart.constFn(_interceptors.JSArray$(MapLOfStringL$ObjectL())))();
  var JSArrayOfnumL = () => (JSArrayOfnumL = dart.constFn(_interceptors.JSArray$(numL())))();
  var ByteBufferL = () => (ByteBufferL = dart.constFn(dart.legacy(typed_data.ByteBuffer)))();
  var MapL = () => (MapL = dart.constFn(dart.legacy(core.Map)))();
  var ListOfPageL = () => (ListOfPageL = dart.constFn(core.List$(PageL())))();
  var ListLOfPageL = () => (ListLOfPageL = dart.constFn(dart.legacy(ListOfPageL())))();
  var PentagonDataL = () => (PentagonDataL = dart.constFn(dart.legacy(print_cgp.PentagonData)))();
  var JSArrayOfMapLOfStringL$dynamic = () => (JSArrayOfMapLOfStringL$dynamic = dart.constFn(_interceptors.JSArray$(MapLOfStringL$dynamic())))();
  var ListOfMapLOfStringL$dynamic = () => (ListOfMapLOfStringL$dynamic = dart.constFn(core.List$(MapLOfStringL$dynamic())))();
  var ListLOfMapLOfStringL$dynamic = () => (ListLOfMapLOfStringL$dynamic = dart.constFn(dart.legacy(ListOfMapLOfStringL$dynamic())))();
  var IdentityMapOfStringL$ListLOfMapLOfStringL$dynamic = () => (IdentityMapOfStringL$ListLOfMapLOfStringL$dynamic = dart.constFn(_js_helper.IdentityMap$(StringL(), ListLOfMapLOfStringL$dynamic())))();
  var JSArrayOfListLOfMapLOfStringL$dynamic = () => (JSArrayOfListLOfMapLOfStringL$dynamic = dart.constFn(_interceptors.JSArray$(ListLOfMapLOfStringL$dynamic())))();
  var MapOfStringL$doubleL = () => (MapOfStringL$doubleL = dart.constFn(core.Map$(StringL(), doubleL())))();
  var MapLOfStringL$doubleL = () => (MapLOfStringL$doubleL = dart.constFn(dart.legacy(MapOfStringL$doubleL())))();
  var JSArrayOfMapLOfStringL$doubleL = () => (JSArrayOfMapLOfStringL$doubleL = dart.constFn(_interceptors.JSArray$(MapLOfStringL$doubleL())))();
  var StepDataL = () => (StepDataL = dart.constFn(dart.legacy(base_print.StepData)))();
  var JSArrayOfStepDataL = () => (JSArrayOfStepDataL = dart.constFn(_interceptors.JSArray$(StepDataL())))();
  var dynamicAnddynamic__ToStringL = () => (dynamicAnddynamic__ToStringL = dart.constFn(dart.fnType(StringL(), [dart.dynamic, dart.dynamic], {value: dart.dynamic}, {})))();
  var dynamicTonumL = () => (dynamicTonumL = dart.constFn(dart.fnType(numL(), [dart.dynamic])))();
  var dynamicTodynamic = () => (dynamicTodynamic = dart.constFn(dart.fnType(dart.dynamic, [dart.dynamic])))();
  var dynamicTodoubleL = () => (dynamicTodoubleL = dart.constFn(dart.fnType(doubleL(), [dart.dynamic])))();
  var PentagonScaleDataL = () => (PentagonScaleDataL = dart.constFn(dart.legacy(print_cgp.PentagonScaleData)))();
  var JSArrayOfPentagonScaleDataL = () => (JSArrayOfPentagonScaleDataL = dart.constFn(_interceptors.JSArray$(PentagonScaleDataL())))();
  var JSArrayOfMapL = () => (JSArrayOfMapL = dart.constFn(_interceptors.JSArray$(MapL())))();
  var ListOfMapL = () => (ListOfMapL = dart.constFn(core.List$(MapL())))();
  var ListLOfMapL = () => (ListLOfMapL = dart.constFn(dart.legacy(ListOfMapL())))();
  var JSArrayOfListLOfMapL = () => (JSArrayOfListLOfMapL = dart.constFn(_interceptors.JSArray$(ListLOfMapL())))();
  var ListOfDayDataL = () => (ListOfDayDataL = dart.constFn(core.List$(DayDataL())))();
  var ListLOfDayDataL = () => (ListLOfDayDataL = dart.constFn(dart.legacy(ListOfDayDataL())))();
  var DatepickerEntryL = () => (DatepickerEntryL = dart.constFn(dart.legacy(datepicker_component.DatepickerEntry)))();
  var JSArrayOfDatepickerEntryL = () => (JSArrayOfDatepickerEntryL = dart.constFn(_interceptors.JSArray$(DatepickerEntryL())))();
  var DatepickerEntryLToboolL = () => (DatepickerEntryLToboolL = dart.constFn(dart.fnType(boolL(), [DatepickerEntryL()])))();
  var StreamControllerOfDatepickerPeriodL = () => (StreamControllerOfDatepickerPeriodL = dart.constFn(async.StreamController$(DatepickerPeriodL())))();
  var _DayL = () => (_DayL = dart.constFn(dart.legacy(month_component._Day)))();
  var JSArrayOf_DayL = () => (JSArrayOf_DayL = dart.constFn(_interceptors.JSArray$(_DayL())))();
  var _WeekL = () => (_WeekL = dart.constFn(dart.legacy(month_component._Week)))();
  var JSArrayOf_WeekL = () => (JSArrayOf_WeekL = dart.constFn(_interceptors.JSArray$(_WeekL())))();
  var SigninStatusL = () => (SigninStatusL = dart.constFn(dart.legacy(signin_component.SigninStatus)))();
  var StreamControllerOfboolL = () => (StreamControllerOfboolL = dart.constFn(async.StreamController$(boolL())))();
  var AuthClientL = () => (AuthClientL = dart.constFn(dart.legacy(auth.AuthClient)))();
  var StreamControllerOfAuthClientL = () => (StreamControllerOfAuthClientL = dart.constFn(async.StreamController$(AuthClientL())))();
  var SigninEventL = () => (SigninEventL = dart.constFn(dart.legacy(signin_component.SigninEvent)))();
  var StreamControllerOfSigninEventL = () => (StreamControllerOfSigninEventL = dart.constFn(async.StreamController$(SigninEventL())))();
  var AutoRefreshingAuthClientL = () => (AutoRefreshingAuthClientL = dart.constFn(dart.legacy(auth.AutoRefreshingAuthClient)))();
  var AutoRefreshingAuthClientLToNullN = () => (AutoRefreshingAuthClientLToNullN = dart.constFn(dart.fnType(core.Null, [AutoRefreshingAuthClientL()])))();
  var UserConsentExceptionL = () => (UserConsentExceptionL = dart.constFn(dart.legacy(auth.UserConsentException)))();
  var FutureL = () => (FutureL = dart.constFn(dart.legacy(async.Future)))();
  var dynamicToFutureL = () => (dynamicToFutureL = dart.constFn(dart.fnType(FutureL(), [dart.dynamic])))();
  var FutureOfvoid = () => (FutureOfvoid = dart.constFn(async.Future$(dart.void)))();
  var ListOfStringL = () => (ListOfStringL = dart.constFn(core.List$(StringL())))();
  var ListLOfStringL = () => (ListLOfStringL = dart.constFn(dart.legacy(ListOfStringL())))();
  var FutureOfAutoRefreshingAuthClientL = () => (FutureOfAutoRefreshingAuthClientL = dart.constFn(async.Future$(AutoRefreshingAuthClientL())))();
  var FutureLOfAutoRefreshingAuthClientL = () => (FutureLOfAutoRefreshingAuthClientL = dart.constFn(dart.legacy(FutureOfAutoRefreshingAuthClientL())))();
  var dynamicToFutureLOfAutoRefreshingAuthClientL = () => (dynamicToFutureLOfAutoRefreshingAuthClientL = dart.constFn(dart.fnType(FutureLOfAutoRefreshingAuthClientL(), [dart.dynamic])))();
  var BrowserOAuth2FlowL = () => (BrowserOAuth2FlowL = dart.constFn(dart.legacy(auth_browser.BrowserOAuth2Flow)))();
  var BrowserOAuth2FlowLToFutureLOfAutoRefreshingAuthClientL = () => (BrowserOAuth2FlowLToFutureLOfAutoRefreshingAuthClientL = dart.constFn(dart.fnType(FutureLOfAutoRefreshingAuthClientL(), [BrowserOAuth2FlowL()])))();
  var ListOfMapLOfStringL$ObjectL = () => (ListOfMapLOfStringL$ObjectL = dart.constFn(core.List$(MapLOfStringL$ObjectL())))();
  var ListLOfMapLOfStringL$ObjectL = () => (ListLOfMapLOfStringL$ObjectL = dart.constFn(dart.legacy(ListOfMapLOfStringL$ObjectL())))();
  var JSArrayOfListLOfMapLOfStringL$ObjectL = () => (JSArrayOfListLOfMapLOfStringL$ObjectL = dart.constFn(_interceptors.JSArray$(ListLOfMapLOfStringL$ObjectL())))();
  var IdentityMapOfStringL$boolL = () => (IdentityMapOfStringL$boolL = dart.constFn(_js_helper.IdentityMap$(StringL(), boolL())))();
  var ParamInfoLToNullN = () => (ParamInfoLToNullN = dart.constFn(dart.fnType(core.Null, [ParamInfoL()])))();
  var CollectInfoL = () => (CollectInfoL = dart.constFn(dart.legacy(print_daily_graphic.CollectInfo)))();
  var JSArrayOfCollectInfoL = () => (JSArrayOfCollectInfoL = dart.constFn(_interceptors.JSArray$(CollectInfoL())))();
  var IdentityMapOfStringL$ListLOfMapLOfStringL$ObjectL = () => (IdentityMapOfStringL$ListLOfMapLOfStringL$ObjectL = dart.constFn(_js_helper.IdentityMap$(StringL(), ListLOfMapLOfStringL$ObjectL())))();
  var doubleLToboolL = () => (doubleLToboolL = dart.constFn(dart.fnType(boolL(), [doubleL()])))();
  var dynamicAndStringLAndStringLTodynamic = () => (dynamicAndStringLAndStringLTodynamic = dart.constFn(dart.fnType(dart.dynamic, [dart.dynamic, StringL(), StringL()])))();
  var dynamicToboolL = () => (dynamicToboolL = dart.constFn(dart.fnType(boolL(), [dart.dynamic])))();
  var JSArrayOfListLOfObjectL = () => (JSArrayOfListLOfObjectL = dart.constFn(_interceptors.JSArray$(ListLOfObjectL())))();
  var PeriodShiftLToboolL = () => (PeriodShiftLToboolL = dart.constFn(dart.fnType(boolL(), [PeriodShiftL()])))();
  var FileUploadInputElementL = () => (FileUploadInputElementL = dart.constFn(dart.legacy(html.FileUploadInputElement)))();
  var FormElementL = () => (FormElementL = dart.constFn(dart.legacy(html.FormElement)))();
  var PercentileDataL = () => (PercentileDataL = dart.constFn(dart.legacy(print_percentile.PercentileData)))();
  var JSArrayOfPercentileDataL = () => (JSArrayOfPercentileDataL = dart.constFn(_interceptors.JSArray$(PercentileDataL())))();
  var PercentileDataLToboolL = () => (PercentileDataLToboolL = dart.constFn(dart.fnType(boolL(), [PercentileDataL()])))();
  var VoidToPercentileDataL = () => (VoidToPercentileDataL = dart.constFn(dart.fnType(PercentileDataL(), [])))();
  var PercentileDataLAndPercentileDataLTointL = () => (PercentileDataLAndPercentileDataLTointL = dart.constFn(dart.fnType(intL(), [PercentileDataL(), PercentileDataL()])))();
  var JSArrayOfListLOfDayDataL = () => (JSArrayOfListLOfDayDataL = dart.constFn(_interceptors.JSArray$(ListLOfDayDataL())))();
  const CT = Object.create(null);
  var L32 = "package:nightscout_reporter/src/forms/print-weekly-graphic.dart";
  var L5 = "package:nightscout_reporter/src/controls/datepicker/datepicker_component.dart";
  var L20 = "package:nightscout_reporter/src/welcome/welcome_component.dart";
  var L2 = "package:nightscout_reporter/src/json_data.dart";
  var L30 = "package:nightscout_reporter/src/forms/print-percentile.dart";
  var L31 = "package:nightscout_reporter/src/whatsnew/whatsnew_component.dart";
  var L23 = "package:nightscout_reporter/src/printparams/printparams_component.dart";
  var L7 = "package:nightscout_reporter/src/forms/base-daily.dart";
  var L12 = "package:nightscout_reporter/src/forms/print-basalrate.dart";
  var L26 = "package:nightscout_reporter/src/settings/settings_component.dart";
  var L24 = "package:nightscout_reporter/src/controls/formparams/formparams_component.dart";
  var L6 = "package:nightscout_reporter/src/controls/datepicker/month_component.dart";
  var L13 = "package:nightscout_reporter/src/infoview/infoview_component.dart";
  var L3 = "package:nightscout_reporter/src/forms/base-print.dart";
  var L4 = "package:nightscout_reporter/src/forms/print-cgp.dart";
  var L25 = "package:nightscout_reporter/src/helpview/helpview_component.dart";
  var L14 = "package:nightscout_reporter/src/forms/print-user-data.dart";
  var L9 = "package:nightscout_reporter/src/forms/print-analysis.dart";
  var L29 = "package:nightscout_reporter/src/shortcutedit/shortcutedit_component.dart";
  var L19 = "package:nightscout_reporter/src/forms/print-daily-analysis.dart";
  var L17 = "package:nightscout_reporter/src/impressum/impressum_component.dart";
  var L8 = "package:nightscout_reporter/src/controls/signin/signin_component.dart";
  var L16 = "package:nightscout_reporter/src/forms/print-daily-graphic.dart";
  var L11 = "package:nightscout_reporter/src/forms/base-profile.dart";
  var L28 = "package:nightscout_reporter/src/forms/print-profile.dart";
  var L18 = "package:nightscout_reporter/src/forms/print-daily-gluc.dart";
  var L15 = "package:nightscout_reporter/src/forms/print-test.dart";
  var L22 = "package:nightscout_reporter/src/forms/print-daily-profile.dart";
  var L1 = "package:nightscout_reporter/src/globals.dart";
  var L21 = "package:nightscout_reporter/src/forms/print-daily-log.dart";
  var L10 = "package:nightscout_reporter/src/forms/print-daily-statistics.dart";
  var L0 = "package:nightscout_reporter/src/dsgvo/dsgvo_component.dart";
  var L27 = "package:nightscout_reporter/src/forms/print-daily-hours.dart";
  dart.defineLazy(CT, {
    get C0() {
      return C0 = dart.const({
        __proto__: json_data.Uploader.prototype,
        [_name$]: "Uploader.Unknown",
        index: 0
      });
    },
    get C1() {
      return C1 = dart.const({
        __proto__: json_data.Uploader.prototype,
        [_name$]: "Uploader.XDrip",
        index: 1
      });
    },
    get C2() {
      return C2 = dart.const({
        __proto__: json_data.Uploader.prototype,
        [_name$]: "Uploader.Tidepool",
        index: 2
      });
    },
    get C3() {
      return C3 = dart.const({
        __proto__: json_data.Uploader.prototype,
        [_name$]: "Uploader.Minimed600",
        index: 3
      });
    },
    get C4() {
      return C4 = dart.const({
        __proto__: json_data.Uploader.prototype,
        [_name$]: "Uploader.OpenAPS",
        index: 4
      });
    },
    get C5() {
      return C5 = dart.const({
        __proto__: json_data.Uploader.prototype,
        [_name$]: "Uploader.AndroidAPS",
        index: 5
      });
    },
    get C6() {
      return C6 = dart.const({
        __proto__: json_data.Uploader.prototype,
        [_name$]: "Uploader.Spike",
        index: 6
      });
    },
    get C7() {
      return C7 = dart.constList([C0 || CT.C0, C1 || CT.C1, C2 || CT.C2, C3 || CT.C3, C4 || CT.C4, C5 || CT.C5, C6 || CT.C6], UploaderL());
    },
    get C8() {
      return C8 = dart.const({
        __proto__: base_print.ParamType.prototype,
        [_name$0]: "ParamType.none",
        index: 0
      });
    },
    get C9() {
      return C9 = dart.const({
        __proto__: base_print.ParamType.prototype,
        [_name$0]: "ParamType.bool",
        index: 1
      });
    },
    get C10() {
      return C10 = dart.const({
        __proto__: base_print.ParamType.prototype,
        [_name$0]: "ParamType.string",
        index: 2
      });
    },
    get C11() {
      return C11 = dart.const({
        __proto__: base_print.ParamType.prototype,
        [_name$0]: "ParamType.int",
        index: 3
      });
    },
    get C12() {
      return C12 = dart.const({
        __proto__: base_print.ParamType.prototype,
        [_name$0]: "ParamType.list",
        index: 4
      });
    },
    get C13() {
      return C13 = dart.constList([C8 || CT.C8, C9 || CT.C9, C10 || CT.C10, C11 || CT.C11, C12 || CT.C12], ParamTypeL());
    },
    get C14() {
      return C14 = dart.const({
        __proto__: signin_component.SigninStatus.prototype,
        [_name$1]: "SigninStatus.requestAuthorization",
        index: 0
      });
    },
    get C15() {
      return C15 = dart.const({
        __proto__: signin_component.SigninStatus.prototype,
        [_name$1]: "SigninStatus.signinOk",
        index: 1
      });
    },
    get C16() {
      return C16 = dart.const({
        __proto__: signin_component.SigninStatus.prototype,
        [_name$1]: "SigninStatus.signedOut",
        index: 2
      });
    },
    get C17() {
      return C17 = dart.const({
        __proto__: signin_component.SigninStatus.prototype,
        [_name$1]: "SigninStatus.error",
        index: 3
      });
    },
    get C18() {
      return C18 = dart.const({
        __proto__: signin_component.SigninStatus.prototype,
        [_name$1]: "SigninStatus.message",
        index: 4
      });
    },
    get C19() {
      return C19 = dart.constList([C14 || CT.C14, C15 || CT.C15, C16 || CT.C16, C17 || CT.C17, C18 || CT.C18], SigninStatusL());
    }
  }, false);
  var _trigger = dart.privateName(dsgvo_component, "_trigger");
  var g = dart.privateName(dsgvo_component, "DSGVOComponent.g");
  dsgvo_component.DSGVOComponent = class DSGVOComponent extends core.Object {
    get g() {
      return this[g];
    }
    set g(value) {
      this[g] = value;
    }
    get trigger() {
      return this[_trigger].stream;
    }
    fire(type) {
      return async.async(dart.void, (function* fire() {
        this[_trigger].add(html.UIEvent.new(type, {detail: 0}));
      }).bind(this));
    }
  };
  (dsgvo_component.DSGVOComponent.new = function() {
    this[g] = globals.Globals.new();
    this[_trigger] = StreamControllerOfUIEventL().broadcast({sync: true});
    ;
  }).prototype = dsgvo_component.DSGVOComponent.prototype;
  dart.addTypeTests(dsgvo_component.DSGVOComponent);
  dart.addTypeCaches(dsgvo_component.DSGVOComponent);
  dart.setMethodSignature(dsgvo_component.DSGVOComponent, () => ({
    __proto__: dart.getMethods(dsgvo_component.DSGVOComponent.__proto__),
    fire: dart.fnType(dart.void, [dart.legacy(core.String)])
  }));
  dart.setGetterSignature(dsgvo_component.DSGVOComponent, () => ({
    __proto__: dart.getGetters(dsgvo_component.DSGVOComponent.__proto__),
    trigger: dart.legacy(async.Stream$(dart.legacy(html.UIEvent)))
  }));
  dart.setLibraryUri(dsgvo_component.DSGVOComponent, L0);
  dart.setFieldSignature(dsgvo_component.DSGVOComponent, () => ({
    __proto__: dart.getFields(dsgvo_component.DSGVOComponent.__proto__),
    g: dart.fieldType(dart.legacy(globals.Globals)),
    [_trigger]: dart.finalFieldType(dart.legacy(async.StreamController$(dart.legacy(html.UIEvent))))
  }));
  var _errors = dart.privateName(globals, "_errors");
  var _warnings = dart.privateName(globals, "_warnings");
  var _infos = dart.privateName(globals, "_infos");
  var _output = dart.privateName(globals, "_output");
  var _addText = dart.privateName(globals, "_addText");
  globals.Informator = class Informator extends core.Object {
    get hasContent() {
      return dart.test(this[_errors][$isNotEmpty]) || dart.test(this[_warnings][$isNotEmpty]) || dart.test(this[_infos][$isNotEmpty]);
    }
    [_output](list) {
      return StringL().as(dart.dsend(list, 'join', ["\n"]));
    }
    [_addText](list, text) {
      if (!dart.dtest(dart.dsend(list, 'contains', [text]))) dart.dsend(list, 'add', [text]);
    }
    clear() {
      this[_errors][$clear]();
      this[_warnings][$clear]();
      this[_infos][$clear]();
    }
    addError(text) {
      return this[_addText](this[_errors], text);
    }
    addWarning(text) {
      return this[_addText](this[_warnings], text);
    }
    addInfo(text) {
      return this[_addText](this[_infos], text);
    }
    addDevError(ex, text) {
      if (dart.test(globals.Globals.new().isDebug)) {
        if (ErrorL().is(ex)) {
          this.addError(dart.str(dart.toString(ex)) + "\n" + dart.str(ex[$stackTrace]));
        } else {
          this.addError(dart.toString(ex));
        }
      } else {
        this.addError(text);
      }
    }
    get errors() {
      return this[_output](this[_errors]);
    }
    get warnings() {
      return this[_output](this[_warnings]);
    }
    get infos() {
      return this[_output](this[_infos]);
    }
  };
  (globals.Informator.new = function() {
    this[_errors] = JSArrayOfStringL().of([]);
    this[_warnings] = JSArrayOfStringL().of([]);
    this[_infos] = JSArrayOfStringL().of([]);
    ;
  }).prototype = globals.Informator.prototype;
  dart.addTypeTests(globals.Informator);
  dart.addTypeCaches(globals.Informator);
  dart.setMethodSignature(globals.Informator, () => ({
    __proto__: dart.getMethods(globals.Informator.__proto__),
    [_output]: dart.fnType(dart.legacy(core.String), [dart.dynamic]),
    [_addText]: dart.fnType(dart.void, [dart.dynamic, dart.dynamic]),
    clear: dart.fnType(dart.void, []),
    addError: dart.fnType(dart.void, [dart.dynamic]),
    addWarning: dart.fnType(dart.void, [dart.dynamic]),
    addInfo: dart.fnType(dart.void, [dart.dynamic]),
    addDevError: dart.fnType(dart.void, [dart.dynamic, dart.legacy(core.String)])
  }));
  dart.setGetterSignature(globals.Informator, () => ({
    __proto__: dart.getGetters(globals.Informator.__proto__),
    hasContent: dart.legacy(core.bool),
    errors: dart.legacy(core.String),
    warnings: dart.legacy(core.String),
    infos: dart.legacy(core.String)
  }));
  dart.setLibraryUri(globals.Informator, L1);
  dart.setFieldSignature(globals.Informator, () => ({
    __proto__: dart.getFields(globals.Informator.__proto__),
    [_errors]: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(core.String)))),
    [_warnings]: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(core.String)))),
    [_infos]: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(core.String))))
  }));
  var okText = dart.privateName(globals, "Msg.okText");
  var text = dart.privateName(globals, "Msg.text");
  var dbgText = dart.privateName(globals, "Msg.dbgText");
  var type = dart.privateName(globals, "Msg.type");
  var links = dart.privateName(globals, "Msg.links");
  globals.Msg = class Msg extends core.Object {
    get okText() {
      return this[okText];
    }
    set okText(value) {
      this[okText] = value;
    }
    get text() {
      return this[text];
    }
    set text(value) {
      this[text] = value;
    }
    get dbgText() {
      return this[dbgText];
    }
    set dbgText(value) {
      this[dbgText] = value;
    }
    get type() {
      return this[type];
    }
    set type(value) {
      this[type] = value;
    }
    get links() {
      return this[links];
    }
    set links(value) {
      this[links] = value;
    }
    get isEmpty() {
      return (this.text == null || this.text === "") && dart.test(this.links[$isEmpty]);
    }
    clear() {
      this.text = null;
      this.dbgText = null;
      this.links = [];
    }
    dismiss(call) {
      if (call != null) dart.dcall(call, []);
      this.text = null;
      this.dbgText = null;
      this.links = [];
    }
  };
  (globals.Msg.new = function() {
    this[okText] = intl.Intl.message("Schliessen");
    this[text] = null;
    this[dbgText] = null;
    this[type] = "msg";
    this[links] = [];
    ;
  }).prototype = globals.Msg.prototype;
  dart.addTypeTests(globals.Msg);
  dart.addTypeCaches(globals.Msg);
  dart.setMethodSignature(globals.Msg, () => ({
    __proto__: dart.getMethods(globals.Msg.__proto__),
    clear: dart.fnType(dart.void, []),
    dismiss: dart.fnType(dart.void, [dart.dynamic])
  }));
  dart.setGetterSignature(globals.Msg, () => ({
    __proto__: dart.getGetters(globals.Msg.__proto__),
    isEmpty: dart.legacy(core.bool)
  }));
  dart.setLibraryUri(globals.Msg, L1);
  dart.setFieldSignature(globals.Msg, () => ({
    __proto__: dart.getFields(globals.Msg.__proto__),
    okText: dart.fieldType(dart.legacy(core.String)),
    text: dart.fieldType(dart.legacy(core.String)),
    dbgText: dart.fieldType(dart.legacy(core.String)),
    type: dart.fieldType(dart.legacy(core.String)),
    links: dart.fieldType(dart.legacy(core.List))
  }));
  var code$ = dart.privateName(globals, "LangData.code");
  var name$ = dart.privateName(globals, "LangData.name");
  var img$ = dart.privateName(globals, "LangData.img");
  globals.LangData = class LangData extends core.Object {
    get code() {
      return this[code$];
    }
    set code(value) {
      this[code$] = value;
    }
    get name() {
      return this[name$];
    }
    set name(value) {
      this[name$] = value;
    }
    get img() {
      return this[img$];
    }
    set img(value) {
      this[img$] = value;
    }
    get is24HourFormat() {
      switch (this.code) {
        case "en-US":
        case "en-GB":
        {
          return false;
        }
        default:
        {
          return true;
        }
      }
    }
    get dateformat() {
      return intl.Intl.message("dd.MM.yyyy", {desc: "this is the dateformat, please use dd for days, " + "MM for months and yyyy for year. " + "It has to be the english formatstring."});
    }
    get imgPath() {
      return "packages/nightscout_reporter/assets/img/lang-" + dart.str(this.img) + ".png";
    }
  };
  (globals.LangData.new = function(code, name, img) {
    this[code$] = code;
    this[name$] = name;
    this[img$] = img;
    ;
  }).prototype = globals.LangData.prototype;
  dart.addTypeTests(globals.LangData);
  dart.addTypeCaches(globals.LangData);
  dart.setGetterSignature(globals.LangData, () => ({
    __proto__: dart.getGetters(globals.LangData.__proto__),
    is24HourFormat: dart.legacy(core.bool),
    dateformat: dart.legacy(core.String),
    imgPath: dart.legacy(core.String)
  }));
  dart.setLibraryUri(globals.LangData, L1);
  dart.setFieldSignature(globals.LangData, () => ({
    __proto__: dart.getFields(globals.LangData.__proto__),
    code: dart.fieldType(dart.legacy(core.String)),
    name: dart.fieldType(dart.legacy(core.String)),
    img: dart.fieldType(dart.legacy(core.String))
  }));
  var title$ = dart.privateName(globals, "PeriodShift.title");
  var months$ = dart.privateName(globals, "PeriodShift.months");
  globals.PeriodShift = class PeriodShift extends core.Object {
    get title() {
      return this[title$];
    }
    set title(value) {
      this[title$] = value;
    }
    get months() {
      return this[months$];
    }
    set months(value) {
      this[months$] = value;
    }
  };
  (globals.PeriodShift.new = function(title, opts) {
    let months = opts && 'months' in opts ? opts.months : 0;
    this[title$] = title;
    this[months$] = months;
    ;
  }).prototype = globals.PeriodShift.prototype;
  dart.addTypeTests(globals.PeriodShift);
  dart.addTypeCaches(globals.PeriodShift);
  dart.setLibraryUri(globals.PeriodShift, L1);
  dart.setFieldSignature(globals.PeriodShift, () => ({
    __proto__: dart.getFields(globals.PeriodShift.__proto__),
    title: dart.fieldType(dart.legacy(core.String)),
    months: dart.fieldType(dart.legacy(core.int))
  }));
  var _language = dart.privateName(globals, "_language");
  var _pdfOrder = dart.privateName(globals, "_pdfOrder");
  var _viewType = dart.privateName(globals, "_viewType");
  var _period = dart.privateName(globals, "_period");
  var _isLocal = dart.privateName(globals, "_isLocal");
  var _theme = dart.privateName(globals, "_theme");
  var _userIdx = dart.privateName(globals, "_userIdx");
  var version = dart.privateName(globals, "Settings.version");
  var subVersion = dart.privateName(globals, "Settings.subVersion");
  var timestamp = dart.privateName(globals, "Settings.timestamp");
  var betaPrefix = dart.privateName(globals, "Settings.betaPrefix");
  var lastVersion = dart.privateName(globals, "Settings.lastVersion");
  var listGlucUnits = dart.privateName(globals, "Settings.listGlucUnits");
  var glucMGDLIdx = dart.privateName(globals, "Settings.glucMGDLIdx");
  var glucMGDLFromStatus = dart.privateName(globals, "Settings.glucMGDLFromStatus");
  var hasMGDL = dart.privateName(globals, "Settings.hasMGDL");
  var showAllTileParams = dart.privateName(globals, "Settings.showAllTileParams");
  var showCurrentGluc = dart.privateName(globals, "Settings.showCurrentGluc");
  var showInfo = dart.privateName(globals, "Settings.showInfo");
  var tileShowImage = dart.privateName(globals, "Settings.tileShowImage");
  var isDataSmoothing = dart.privateName(globals, "Settings.isDataSmoothing");
  var listConfig = dart.privateName(globals, "Settings.listConfig");
  var listConfigOrg = dart.privateName(globals, "Settings.listConfigOrg");
  var fmtDateForDisplay = dart.privateName(globals, "Settings.fmtDateForDisplay");
  var canDebug = dart.privateName(globals, "Settings.canDebug");
  var isDebug = dart.privateName(globals, "Settings.isDebug");
  var isBeta = dart.privateName(globals, "Settings.isBeta");
  var onAfterLoad = dart.privateName(globals, "Settings.onAfterLoad");
  var themeList = dart.privateName(globals, "Settings.themeList");
  var doShowDebug = dart.privateName(globals, "Settings.doShowDebug");
  var debugCache = dart.privateName(globals, "Settings.debugCache");
  var languageList = dart.privateName(globals, "Settings.languageList");
  var shortcutList = dart.privateName(globals, "Settings.shortcutList");
  var userList = dart.privateName(globals, "Settings.userList");
  var userListLoaded = dart.privateName(globals, "Settings.userListLoaded");
  globals.Settings = class Settings extends core.Object {
    get version() {
      return this[version];
    }
    set version(value) {
      this[version] = value;
    }
    get subVersion() {
      return this[subVersion];
    }
    set subVersion(value) {
      this[subVersion] = value;
    }
    get timestamp() {
      return this[timestamp];
    }
    set timestamp(value) {
      this[timestamp] = value;
    }
    get betaPrefix() {
      return this[betaPrefix];
    }
    set betaPrefix(value) {
      this[betaPrefix] = value;
    }
    get lastVersion() {
      return this[lastVersion];
    }
    set lastVersion(value) {
      this[lastVersion] = value;
    }
    get listGlucUnits() {
      return this[listGlucUnits];
    }
    set listGlucUnits(value) {
      this[listGlucUnits] = value;
    }
    get glucMGDLIdx() {
      return this[glucMGDLIdx];
    }
    set glucMGDLIdx(value) {
      this[glucMGDLIdx] = value;
    }
    get glucMGDLFromStatus() {
      return this[glucMGDLFromStatus];
    }
    set glucMGDLFromStatus(value) {
      this[glucMGDLFromStatus] = value;
    }
    get hasMGDL() {
      return this[hasMGDL];
    }
    set hasMGDL(value) {
      this[hasMGDL] = value;
    }
    get showAllTileParams() {
      return this[showAllTileParams];
    }
    set showAllTileParams(value) {
      this[showAllTileParams] = value;
    }
    get showCurrentGluc() {
      return this[showCurrentGluc];
    }
    set showCurrentGluc(value) {
      this[showCurrentGluc] = value;
    }
    get showInfo() {
      return this[showInfo];
    }
    set showInfo(value) {
      this[showInfo] = value;
    }
    get tileShowImage() {
      return this[tileShowImage];
    }
    set tileShowImage(value) {
      this[tileShowImage] = value;
    }
    get isDataSmoothing() {
      return this[isDataSmoothing];
    }
    set isDataSmoothing(value) {
      this[isDataSmoothing] = value;
    }
    get listConfig() {
      return this[listConfig];
    }
    set listConfig(value) {
      this[listConfig] = value;
    }
    get listConfigOrg() {
      return this[listConfigOrg];
    }
    set listConfigOrg(value) {
      this[listConfigOrg] = value;
    }
    get fmtDateForDisplay() {
      return this[fmtDateForDisplay];
    }
    set fmtDateForDisplay(value) {
      this[fmtDateForDisplay] = value;
    }
    get canDebug() {
      return this[canDebug];
    }
    set canDebug(value) {
      this[canDebug] = value;
    }
    get isDebug() {
      return this[isDebug];
    }
    set isDebug(value) {
      this[isDebug] = value;
    }
    get isBeta() {
      return this[isBeta];
    }
    set isBeta(value) {
      this[isBeta] = value;
    }
    get onAfterLoad() {
      return this[onAfterLoad];
    }
    set onAfterLoad(value) {
      this[onAfterLoad] = value;
    }
    get themeList() {
      return this[themeList];
    }
    set themeList(value) {
      this[themeList] = value;
    }
    get doShowDebug() {
      return this[doShowDebug];
    }
    set doShowDebug(value) {
      this[doShowDebug] = value;
    }
    get debugCache() {
      return this[debugCache];
    }
    set debugCache(value) {
      this[debugCache] = value;
    }
    get languageList() {
      return this[languageList];
    }
    set languageList(value) {
      this[languageList] = value;
    }
    get shortcutList() {
      return this[shortcutList];
    }
    set shortcutList(value) {
      this[shortcutList] = value;
    }
    get userList() {
      return this[userList];
    }
    set userList(value) {
      this[userList] = value;
    }
    get userListLoaded() {
      return this[userListLoaded];
    }
    set userListLoaded(value) {
      this[userListLoaded] = value;
    }
    static get msgThemeAuto() {
      return intl.Intl.message("Automatisch", {meaning: "theme selection - automatic"});
    }
    static get msgThemeStandard() {
      return intl.Intl.message("Standard", {meaning: "theme selection - standard"});
    }
    static get msgThemeXmas() {
      return intl.Intl.message("Weihnachten", {meaning: "theme selection - christmas"});
    }
    static get msgUnitMGDL() {
      return intl.Intl.message("mg/dL");
    }
    static get msgUnitMMOL() {
      return intl.Intl.message("mmol/L");
    }
    static get msgUnitBoth() {
      return intl.Intl.message("Beide");
    }
    get msgUnlimited() {
      return intl.Intl.message("Unbegrenzt");
    }
    get lblGlucUnits() {
      return intl.Intl.message("Einheit der Glukosemessung");
    }
    static get hastiod() {
      return html.window.localStorage[$_get]("debug") !== "yes";
    }
    get glucMGDL() {
      let t0;
      return JSArrayOfboolL().of([true, false, true])[$_get]((t0 = this.glucMGDLIdx, t0 == null ? 0 : t0));
    }
    get showBothUnits() {
      return this.glucMGDLIdx === 2;
    }
    get glucFactor() {
      return dart.test(this.glucMGDL) ? 1.0 : 18.02;
    }
    get glucPrecision() {
      return dart.test(this.glucMGDL) ? 0.0 : 2.0;
    }
    glucForSavedUnitValue(value) {
      if (dart.equals(this.glucMGDL, this.glucMGDLFromStatus)) return value;
      if (dart.test(this.glucMGDL)) return dart.notNull(value) * 18.02;
      return dart.notNull(value) / 18.02;
    }
    isMGDL(status) {
      let t0, t0$, t0$0;
      let check = (t0$0 = (t0$ = (t0 = status.settings.units, t0 == null ? null : t0[$trim]()), t0$ == null ? null : t0$[$toLowerCase]()), t0$0 == null ? "" : t0$0);
      return check[$startsWith]("mg") && check[$endsWith]("dl");
    }
    setGlucMGDL(status) {
      this.glucMGDLFromStatus = this.isMGDL(status);
    }
    get period() {
      return this[_period];
    }
    set period(value) {
      this[_period] = value;
      globals.Settings.updatePeriod(this[_period]);
    }
    get runsLocal() {
      return html.window[$location].href[$contains]("/localhost:");
    }
    get isLocal() {
      return this[_isLocal];
    }
    get themeName() {
      return this.themeList[$_get](this[_theme]);
    }
    get themeKey() {
      return this[_theme];
    }
    get theme() {
      if (this[_theme] == null) {
        if (date$.Date.today().month === 12) {
          return "xmas";
        } else {
          return "standard";
        }
      }
      return this[_theme];
    }
    set theme(value) {
      if (value == null || value === "standard" || value === "xmas") this[_theme] = value;
    }
    set isLocal(value) {
      this[_isLocal] = boolL().as(value);
    }
    showDebug(msg) {
      this.debugCache[$add](msg);
      if (dart.test(this.canDebug) && this.doShowDebug != null) dart.dsend(this, 'doShowDebug', []);
    }
    set pdfOrder(value) {
      this[_pdfOrder] = value;
      this.sortConfigs();
    }
    get viewType() {
      return this[_viewType] === "" ? "tile" : this[_viewType];
    }
    set viewType(value) {
      switch (value) {
        case "tile":
        case "list":
        {
          break;
        }
        default:
        {
          value = "tile";
          break;
        }
      }
      this[_viewType] = value;
    }
    get language() {
      let t0;
      t0 = this[_language];
      return t0 == null ? this.languageList[$_get](0) : t0;
    }
    set language(value) {
      this[_language] = value;
    }
    static get msgToday() {
      return intl.Intl.message("Heute");
    }
    static get msgLast2Days() {
      return intl.Intl.message("Letzte 2 Tage");
    }
    static get msgLast3Days() {
      return intl.Intl.message("Letzte 3 Tage");
    }
    static get msgLastWeek() {
      return intl.Intl.message("Letzte Woche");
    }
    static get msgLast2Weeks() {
      return intl.Intl.message("Letzte 2 Wochen");
    }
    static get msgLast3Weeks() {
      return intl.Intl.message("Letzte 3 Wochen");
    }
    static get msgLastMonth() {
      return intl.Intl.message("Letzter Monat");
    }
    static get msgLast3Months() {
      return intl.Intl.message("Letzte 3 Monate");
    }
    static get msgQuarter1() {
      return intl.Intl.message("Erstes Quartal");
    }
    static get msgQuarter2() {
      return intl.Intl.message("Zweites Quartal");
    }
    static get msgQuarter3() {
      return intl.Intl.message("Drittes Quartal");
    }
    static get msgQuarter4() {
      return intl.Intl.message("Viertes Quartal");
    }
    static updatePeriod(period) {
      if (period == null) return;
      period.maxDate = date$.Date.today();
      period.list[$clear]();
      period.list[$add](new datepicker_component.DatepickerEntry.new("today", globals.Settings.msgToday, dart.fn(data => {
        data.start = date$.Date.today();
        data.end = date$.Date.today();
      }, DatepickerPeriodLToNullN()), dart.fn(date => date, DateLToDateL())));
      period.list[$add](new datepicker_component.DatepickerEntry.new("2days", globals.Settings.msgLast2Days, dart.fn(data => {
        data.start = period.baseDate.add({days: -1});
        data.end = period.baseDate;
      }, DatepickerPeriodLToNullN()), dart.fn(date => date.add({days: -1}), DateLToDateL())));
      period.list[$add](new datepicker_component.DatepickerEntry.new("3days", globals.Settings.msgLast3Days, dart.fn(data => {
        data.start = period.baseDate.add({days: -2});
        data.end = period.baseDate;
      }, DatepickerPeriodLToNullN()), dart.fn(date => date.add({days: -2}), DateLToDateL())));
      period.list[$add](new datepicker_component.DatepickerEntry.new("1week", globals.Settings.msgLastWeek, dart.fn(data => {
        data.start = period.baseDate.add({days: -6});
        data.end = period.baseDate;
      }, DatepickerPeriodLToNullN()), dart.fn(date => date.add({days: -6}), DateLToDateL())));
      period.list[$add](new datepicker_component.DatepickerEntry.new("2weeks", globals.Settings.msgLast2Weeks, dart.fn(data => {
        data.start = period.baseDate.add({days: -13});
        data.end = period.baseDate;
      }, DatepickerPeriodLToNullN()), dart.fn(date => date.add({days: -13}), DateLToDateL())));
      period.list[$add](new datepicker_component.DatepickerEntry.new("3weeks", globals.Settings.msgLast3Weeks, dart.fn(data => {
        data.start = period.baseDate.add({days: -20});
        data.end = period.baseDate;
      }, DatepickerPeriodLToNullN()), dart.fn(date => date.add({days: -20}), DateLToDateL())));
      period.list[$add](new datepicker_component.DatepickerEntry.new("1month", globals.Settings.msgLastMonth, dart.fn(data => {
        data.start = period.baseDate.add({months: -1});
        data.end = period.baseDate;
      }, DatepickerPeriodLToNullN()), dart.fn(date => date.add({months: -1}), DateLToDateL())));
      period.list[$add](new datepicker_component.DatepickerEntry.new("3months", globals.Settings.msgLast3Months, dart.fn(data => {
        data.start = period.baseDate.add({months: -3});
        data.end = period.baseDate;
      }, DatepickerPeriodLToNullN()), dart.fn(date => date.add({months: -3}), DateLToDateL())));
    }
    sortConfigs() {
      if (this[_pdfOrder] === "" || dart.test(this.listConfig[$isEmpty])) return;
      if (this[_pdfOrder][$contains](",")) {
        let idList = this[_pdfOrder][$split](",");
        this[_pdfOrder] = "";
        for (let i = 0; i < dart.notNull(idList[$length]); i = i + 1) {
          let cfg = this.listConfig[$firstWhere](dart.fn(cfg => cfg.id == idList[$_get](i), FormConfigLToboolL()), {orElse: dart.fn(() => null, VoidToNullN())});
          if (cfg != null) {
            this[_pdfOrder] = dart.notNull(this[_pdfOrder]) + dart.notNull(cfg.idx);
          }
        }
      }
      this.user.saveParamsToForms();
      let srcList = this.listConfig[$sublist](0);
      this.listConfig[$clear]();
      let idxList = JSArrayOfStringL().of([]);
      for (let i = 0; i < this[_pdfOrder].length; i = i + 2) {
        idxList[$add](this[_pdfOrder][$substring](i, i + 2));
      }
      for (let i = 0; i < dart.notNull(idxList[$length]); i = i + 1) {
        let cfg = srcList[$firstWhere](dart.fn(cfg => cfg.idx == idxList[$_get](i), FormConfigLToboolL()), {orElse: dart.fn(() => null, VoidToNullN())});
        if (cfg != null) {
          srcList[$remove](cfg);
          this.listConfig[$add](cfg);
        }
      }
      for (let cfg of srcList) {
        this.listConfig[$add](cfg);
      }
      this.user.loadParamsFromForms();
      this.savePdfOrder();
    }
    get currentFormsAsMap() {
      let ret = new (IdentityMapOfStringL$dynamic()).new();
      for (let cfg of this.listConfig) {
        if (dart.test(cfg.checked)) ret[$_set](cfg.form.id, cfg.asJson);
      }
      return ret;
    }
    get userDisplay() {
      return this.user.display;
    }
    get userIdx() {
      return this[_userIdx];
    }
    set userIdx(value) {
      if (!dart.equals(value, this[_userIdx])) {
        this.user.loadParamsFromForms();
      }
      if (dart.dtest(dart.dsend(value, '<', [0])) || dart.dtest(dart.dsend(value, '>=', [this.userList[$length]]))) {
        value = 0;
        if (dart.test(this.userList[$isEmpty])) this.userList[$add](new globals.UserData.new(GlobalsL().as(this)));
      }
      this.userList[$_get](core.int.as(value)).saveParamsToForms();
      this[_userIdx] = intL().as(value);
    }
    get user() {
      if (dart.notNull(this[_userIdx]) >= 0 && dart.notNull(this[_userIdx]) < dart.notNull(this.userList[$length])) return this.userList[$_get](this[_userIdx]);
      this[_userIdx] = 0;
      if (dart.test(this.userList[$isNotEmpty])) return this.userList[$_get](0);
      return new globals.UserData.new(GlobalsL().as(this));
    }
    save(opts) {
      let updateSync = opts && 'updateSync' in opts ? opts.updateSync : true;
      let skipReload = opts && 'skipReload' in opts ? opts.skipReload : false;
    }
    savePdfOrder() {
      if (dart.test(this.listConfig[$isEmpty])) return;
      let idList = [];
      for (let cfg of this.listConfig) {
        idList[$add](cfg.idx);
      }
      this[_pdfOrder] = idList[$join]("");
      this.save({updateSync: false});
    }
    saveStorage(key, value) {
      if (dart.test(this.isBeta)) key = dart.str(this.betaPrefix) + dart.str(key);
      if (value == null || value[$isEmpty]) {
        html.window.localStorage[$remove](key);
      } else {
        html.window.localStorage[$_set](key, value);
      }
    }
    loadStorage(key) {
      if (dart.test(this.isBeta)) key = dart.str(this.betaPrefix) + dart.str(key);
      let ret = html.window.localStorage[$_get](key);
      if (ret === "null" || ret == null) ret = "";
      return ret;
    }
    get asSharedString() {
      let t0, t0$;
      let users = "";
      for (let i = 0; i < dart.notNull(this.userList[$length]); i = i + 1) {
        users = users + "," + dart.str(this.userList[$_get](i).asJsonString);
      }
      if (users.length > 1) users = users[$substring](1);
      let shortcuts = "";
      for (let i = 0; i < dart.notNull(this.shortcutList[$length]); i = i + 1) {
        shortcuts = shortcuts + "," + dart.str(this.shortcutList[$_get](i).asJsonString);
      }
      if (shortcuts.length > 1) shortcuts = shortcuts[$substring](1);
      this.timestamp = new core.DateTime.now().millisecondsSinceEpoch;
      return "{" + "\"s1\":\"" + dart.str(this.version) + "\"" + ",\"s4\":" + dart.str(this.userIdx) + ",\"s5\":" + dart.str(this.glucMGDLIdx) + ",\"s6\":\"" + dart.str((t0 = this.language.code, t0 == null ? "de_DE" : t0)) + "\"" + ",\"s7\":\"" + (dart.test(this.showCurrentGluc) ? "yes" : "no") + "\"" + ",\"s8\":\"" + dart.str((t0$ = this.period, t0$ == null ? null : dart.toString(t0$))) + "\"" + ",\"s9\":\"" + dart.str(this[_pdfOrder]) + "\"" + ",\"s10\":\"" + dart.str(this[_viewType]) + "\"" + ",\"s11\":" + dart.str(this.timestamp) + ",\"s12\":" + dart.str(this.tileShowImage) + ",\"s13\":" + dart.str(this.showAllTileParams) + ",\"s2\":[" + users + "]" + ",\"s3\":[" + shortcuts + "]" + "}";
    }
    fromSharedJson(json) {
      try {
        this.lastVersion = json_data.JsonData.toText(dart.dsend(json, '_get', ["s1"]));
        let users = dart.dsend(json, '_get', ["s2"]);
        let shortcuts = dart.dsend(json, '_get', ["s3"]);
        this.glucMGDLIdx = json_data.JsonData.toInt(dart.dsend(json, '_get', ["s5"]));
        let langId = json_data.JsonData.toText(dart.dsend(json, '_get', ["s6"]));
        let idx = this.languageList[$indexWhere](dart.fn(v => v.code == langId, LangDataLToboolL()));
        if (dart.notNull(idx) >= 0) this.language = this.languageList[$_get](idx);
        this.showCurrentGluc = json_data.JsonData.toBool(dart.dsend(json, '_get', ["s7"]));
        this.period = new datepicker_component.DatepickerPeriod.new({src: json_data.JsonData.toText(dart.dsend(json, '_get', ["s8"]))});
        this.pdfOrder = json_data.JsonData.toText(dart.dsend(json, '_get', ["s9"]));
        this.viewType = json_data.JsonData.toText(dart.dsend(json, '_get', ["s10"]));
        this.timestamp = json_data.JsonData.toInt(dart.dsend(json, '_get', ["s11"]));
        this.tileShowImage = json_data.JsonData.toBool(dart.dsend(json, '_get', ["s12"]), {ifEmpty: true});
        this.showAllTileParams = json_data.JsonData.toBool(dart.dsend(json, '_get', ["s13"]));
        this.period.fmtDate = this.language.dateformat;
        this.userListLoaded = false;
        this.userList[$clear]();
        if (users != null) {
          try {
            for (let entry of IterableL().as(users)) {
              this.userList[$add](globals.UserData.fromJson(GlobalsL().as(this), entry));
            }
          } catch (e) {
            let ex = dart.getThrown(e);
            globals.Globals.new().info.addDevError(ex, "Fehler beim laden der User in Settings.fromSharedJson: " + dart.str(dart.toString(ex)));
          }
        } else {
        }
        this.userList[$sort](dart.fn((a, b) => a.display[$compareTo](b.display), UserDataLAndUserDataLTointL()));
        this.userListLoaded = true;
        this.userIdx = json_data.JsonData.toInt(dart.dsend(json, '_get', ["s4"]));
        this.shortcutList[$clear]();
        if (shortcuts != null) {
          try {
            for (let entry of IterableL().as(shortcuts)) {
              this.shortcutList[$add](globals.ShortcutData.fromJson(GlobalsL().as(this), entry));
            }
          } catch (e$) {
            let ex = dart.getThrown(e$);
            let msg = dart.toString(ex);
            this.showDebug("Fehler bei Settings.fromSharedJson (shortcuts): " + dart.str(msg));
          }
        }
        if (this.onAfterLoad != null) dart.dsend(this, 'onAfterLoad', []);
      } catch (e$0) {
        let ex = dart.getThrown(e$0);
        let msg = dart.toString(ex);
        this.showDebug("Fehler bei Settings.fromSharedJson: " + dart.str(msg));
      }
    }
    get asDeviceString() {
      return "";
    }
    get jsonString() {
      let t3, t3$;
      let users = "";
      for (let i = 0; i < dart.notNull(this.userList[$length]); i = i + 1) {
        users = users + "," + dart.str(this.userList[$_get](i).asJsonString);
      }
      if (users.length > 1) users = users[$substring](1);
      let shortcuts = "";
      for (let i = 0; i < dart.notNull(this.shortcutList[$length]); i = i + 1) {
        shortcuts = shortcuts + "," + dart.str(this.shortcutList[$_get](i).asJsonString);
      }
      if (shortcuts.length > 1) shortcuts = shortcuts[$substring](1);
      return "\"version\":\"" + dart.str(this.version) + "\"" + ",\"mu\":\"" + dart.str(globals.Settings.doit("[" + users + "]")) + "\"" + ",\"sc\":\"" + dart.str(globals.Settings.doit("[" + shortcuts + "]")) + "\"" + ",\"userIdx\":\"" + dart.str(this.userIdx) + "\"" + ",\"glucMGDL\":\"" + dart.str(this.glucMGDL) + "\"" + ",\"language\":\"" + dart.str((t3 = this.language.code, t3 == null ? "de_DE" : t3)) + "\"" + ",\"showCurrentGluc\":\"" + (dart.test(this.showCurrentGluc) ? "yes" : "no") + "\"" + ",\"period\":\"" + dart.str((t3$ = this.period, t3$ == null ? null : dart.toString(t3$))) + "\"" + ",\"pdfOrder\":\"" + dart.str(this[_pdfOrder]) + "\"" + ",\"viewType\":\"" + dart.str(this[_viewType]) + "\"" + ",\"timestamp\":\"" + dart.str(this.timestamp) + "\"" + ",\"tileShowImage\":\"" + (dart.test(this.tileShowImage) ? "yes" : "no") + "\"" + ",\"showAllTileParams\":\"" + (dart.test(this.showAllTileParams) ? "yes" : "no") + "\"";
    }
    get storageString() {
      return "\"version\":\"" + dart.str(this.loadStorage("version")) + "\"" + ",\"userIdx\":\"" + dart.str(this.loadStorage("userIdx")) + "\"" + ",\"mu\":\"" + dart.str(this.loadStorage("mu")) + "\"" + ",\"sc\":\"" + dart.str(this.loadStorage("sc")) + "\"" + ",\"glucMGDL\":\"" + dart.str(this.loadStorage("glucMGDL")) + "\"" + ",\"language\":\"" + dart.str(this.loadStorage("language")) + "\"" + ",\"pdfCreationMaxSize\":\"" + dart.str(this.loadStorage("pdfCreationMaxSize")) + "\"" + ",\"showCurrentGluc\":\"" + dart.str(this.loadStorage("showCurrentGluc")) + "\"" + ",\"period\":\"" + dart.str(this.loadStorage("period")) + "\"" + ",\"pdfOrder\":\"" + dart.str(this.loadStorage("pdfOrder")) + "\"" + ",\"viewType\":\"" + dart.str(this.loadStorage("viewType")) + "\"" + ",\"timestamp\":\"" + dart.str(this.loadStorage("timestamp")) + "\"" + ",\"currCompIdx\":\"" + dart.str(this.loadStorage("currCompIdx")) + "\"" + ",\"tileShowImage\":\"" + dart.str(this.loadStorage("tileShowImage")) + "\"" + ",\"showAllTileParams\":\"" + dart.str(this.loadStorage("showAllTileParams")) + "\"";
    }
    loadLocalOnlySettings() {
      this.canDebug = this.loadStorage("debug") === "yes";
      this.fmtDateForDisplay = new intl.DateFormat.new(this.language.dateformat);
    }
    fromSharedString(src) {
      try {
        let json = convert.json.decode(src);
        if (dart.dsend(json, '_get', ["version"]) != null)
          this.fromJson(json);
        else
          this.fromSharedJson(json);
      } catch (e) {
        let ex = dart.getThrown(e);
        let msg = dart.toString(ex);
        this.showDebug("Fehler bei Settings.fromSharedString: " + dart.str(msg));
      }
    }
    fromStrings(shared, device) {
      try {
        this.fromSharedJson(convert.json.decode(shared));
        this.fromDeviceJson(convert.json.decode(device));
      } catch (e) {
        let ex = dart.getThrown(e);
        let msg = dart.toString(ex);
        this.showDebug("Fehler bei Settings.fromStrings: " + dart.str(msg));
      }
    }
    fromDeviceJson(json) {
    }
    fromJson(json) {
      try {
        this.lastVersion = json_data.JsonData.toText(dart.dsend(json, '_get', ["version"]));
        this.glucMGDLIdx = json_data.JsonData.toInt(dart.dsend(json, '_get', ["glucMGDL"]));
        let langId = json_data.JsonData.toText(dart.dsend(json, '_get', ["language"]));
        let idx = this.languageList[$indexWhere](dart.fn(v => v.code == langId, LangDataLToboolL()));
        if (dart.notNull(idx) >= 0) this.language = this.languageList[$_get](idx);
        this.showAllTileParams = json_data.JsonData.toBool(dart.dsend(json, '_get', ["showAllTileParams"]));
        this.showCurrentGluc = json_data.JsonData.toBool(dart.dsend(json, '_get', ["showCurrentGluc"]));
        this.pdfOrder = json_data.JsonData.toText(dart.dsend(json, '_get', ["pdfOrder"]));
        this.viewType = json_data.JsonData.toText(dart.dsend(json, '_get', ["viewType"]));
        this.period = new datepicker_component.DatepickerPeriod.new({src: json_data.JsonData.toText(dart.dsend(json, '_get', ["period"]))});
        this.timestamp = json_data.JsonData.toInt(dart.dsend(json, '_get', ["timestamp"]));
        this.tileShowImage = json_data.JsonData.toBool(dart.dsend(json, '_get', ["tileShowImage"]), {ifEmpty: true});
        this.period.fmtDate = this.language.dateformat;
        let users = StringL().as(dart.dsend(json, '_get', ["mu"]));
        this.userListLoaded = false;
        this.userList[$clear]();
        if (users != null) {
          let text = globals.Settings.tiod(users);
          if (text != null && text[$isNotEmpty]) {
            try {
              let list = convert.json.decode(text);
              for (let entry of IterableL().as(list)) {
                this.userList[$add](globals.UserData.fromJson(GlobalsL().as(this), entry));
              }
            } catch (e) {
              let ex = dart.getThrown(e);
            }
          } else {
          }
        }
        this.userList[$sort](dart.fn((a, b) => a.display[$compareTo](b.display), UserDataLAndUserDataLTointL()));
        this.userListLoaded = true;
        this.userIdx = json_data.JsonData.toInt(dart.dsend(json, '_get', ["userIdx"]));
        let shortcuts = StringL().as(dart.dsend(json, '_get', ["sc"]));
        this.shortcutList[$clear]();
        if (shortcuts != null) {
          let text = globals.Settings.tiod(shortcuts);
          if (text != null && text[$isNotEmpty]) {
            try {
              let list = convert.json.decode(text);
              for (let entry of IterableL().as(list)) {
                this.shortcutList[$add](globals.ShortcutData.fromJson(GlobalsL().as(this), entry));
              }
            } catch (e$) {
              let ex = dart.getThrown(e$);
              let msg = dart.toString(ex);
              this.showDebug("Fehler bei Settings.fromJson (shortcuts): " + dart.str(msg));
            }
          } else {
          }
        }
      } catch (e$0) {
        let ex = dart.getThrown(e$0);
        let msg = dart.toString(ex);
        this.showDebug("Fehler bei Settings.fromJson: " + dart.str(msg));
      }
    }
    static tiod(src) {
      if (src == null || src[$isEmpty]) return "";
      if (src[$startsWith]("{")) return src;
      let ret = "";
      let pos = (src.length / 2)[$truncate]();
      src = dart.str(src[$substring](pos + 1)) + dart.str(src[$substring](0, pos - 1));
      try {
        convert.base64Decode(src)[$forEach](dart.fn(value => {
          ret = dart.str(ret) + dart.str(core.String.fromCharCode(value));
        }, intLToNullN()));
        ret = convert.utf8.decode(ret[$codeUnits]);
      } catch (e) {
        let ex = dart.getThrown(e);
        ret = "";
      }
      return ret;
    }
    static doit(src) {
      if (!dart.test(globals.Settings.hastiod)) return src;
      let ret = convert.base64Encode(convert.utf8.encode(src));
      let pos = (ret.length / 2)[$truncate]();
      let rnd = math.Random.new();
      core.String.fromCharCode(dart.notNull(rnd.nextInt(26)) + 64);
      ret = dart.str(ret[$substring](pos)) + dart.str(core.String.fromCharCode(dart.notNull(rnd.nextInt(26)) + 64)) + dart.str(core.String.fromCharCode(dart.notNull(rnd.nextInt(10)) + 48)) + dart.str(ret[$substring](0, pos));
      return ret;
    }
  };
  (globals.Settings.new = function() {
    this[version] = "2.0.7";
    this[subVersion] = "1";
    this[timestamp] = 0;
    this[betaPrefix] = "@";
    this[lastVersion] = null;
    this[listGlucUnits] = JSArrayOfStringL().of([globals.Settings.msgUnitMGDL, globals.Settings.msgUnitMMOL, globals.Settings.msgUnitBoth]);
    this[glucMGDLIdx] = null;
    this[glucMGDLFromStatus] = true;
    this[hasMGDL] = false;
    this[showAllTileParams] = false;
    this[showCurrentGluc] = false;
    this[showInfo] = false;
    this[tileShowImage] = true;
    this[isDataSmoothing] = true;
    this[_language] = null;
    this[_pdfOrder] = "";
    this[_viewType] = "";
    this[listConfig] = JSArrayOfFormConfigL().of([]);
    this[listConfigOrg] = JSArrayOfFormConfigL().of([]);
    this[fmtDateForDisplay] = null;
    this[_period] = new datepicker_component.DatepickerPeriod.new();
    this[canDebug] = false;
    this[isDebug] = false;
    this[isBeta] = html.window[$location].href[$contains]("/beta/");
    this[_isLocal] = html.window[$location].href[$contains]("/localhost:");
    this[onAfterLoad] = null;
    this[themeList] = MapOfStringL$StringL().unmodifiable(new _js_helper.LinkedMap.from([null, globals.Settings.msgThemeAuto, "standard", globals.Settings.msgThemeStandard, "xmas", globals.Settings.msgThemeXmas]));
    this[_theme] = null;
    this[doShowDebug] = null;
    this[debugCache] = JSArrayOfStringL().of([]);
    this[languageList] = JSArrayOfLangDataL().of([new globals.LangData.new("de_DE", intl.Intl.message("Deutsch"), "de"), new globals.LangData.new("en_US", intl.Intl.message("English (USA)"), "us"), new globals.LangData.new("en_GB", intl.Intl.message("English (GB)"), "gb"), new globals.LangData.new("es_ES", intl.Intl.message("Español"), "es"), new globals.LangData.new("pl_PL", intl.Intl.message("Polski"), "pl"), new globals.LangData.new("ja_JP", intl.Intl.message("日本の"), "jp"), new globals.LangData.new("sk_SK", intl.Intl.message("Slovenský"), "sk"), new globals.LangData.new("fr_FR", intl.Intl.message("Français"), "fr"), new globals.LangData.new("pt_PT", intl.Intl.message("Português"), "pt")]);
    this[shortcutList] = JSArrayOfShortcutDataL().of([]);
    this[userList] = JSArrayOfUserDataL().of([]);
    this[userListLoaded] = false;
    this[_userIdx] = 0;
    ;
  }).prototype = globals.Settings.prototype;
  dart.addTypeTests(globals.Settings);
  dart.addTypeCaches(globals.Settings);
  dart.setMethodSignature(globals.Settings, () => ({
    __proto__: dart.getMethods(globals.Settings.__proto__),
    glucForSavedUnitValue: dart.fnType(dart.legacy(core.double), [dart.legacy(core.double)]),
    isMGDL: dart.fnType(dart.legacy(core.bool), [dart.legacy(json_data.StatusData)]),
    setGlucMGDL: dart.fnType(dart.void, [dart.legacy(json_data.StatusData)]),
    showDebug: dart.fnType(dart.void, [dart.legacy(core.String)]),
    sortConfigs: dart.fnType(dart.void, []),
    save: dart.fnType(dart.void, [], {skipReload: dart.legacy(core.bool), updateSync: dart.legacy(core.bool)}, {}),
    savePdfOrder: dart.fnType(dart.void, []),
    saveStorage: dart.fnType(dart.void, [dart.legacy(core.String), dart.legacy(core.String)]),
    loadStorage: dart.fnType(dart.legacy(core.String), [dart.legacy(core.String)]),
    fromSharedJson: dart.fnType(dart.void, [dart.dynamic]),
    loadLocalOnlySettings: dart.fnType(dart.void, []),
    fromSharedString: dart.fnType(dart.void, [dart.legacy(core.String)]),
    fromStrings: dart.fnType(dart.void, [dart.legacy(core.String), dart.legacy(core.String)]),
    fromDeviceJson: dart.fnType(dart.void, [dart.dynamic]),
    fromJson: dart.fnType(dart.void, [dart.dynamic])
  }));
  dart.setGetterSignature(globals.Settings, () => ({
    __proto__: dart.getGetters(globals.Settings.__proto__),
    msgUnlimited: dart.legacy(core.String),
    lblGlucUnits: dart.legacy(core.String),
    glucMGDL: dart.legacy(core.bool),
    showBothUnits: dart.legacy(core.bool),
    glucFactor: dart.legacy(core.double),
    glucPrecision: dart.legacy(core.double),
    period: dart.legacy(datepicker_component.DatepickerPeriod),
    runsLocal: dart.legacy(core.bool),
    isLocal: dart.legacy(core.bool),
    themeName: dart.legacy(core.String),
    themeKey: dart.legacy(core.String),
    theme: dart.legacy(core.String),
    viewType: dart.legacy(core.String),
    language: dart.legacy(globals.LangData),
    currentFormsAsMap: dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)),
    userDisplay: dart.legacy(core.String),
    userIdx: dart.legacy(core.int),
    user: dart.legacy(globals.UserData),
    asSharedString: dart.legacy(core.String),
    asDeviceString: dart.legacy(core.String),
    jsonString: dart.legacy(core.String),
    storageString: dart.legacy(core.String)
  }));
  dart.setSetterSignature(globals.Settings, () => ({
    __proto__: dart.getSetters(globals.Settings.__proto__),
    period: dart.legacy(datepicker_component.DatepickerPeriod),
    theme: dart.legacy(core.String),
    isLocal: dart.dynamic,
    pdfOrder: dart.legacy(core.String),
    viewType: dart.legacy(core.String),
    language: dart.legacy(globals.LangData),
    userIdx: dart.dynamic
  }));
  dart.setLibraryUri(globals.Settings, L1);
  dart.setFieldSignature(globals.Settings, () => ({
    __proto__: dart.getFields(globals.Settings.__proto__),
    version: dart.fieldType(dart.legacy(core.String)),
    subVersion: dart.fieldType(dart.legacy(core.String)),
    timestamp: dart.fieldType(dart.legacy(core.int)),
    betaPrefix: dart.fieldType(dart.legacy(core.String)),
    lastVersion: dart.fieldType(dart.legacy(core.String)),
    listGlucUnits: dart.fieldType(dart.legacy(core.List$(dart.legacy(core.String)))),
    glucMGDLIdx: dart.fieldType(dart.legacy(core.int)),
    glucMGDLFromStatus: dart.fieldType(dart.legacy(core.bool)),
    hasMGDL: dart.fieldType(dart.legacy(core.bool)),
    showAllTileParams: dart.fieldType(dart.legacy(core.bool)),
    showCurrentGluc: dart.fieldType(dart.legacy(core.bool)),
    showInfo: dart.fieldType(dart.legacy(core.bool)),
    tileShowImage: dart.fieldType(dart.legacy(core.bool)),
    isDataSmoothing: dart.fieldType(dart.legacy(core.bool)),
    [_language]: dart.fieldType(dart.legacy(globals.LangData)),
    [_pdfOrder]: dart.fieldType(dart.legacy(core.String)),
    [_viewType]: dart.fieldType(dart.legacy(core.String)),
    listConfig: dart.fieldType(dart.legacy(core.List$(dart.legacy(base_print.FormConfig)))),
    listConfigOrg: dart.fieldType(dart.legacy(core.List$(dart.legacy(base_print.FormConfig)))),
    fmtDateForDisplay: dart.fieldType(dart.legacy(intl.DateFormat)),
    [_period]: dart.fieldType(dart.legacy(datepicker_component.DatepickerPeriod)),
    canDebug: dart.fieldType(dart.legacy(core.bool)),
    isDebug: dart.fieldType(dart.legacy(core.bool)),
    isBeta: dart.fieldType(dart.legacy(core.bool)),
    [_isLocal]: dart.fieldType(dart.legacy(core.bool)),
    onAfterLoad: dart.fieldType(dart.dynamic),
    themeList: dart.fieldType(dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(core.String)))),
    [_theme]: dart.fieldType(dart.legacy(core.String)),
    doShowDebug: dart.fieldType(dart.dynamic),
    debugCache: dart.fieldType(dart.legacy(core.List$(dart.legacy(core.String)))),
    languageList: dart.fieldType(dart.legacy(core.List$(dart.legacy(globals.LangData)))),
    shortcutList: dart.fieldType(dart.legacy(core.List$(dart.legacy(globals.ShortcutData)))),
    userList: dart.fieldType(dart.legacy(core.List$(dart.legacy(globals.UserData)))),
    userListLoaded: dart.fieldType(dart.legacy(core.bool)),
    [_userIdx]: dart.fieldType(dart.legacy(core.int))
  }));
  var _ppStandardLimits = dart.privateName(globals, "_ppStandardLimits");
  var _pdfCreationMaxSize = dart.privateName(globals, "_pdfCreationMaxSize");
  var _client = dart.privateName(globals, "_client");
  var _syncGoogle = dart.privateName(globals, "_syncGoogle");
  var _khFactor = dart.privateName(globals, "_khFactor");
  var _googleLoaded = dart.privateName(globals, "_googleLoaded");
  var _loadFromGoogle = dart.privateName(globals, "_loadFromGoogle");
  var _uploadToGoogle = dart.privateName(globals, "_uploadToGoogle");
  var _initAfterLoad = dart.privateName(globals, "_initAfterLoad");
  var _getFromGoogle = dart.privateName(globals, "_getFromGoogle");
  var _searchDocuments = dart.privateName(globals, "_searchDocuments");
  var sanitizer = dart.privateName(globals, "Globals.sanitizer");
  var currShortcutIdx = dart.privateName(globals, "Globals.currShortcutIdx");
  var currShortcut = dart.privateName(globals, "Globals.currShortcut");
  var ppMaxInsulinEffectInMS = dart.privateName(globals, "Globals.ppMaxInsulinEffectInMS");
  var ppCGPAlwaysStandardLimits = dart.privateName(globals, "Globals.ppCGPAlwaysStandardLimits");
  var ppComparable = dart.privateName(globals, "Globals.ppComparable");
  var ppGlucMaxIdx = dart.privateName(globals, "Globals.ppGlucMaxIdx");
  var ppBasalPrecisionIdx = dart.privateName(globals, "Globals.ppBasalPrecisionIdx");
  var ppLatestFirst = dart.privateName(globals, "Globals.ppLatestFirst");
  var ppPdfSameWindow = dart.privateName(globals, "Globals.ppPdfSameWindow");
  var ppPdfDownload = dart.privateName(globals, "Globals.ppPdfDownload");
  var ppHideNightscoutInPDF = dart.privateName(globals, "Globals.ppHideNightscoutInPDF");
  var ppShowUrlInPDF = dart.privateName(globals, "Globals.ppShowUrlInPDF");
  var ppHideLoopData = dart.privateName(globals, "Globals.ppHideLoopData");
  var isCreatingPDF = dart.privateName(globals, "Globals.isCreatingPDF");
  var msg = dart.privateName(globals, "Globals.msg");
  var info = dart.privateName(globals, "Globals.info");
  var basalPrecisionAuto = dart.privateName(globals, "Globals.basalPrecisionAuto");
  var driveParent = dart.privateName(globals, "Globals.driveParent");
  var currPeriodShift = dart.privateName(globals, "Globals.currPeriodShift");
  var title = dart.privateName(globals, "Globals.title");
  var settingsFile = dart.privateName(globals, "Globals.settingsFile");
  var urlPdf = dart.privateName(globals, "Globals.urlPdf");
  var urlPlayground = dart.privateName(globals, "Globals.urlPlayground");
  var googleClientId = dart.privateName(globals, "Globals.googleClientId");
  var isConfigured = dart.privateName(globals, "Globals.isConfigured");
  var isLoading = dart.privateName(globals, "Globals.isLoading");
  globals.Globals = class Globals extends globals.Settings {
    get sanitizer() {
      return this[sanitizer];
    }
    set sanitizer(value) {
      this[sanitizer] = value;
    }
    get currShortcutIdx() {
      return this[currShortcutIdx];
    }
    set currShortcutIdx(value) {
      this[currShortcutIdx] = value;
    }
    get currShortcut() {
      return this[currShortcut];
    }
    set currShortcut(value) {
      this[currShortcut] = value;
    }
    get ppMaxInsulinEffectInMS() {
      return this[ppMaxInsulinEffectInMS];
    }
    set ppMaxInsulinEffectInMS(value) {
      this[ppMaxInsulinEffectInMS] = value;
    }
    get ppCGPAlwaysStandardLimits() {
      return this[ppCGPAlwaysStandardLimits];
    }
    set ppCGPAlwaysStandardLimits(value) {
      this[ppCGPAlwaysStandardLimits] = value;
    }
    get ppComparable() {
      return this[ppComparable];
    }
    set ppComparable(value) {
      this[ppComparable] = value;
    }
    get ppGlucMaxIdx() {
      return this[ppGlucMaxIdx];
    }
    set ppGlucMaxIdx(value) {
      this[ppGlucMaxIdx] = value;
    }
    get ppBasalPrecisionIdx() {
      return this[ppBasalPrecisionIdx];
    }
    set ppBasalPrecisionIdx(value) {
      this[ppBasalPrecisionIdx] = value;
    }
    get ppLatestFirst() {
      return this[ppLatestFirst];
    }
    set ppLatestFirst(value) {
      this[ppLatestFirst] = value;
    }
    get ppPdfSameWindow() {
      return this[ppPdfSameWindow];
    }
    set ppPdfSameWindow(value) {
      this[ppPdfSameWindow] = value;
    }
    get ppPdfDownload() {
      return this[ppPdfDownload];
    }
    set ppPdfDownload(value) {
      this[ppPdfDownload] = value;
    }
    get ppHideNightscoutInPDF() {
      return this[ppHideNightscoutInPDF];
    }
    set ppHideNightscoutInPDF(value) {
      this[ppHideNightscoutInPDF] = value;
    }
    get ppShowUrlInPDF() {
      return this[ppShowUrlInPDF];
    }
    set ppShowUrlInPDF(value) {
      this[ppShowUrlInPDF] = value;
    }
    get ppHideLoopData() {
      return this[ppHideLoopData];
    }
    set ppHideLoopData(value) {
      this[ppHideLoopData] = value;
    }
    get isCreatingPDF() {
      return this[isCreatingPDF];
    }
    set isCreatingPDF(value) {
      this[isCreatingPDF] = value;
    }
    get msg() {
      return this[msg];
    }
    set msg(value) {
      this[msg] = value;
    }
    get info() {
      return this[info];
    }
    set info(value) {
      this[info] = value;
    }
    get basalPrecisionAuto() {
      return this[basalPrecisionAuto];
    }
    set basalPrecisionAuto(value) {
      this[basalPrecisionAuto] = value;
    }
    get driveParent() {
      return this[driveParent];
    }
    set driveParent(value) {
      super.driveParent = value;
    }
    get currPeriodShift() {
      return this[currPeriodShift];
    }
    set currPeriodShift(value) {
      this[currPeriodShift] = value;
    }
    get title() {
      return this[title];
    }
    set title(value) {
      this[title] = value;
    }
    get settingsFile() {
      return this[settingsFile];
    }
    set settingsFile(value) {
      this[settingsFile] = value;
    }
    get urlPdf() {
      return this[urlPdf];
    }
    set urlPdf(value) {
      this[urlPdf] = value;
    }
    get urlPlayground() {
      return this[urlPlayground];
    }
    set urlPlayground(value) {
      this[urlPlayground] = value;
    }
    get googleClientId() {
      return this[googleClientId];
    }
    set googleClientId(value) {
      this[googleClientId] = value;
    }
    get isConfigured() {
      return this[isConfigured];
    }
    set isConfigured(value) {
      this[isConfigured] = value;
    }
    get isLoading() {
      return this[isLoading];
    }
    set isLoading(value) {
      this[isLoading] = value;
    }
    get ppStandardLimits() {
      return dart.test(this[_ppStandardLimits]) || dart.test(this.ppComparable);
    }
    set ppStandardLimits(value) {
      if (!dart.test(this.ppComparable)) this[_ppStandardLimits] = value;
    }
    get glucMaxValues() {
      return JSArrayOfdoubleL().of([null, 150.0, 200.0, 250.0, 300.0, 350.0, 400.0, 450.0]);
    }
    get profileMaxCounts() {
      return JSArrayOfintL().of([100000, 2000, 1000, 500, 250, 100]);
    }
    get glucMaxValue() {
      let t9;
      return this.glucValueFromData(this.glucMaxValues[$_get]((t9 = this.ppGlucMaxIdx, t9 == null ? 0 : t9)));
    }
    get basalPrecisionValues() {
      return JSArrayOfintL().of([null, 0, 1, 2, 3]);
    }
    get hideLoopData() {
      return dart.test(this.ppHideLoopData) && dart.test(this.isCreatingPDF);
    }
    get pdfControlMaxSize() {
      return (dart.notNull(this.pdfCreationMaxSize) / 100000)[$truncate]();
    }
    set pdfControlMaxSize(value) {
      this.pdfCreationMaxSize = dart.notNull(value) * 100000;
    }
    get pdfCreationMaxSize() {
      this[_pdfCreationMaxSize] = math.max(intL(), this[_pdfCreationMaxSize], 100000);
      this[_pdfCreationMaxSize] = math.min(intL(), this[_pdfCreationMaxSize], 4000000);
      return this[_pdfCreationMaxSize];
    }
    set pdfCreationMaxSize(value) {
      value = math.max(intL(), value, 100000);
      value = math.min(intL(), value, 4000000);
      this[_pdfCreationMaxSize] = value;
    }
    show(text, opts) {
      let append = opts && 'append' in opts ? opts.append : false;
      let skipStart = opts && 'skipStart' in opts ? opts.skipStart : null;
      FutureOfNullN().delayed(new core.Duration.new({milliseconds: 500}), dart.fn(() => {
        let t9;
        if (this.msg != null) {
          if (skipStart != null && this.msg.text != null && this.msg.text[$startsWith](skipStart)) return;
          if (dart.test(append) && this.msg.text != null && this.msg.text.length < 20000) {
            t9 = this.msg;
            t9.text = dart.notNull(t9.text) + ("<br />" + dart.str(text));
          } else {
            this.msg.text = text;
          }
        }
      }, VoidToNullN()));
    }
    get asDeviceString() {
      let t9, t9$, t9$0, t9$1;
      return "{" + "\"d1\":\"" + (dart.test(this.ppHideNightscoutInPDF) ? "true" : "false") + "\"" + ",\"d2\":\"" + (dart.test(this.ppShowUrlInPDF) ? "true" : "false") + "\"" + ",\"d3\":\"" + (dart.test(this.ppHideLoopData) ? "true" : "false") + "\"" + ",\"d4\":\"" + dart.str(this.pdfCreationMaxSize) + "\"" + ",\"d5\":\"" + (dart.test(this[_ppStandardLimits]) ? "true" : "false") + "\"" + ",\"d6\":\"" + (dart.test(this.ppCGPAlwaysStandardLimits) ? "true" : "false") + "\"" + ",\"d7\":\"" + (dart.test(this.ppComparable) ? "true" : "false") + "\"" + ",\"d8\":\"" + (dart.test(this.ppLatestFirst) ? "true" : "false") + "\"" + ",\"d9\":\"" + dart.str((t9$ = (t9 = this.ppGlucMaxIdx, t9 == null ? null : dart.toString(t9)), t9$ == null ? 0 : t9$)) + "\"" + ",\"d10\":\"" + dart.str((t9$1 = (t9$0 = this.ppBasalPrecisionIdx, t9$0 == null ? null : dart.toString(t9$0)), t9$1 == null ? 0 : t9$1)) + "\"" + "}";
    }
    fromDeviceJson(json) {
      try {
        this.ppHideNightscoutInPDF = json_data.JsonData.toBool(dart.dsend(json, '_get', ["d1"]));
        this.ppShowUrlInPDF = json_data.JsonData.toBool(dart.dsend(json, '_get', ["d2"]));
        this.ppHideLoopData = json_data.JsonData.toBool(dart.dsend(json, '_get', ["d3"]));
        this.pdfCreationMaxSize = json_data.JsonData.toInt(dart.dsend(json, '_get', ["d4"]));
        this.ppStandardLimits = json_data.JsonData.toBool(dart.dsend(json, '_get', ["d5"]));
        this.ppCGPAlwaysStandardLimits = json_data.JsonData.toBool(dart.dsend(json, '_get', ["d6"]));
        this.ppComparable = json_data.JsonData.toBool(dart.dsend(json, '_get', ["d7"]));
        this.ppLatestFirst = json_data.JsonData.toBool(dart.dsend(json, '_get', ["d8"]));
        this.ppGlucMaxIdx = json_data.JsonData.toInt(dart.dsend(json, '_get', ["d9"]));
        this.ppBasalPrecisionIdx = json_data.JsonData.toInt(dart.dsend(json, '_get', ["d10"]));
      } catch (e) {
        let ex = dart.getThrown(e);
        let msg = dart.toString(ex);
        this.showDebug("Fehler bei Globals.fromDeviceJson: " + dart.str(msg));
      }
    }
    saveWebData() {
      let t10, t10$;
      this.saveStorage("webData", "{\"w0\":\"" + dart.str(this.version) + "\",\"w1\":\"" + dart.str((t10 = this.language.code, t10 == null ? "de_DE" : t10)) + "\",\"w2\":\"" + dart.str(this.theme) + "\"," + "\"w3\":" + (dart.test((t10$ = this[_syncGoogle], t10$ == null ? false : t10$)) ? "true" : "false") + "}");
    }
    get jsonString() {
      let t10, t10$, t10$0, t10$1;
      return dart.str(super.jsonString) + ",\"ppHideNightscoutInPDF\":\"" + (dart.test(this.ppHideNightscoutInPDF) ? "true" : "false") + "\"" + ",\"ppShowUrlInPDF\":\"" + (dart.test(this.ppShowUrlInPDF) ? "true" : "false") + "\"" + ",\"ppHideLoopData\":\"" + (dart.test(this.ppHideLoopData) ? "true" : "false") + "\"" + ",\"pdfCreationMaxSize\":\"" + dart.str(this.pdfCreationMaxSize) + "\"" + ",\"ppStandardLimits\":\"" + (dart.test(this[_ppStandardLimits]) ? "true" : "false") + "\"" + ",\"ppCGPAlwaysStandardLimits\":\"" + (dart.test(this.ppCGPAlwaysStandardLimits) ? "true" : "false") + "\"" + ",\"ppComparable\":\"" + (dart.test(this.ppComparable) ? "true" : "false") + "\"" + ",\"ppLatestFirst\":\"" + (dart.test(this.ppLatestFirst) ? "true" : "false") + "\"" + ",\"ppGlucMaxIdx\":\"" + dart.str((t10$ = (t10 = this.ppGlucMaxIdx, t10 == null ? null : dart.toString(t10)), t10$ == null ? 0 : t10$)) + "\"" + ",\"ppBasalPrecisionIdx\":\"" + dart.str((t10$1 = (t10$0 = this.ppBasalPrecisionIdx, t10$0 == null ? null : dart.toString(t10$0)), t10$1 == null ? 0 : t10$1)) + "\"";
    }
    fromJson(json) {
      super.fromJson(json);
      this.ppHideNightscoutInPDF = json_data.JsonData.toBool(dart.dsend(json, '_get', ["ppHideNightscoutInPDF"]));
      this.ppShowUrlInPDF = json_data.JsonData.toBool(dart.dsend(json, '_get', ["ppShowUrlInPDF"]));
      this.ppHideLoopData = json_data.JsonData.toBool(dart.dsend(json, '_get', ["ppHideLoopData"]));
      this.pdfCreationMaxSize = json_data.JsonData.toInt(dart.dsend(json, '_get', ["pdfCreationMaxSize"]), this.pdfCreationMaxSize);
      this.ppStandardLimits = json_data.JsonData.toBool(dart.dsend(json, '_get', ["ppStandardLimits"]));
      this.ppCGPAlwaysStandardLimits = json_data.JsonData.toBool(dart.dsend(json, '_get', ["ppCGPAlwaysStandardLimits"]));
      this.ppComparable = json_data.JsonData.toBool(dart.dsend(json, '_get', ["ppComparable"]));
      this.ppLatestFirst = json_data.JsonData.toBool(dart.dsend(json, '_get', ["ppLatestFirst"]));
      this.ppGlucMaxIdx = json_data.JsonData.toInt(dart.dsend(json, '_get', ["ppGlucMaxIdx"]));
      this.ppBasalPrecisionIdx = json_data.JsonData.toInt(dart.dsend(json, '_get', ["ppBasalPrecisionIdx"]));
    }
    restoreLiveStorage() {
    }
    get storageString() {
      if (this.loadStorage("reset") === "jawoll") this.restoreLiveStorage();
      if (this.loadStorage("version") === "") return "";
      return dart.str(super.storageString) + ",\"ppHideNightscoutInPDF\":\"" + dart.str(this.loadStorage("ppHideNightscoutInPDF")) + "\"" + ",\"ppShowUrlInPDF\":\"" + dart.str(this.loadStorage("ppShowUrlInPDF")) + "\"" + ",\"ppHideLoopData\":\"" + dart.str(this.loadStorage("ppHideLoopData")) + "\"" + ",\"pdfCreationMaxSize\":\"" + dart.str(this.loadStorage("pdfCreationMaxSize")) + "\"" + ",\"ppStandardLimits\":\"" + dart.str(this.loadStorage("ppStandardLimits")) + "\"" + ",\"ppCGPAlwaysStandardLimits\":\"" + dart.str(this.loadStorage("ppCGPAlwaysStandardLimits")) + "\"" + ",\"ppComparable\":\"" + dart.str(this.loadStorage("ppComparable")) + "\"" + ",\"ppLatestFirst\":\"" + dart.str(this.loadStorage("ppLatestFirst")) + "\"" + ",\"ppGlucMaxIdx\":\"" + dart.str(this.loadStorage("ppGlucMaxIdx")) + "\"" + ",\"ppBasalPrecisionIdx\":\"" + dart.str(this.loadStorage("ppBasalPrecisionIdx")) + "\"" + ",\"ppProfileMaxCount\":\"" + dart.str(this.loadStorage("ppProfileMaxCount")) + "\"";
    }
    loadLocalOnlySettings() {
      super.loadLocalOnlySettings();
      this.ppPdfSameWindow = this.loadStorage("ppPdfSameWindow") === "true";
      this.ppPdfDownload = this.loadStorage("ppPdfDownload") === "true";
      this.currPeriodShift = this.listPeriodShift[$_get](0);
    }
    static get now() {
      return new core.DateTime.now();
    }
    get basalPrecision() {
      let t10;
      return dart.notNull((t10 = this.ppBasalPrecisionIdx, t10 == null ? 0 : t10)) > 0 ? this.basalPrecisionValues[$_get](this.ppBasalPrecisionIdx) : this.basalPrecisionAuto;
    }
    static decimalPlaces(value) {
      let v = dart.toString(value);
      while (v[$endsWith]("0")) {
        v = v[$substring](0, v.length - 1);
      }
      let ret = math.max(intL(), v.length - v[$lastIndexOf](".") - 1, 0);
      return math.min(intL(), ret, 3);
    }
    timeForCalc(time) {
      return dart.notNull(time.hour) * 3600 + dart.notNull(time.minute) * 60 + dart.notNull(time.second);
    }
    get client() {
      return this[_client];
    }
    set client(value) {
      this[_client] = value;
      this.syncGoogle = value != null;
      this[_loadFromGoogle]();
    }
    get drive() {
      return this.client == null ? null : new v3.DriveApi.new(this.client);
    }
    static new() {
      return globals.Globals._globals;
    }
    get listPeriodShift() {
      return JSArrayOfPeriodShiftL().of([new globals.PeriodShift.new(intl.Intl.message("Ausgewählter Zeitraum"), {months: 0}), new globals.PeriodShift.new(intl.Intl.message("Einen Monat vorher"), {months: 1}), new globals.PeriodShift.new(intl.Intl.message("Drei Monate vorher"), {months: 3}), new globals.PeriodShift.new(intl.Intl.message("Sechs Monate vorher"), {months: 6}), new globals.PeriodShift.new(intl.Intl.message("Ein Jahr vorher"), {months: 12})]);
    }
    date(src) {
      return new date$.Date.new(src.year, src.month, src.day);
    }
    get msgBE() {
      return this[_khFactor] === 10 ? "msgBE" : "msgKE";
    }
    get msgUrlFailurePrefix() {
      return intl.Intl.message("Die angegebene URL ist nicht erreichbar. " + "Wenn die URL stimmt, dann kann es an den Nightscout-Einstellungen liegen. ");
    }
    get msgUrlFailureSuffix() {
      return intl.Intl.message("<br><br>Wenn diese URL geschützt ist, " + "muss ausserdem der Zugriffsschlüssel korrekt definiert sein. Diesen erreicht man " + "über \"Administrator-Werkzeuge\" auf der persönlichen Nightscout Seite.");
    }
    get msgUrlFailureHerokuapp() {
      return intl.Intl.message("In der Variable ENABLE muss das Wort \"cors\" stehen, damit externe Tools " + "wie dieses hier auf die Daten zugreifen dürfen.");
    }
    get msgUrlFailure10be() {
      return intl.Intl.message("Auf 10be muss beim Server in den Standardeinstellungen der Haken bei " + "\"cors\" aktiviert werden, damit externe Tools wie dieses hier auf die Daten zugreifen dürfen. Wenn \"cors\" " + "aktiviert wurde, muss auf dem Server eventuell noch ReDeploy gemacht werden, bevor es wirklich verfügbar ist.");
    }
    get msgUrlNotSafe() {
      return intl.Intl.message("Die Url zur Nightscout-API muss mit https beginnen, da Nightscout Reporter " + "auch auf https läuft. Ein Zugriff auf unsichere http-Resourcen ist nicht möglich.");
    }
    msgUrlFailure(url) {
      if (url[$startsWith]("http:") && html.window[$location].protocol[$startsWith]("https")) return this.msgUrlNotSafe;
      if (url[$contains]("ns.10be")) return dart.str(this.msgUrlFailurePrefix) + dart.str(this.msgUrlFailure10be) + dart.str(this.msgUrlFailureSuffix);
      return dart.str(this.msgUrlFailurePrefix) + dart.str(this.msgUrlFailureHerokuapp) + dart.str(this.msgUrlFailureSuffix);
    }
    get msgNoURLDefined() {
      return intl.Intl.message("Die URL wurde noch nicht festgelegt.");
    }
    get settingsFilename() {
      return "nr-settings";
    }
    get syncGoogle() {
      return this[_syncGoogle];
    }
    set syncGoogle(value) {
      let t10;
      this[_syncGoogle] = (t10 = value, t10 == null ? false : t10);
      this.saveWebData();
    }
    infoClass(cls) {
      return dart.test(this.showInfo) ? dart.str(cls) + " infoarea showinfo" : dart.str(cls) + " infoarea";
    }
    get khFactor() {
      return this[_khFactor];
    }
    set khFactor(value) {
      if (value === 10 || value === 12) this[_khFactor] = value;
    }
    get isKHBE() {
      return this[_khFactor] === 12;
    }
    getGlucInfo() {
      let ret = new (IdentityMapOfStringL$ObjectL()).from(["step", 1, "unit", globals.Settings.msgUnitMGDL]);
      if (!dart.test(this.glucMGDL)) ret = new (IdentityMapOfStringL$ObjectL()).from(["step", 0.1, "unit", globals.Settings.msgUnitMMOL]);
      ret[$_set]("factor", this.glucFactor);
      ret[$_set]("stdlow", this.glucFromData(globals.Globals.stdLow));
      ret[$_set]("stdhigh", this.glucFromData(globals.Globals.stdHigh));
      return ret;
    }
    glucValueFromData(gluc) {
      let t10;
      if (StringL().is(gluc)) gluc = (t10 = core.double.tryParse(core.String.as(gluc)), t10 == null ? 0 : t10);
      if (!numL().is(gluc) || dart.equals(gluc, 0)) return null;
      if (!dart.test(this.glucMGDL)) return doubleL().as(dart.dsend(gluc, '/', [18.02]));
      return doubleL().as(gluc);
    }
    glucFromData(gluc, precision = null) {
      let t10, t10$, t10$0;
      if (StringL().is(gluc)) gluc = (t10 = core.double.tryParse(core.String.as(gluc)), t10 == null ? 0 : t10);
      if (!numL().is(gluc) || dart.equals(gluc, 0)) return "";
      if (!dart.test(this.glucMGDL)) return this.fmtNumber(numL().as(dart.dsend(gluc, '/', [18.02])), (t10$ = precision, t10$ == null ? 1 : t10$));
      return this.fmtNumber(numL().as(gluc), (t10$0 = precision, t10$0 == null ? 0 : t10$0));
    }
    glucFromStatusMGDL(gluc, precision = null) {
      let t10, t10$, t10$0, t10$1;
      if (StringL().is(gluc)) gluc = (t10 = core.double.tryParse(core.String.as(gluc)), t10 == null ? 0 : t10);
      if (!numL().is(gluc) || dart.equals(gluc, 0)) return "";
      if (!dart.test(this.glucMGDLFromStatus) && dart.test(this.glucMGDL)) {
        return this.fmtNumber(numL().as(dart.dsend(gluc, '*', [18.02])), (t10$ = precision, t10$ == null ? 1 : t10$));
      }
      if (dart.test(this.glucMGDLFromStatus) && !dart.test(this.glucMGDL)) {
        return this.fmtNumber(numL().as(dart.dsend(gluc, '/', [18.02])), (t10$0 = precision, t10$0 == null ? 1 : t10$0));
      }
      return this.fmtNumber(numL().as(gluc), (t10$1 = precision, t10$1 == null ? 0 : t10$1));
    }
    get pdfTarget() {
      if (!dart.test(this.ppPdfSameWindow)) return "_blank";
      return "";
    }
    static calc(a, b, factor) {
      if (a != null && dart.notNull(a) > 0) {
        if (b != null && dart.notNull(b) > 0) {
          return dart.notNull(a) + ((dart.notNull(b) - dart.notNull(a)) * dart.notNull(factor))[$toInt]();
        } else {
          return a;
        }
      }
      return b;
    }
    requestJson(url, opts) {
      let method = opts && 'method' in opts ? opts.method : "get";
      let headers = opts && 'headers' in opts ? opts.headers : null;
      let body = opts && 'body' in opts ? opts.body : null;
      let showError = opts && 'showError' in opts ? opts.showError : true;
      return async.async(dart.dynamic, (function* requestJson() {
        let ret = (yield this.request(url, {method: method, headers: headers, body: body, showError: showError}).then(dart.dynamic, dart.fn(response => {
          if (response == null) {
            return null;
          }
          if (response[$startsWith]("[") && response[$endsWith]("]")) {
            return convert.json.decode(response);
          }
          if (response[$startsWith]("{") && response[$endsWith]("}")) {
            return convert.json.decode(response);
          }
          return null;
        }, StringLTodynamic())));
        return ret;
      }).bind(this));
    }
    donationClick() {
      let url = "https://www.paypal.com/donate";
      url = url + "?hosted_button_id=YYMVYB8C3VAVL";
      html.window[$open](url, "PayPal");
    }
    request(url, opts) {
      let method = opts && 'method' in opts ? opts.method : "get";
      let headers = opts && 'headers' in opts ? opts.headers : null;
      let body = opts && 'body' in opts ? opts.body : null;
      let showError = opts && 'showError' in opts ? opts.showError : true;
      let asJson = opts && 'asJson' in opts ? opts.asJson : false;
      return async.async(StringL(), function* request() {
        let client = new browser_client.BrowserClient.new();
        switch (method[$toLowerCase]()) {
          case "post":
          {
            return client.post(url, {headers: headers, body: body}).then(StringL(), dart.fn(response => response.body, ResponseLToStringL())).catchError(dart.fn(error => {
              if (dart.test(showError)) {
                return dart.toString(error);
              }
              return null;
            }, dynamicToStringL()));
            break;
          }
          default:
          {
            return client.get(url).then(StringL(), dart.fn(response => response.body, ResponseLToStringL())).catchError(dart.fn(error => {
              if (dart.test(showError)) {
                return dart.toString(error);
              }
              return null;
            }, dynamicToStringL()));
            break;
          }
        }
      });
    }
    checkSetup(opts) {
      let checkUser = opts && 'checkUser' in opts ? opts.checkUser : null;
      return async.async(StringL(), (function* checkSetup() {
        checkUser == null ? checkUser = this.user : null;
        if (checkUser.apiUrl(null, "") == null) return this.msgNoURLDefined;
        let ret = null;
        let check = checkUser.apiUrl(null, "status");
        yield this.request(check).then(core.Null, dart.fn(response => {
          if (!response[$toLowerCase]()[$contains]("status ok")) ret = this.msgUrlFailure(check);
        }, StringLToNullN())).catchError(dart.fn(err => {
          ret = this.msgUrlFailure(check);
        }, dynamicToNullN()));
        return ret;
      }).bind(this));
    }
    changeLanguage(value, opts) {
      let doReload = opts && 'doReload' in opts ? opts.doReload : true;
      let checkConfigured = opts && 'checkConfigured' in opts ? opts.checkConfigured : false;
      return async.async(dart.void, (function* changeLanguage() {
        this.language = value;
        if (dart.test(checkConfigured) && !dart.test(this.isConfigured)) this.clearStorage();
        if (dart.test(doReload)) {
          if (dart.test(this.isConfigured)) {
            this.save();
          } else {
            this.saveWebData();
            this.reload();
          }
        }
      }).bind(this));
    }
    setLanguage(value) {
      return async.async(dart.void, (function* setLanguage() {
        this.language = value;
        this.saveWebData();
        this.save();
        intl.Intl.systemLocale = intl.Intl.canonicalizedLocale(this.language.code);
        yield browser.initializeTimeZone();
        yield messages_all.initializeMessages(this.language.code);
        intl.Intl.defaultLocale = this.language.code;
        yield date_symbol_data_local.initializeDateFormatting(this.language.code, null);
      }).bind(this));
    }
    reload() {
      let pos = html.window[$location].href[$indexOf]("?");
      if (pos > 0) {
        html.window[$location].href = html.window[$location].href[$substring](0, pos - 1);
      } else {
        html.window[$location].reload();
      }
    }
    clearStorage() {
      for (let entry of html.window.localStorage[$entries]) {
        let doKill = false;
        doKill = entry.key[$startsWith](this.betaPrefix);
        if (!dart.test(this.isBeta)) doKill = !doKill;
        if (entry.key[$endsWith]("webData") || entry.key[$endsWith]("debug")) doKill = false;
        if (doKill) html.window.localStorage[$remove](entry.key);
      }
    }
    copyFromOtherStorage() {
      this.isBeta = !dart.test(this.isBeta);
      this.loadSettings().then(core.Null, dart.fn(_ => {
        this.isBeta = !dart.test(this.isBeta);
        this.save();
      }, voidToNullN()));
    }
    [_uploadToGoogle](doReload) {
      let t10, t10$;
      if (!dart.test(this[_googleLoaded])) return;
      if (this.drive == null) {
        this.syncGoogle = false;
        return;
      }
      this.settingsFile == null ? this.settingsFile = (t10 = new v3.File.new(), (() => {
        t10.name = this.settingsFilename;
        t10.parents = JSArrayOfStringL().of([this.driveParent]);
        t10.mimeType = "text/json";
        t10.id = null;
        return t10;
      })()) : null;
      let controller = StreamControllerOfStringL().new();
      let content = this.asSharedString;
      controller.add(content);
      let media = new requests.Media.new(controller.stream.transform(ListLOfintL(), new convert.Utf8Encoder.new()), content.length, {contentType: "text/json"});
      if (this.settingsFile.id == null) {
        this.drive.files.generateIds({count: 1, space: this.driveParent}).then(core.Null, dart.fn(ids => {
          this.settingsFile.id = ids.ids[$_get](0);
          this.drive.files.create(this.settingsFile, {uploadMedia: media}).then(core.Null, dart.fn(_ => {
          }, FileLToNullN()));
        }, GeneratedIdsLToNullN()));
      } else {
        let file = new v3.File.new();
        file.trashed = false;
        t10$ = this.drive.files.update(file, this.settingsFile.id, {uploadMedia: media}).then(core.Null, dart.fn(file => {
          if (dart.test(doReload)) this.reload();
        }, FileLToNullN()));
        t10$ == null ? null : t10$.catchError(dart.fn(error => {
          let msg = dart.toString(error);
          this.showDebug("Fehler beim Upload zu Google (" + dart.str(this.settingsFile.name) + "): " + dart.str(msg));
        }, dynamicToNullN()), {test: dart.fn(error => true, ObjectLToboolL())});
      }
      controller.close();
    }
    [_getFromGoogle]() {
      this.drive.files.get(this.settingsFile.id, {$fields: "*", downloadOptions: requests.DownloadOptions.FullMedia, acknowledgeAbuse: false}).then(core.Null, dart.fn(response => {
        let t10, t10$, t10$0;
        let media = MediaL().as(response);
        if (dart.test((t10$0 = (t10$ = (t10 = media, t10 == null ? null : t10.contentType), t10$ == null ? null : t10$[$startsWith]("text/")), t10$0 == null ? false : t10$0))) {
          let strm = media.stream.transform(StringL(), new convert.Utf8Decoder.new({allowMalformed: true}));
          strm.join().then(core.Null, dart.fn(s => {
            let t10;
            let set = (t10 = globals.Globals.new(), (() => {
              t10.fromSharedString(s);
              return t10;
            })());
            if (dart.notNull(set.timestamp) > dart.notNull(this.timestamp)) {
              this.fromSharedString(s);
              this.save({updateSync: false});
              this[_initAfterLoad]();
            } else {
            }
          }, StringLToNullN()));
        } else {
        }
        this[_googleLoaded] = true;
      }, dynamicToNullN())).catchError(dart.fn(error => {
        this.showDebug("Es ist ein Fehler aufgetreten (" + dart.str(error) + ")");
      }, dynamicToNullN()), {test: dart.fn(error => true, ObjectLToboolL())});
    }
    [_loadFromGoogle]() {
      if (this[_client] == null || this.drive == null) return;
      let query = "name=\"" + dart.str(this.settingsFilename) + "\" and not trashed";
      this[_searchDocuments](1, query).then(core.Null, dart.fn(list => {
        let t10, t10$, t10$0, t10$1;
        if (dart.test((t10$0 = (t10$ = (t10 = list, t10 == null ? null : t10.files), t10$ == null ? null : t10$[$isNotEmpty]), t10$0 == null ? false : t10$0))) {
          this.settingsFile = list.files[$_get](0);
        } else {
          this.settingsFile = (t10$1 = new v3.File.new(), (() => {
            t10$1.name = this.settingsFilename;
            t10$1.parents = JSArrayOfStringL().of([this.driveParent]);
            t10$1.mimeType = "text/json";
            return t10$1;
          })());
          this.drive.files.generateIds({count: 1, space: this.driveParent}).then(core.Null, dart.fn(ids => {
            this.settingsFile.id = ids.ids[$_get](0);
            this.drive.files.create(this.settingsFile).then(core.Null, dart.fn(file => {
              this[_getFromGoogle]();
            }, FileLToNullN())).catchError(dart.fn(error => {
              this.showDebug("Fehler in _loadFromGoogle: " + dart.str(error));
            }, dynamicToNullN()));
            return;
          }, GeneratedIdsLToNullN()));
        }
        this[_getFromGoogle]();
      }, FileListLToNullN())).catchError(dart.fn(error => {
        this.showDebug("Fehler bei _loadFromGoogle: " + dart.str(error));
        this.loadFromStorage();
        this[_initAfterLoad]();
      }, dynamicToNullN()));
    }
    [_searchDocuments](max, query) {
      let docs = new v3.FileList.new();
      docs.files = JSArrayOfFileL().of([]);
      const next = token => {
        let t10, t10$, t10$0, t10$1;
        t10$1 = (t10$0 = (t10$ = (t10 = this.drive, t10 == null ? null : t10.files), t10$ == null ? null : t10$.list({q: query, pageToken: token, pageSize: 100, corpus: "user", $fields: "*", orderBy: "name", spaces: this.driveParent})), t10$0 == null ? null : t10$0.then(FileListL(), dart.fn(results => {
          docs.files[$addAll](results.files);
          if (dart.notNull(docs.files[$length]) < dart.notNull(max) && results.nextPageToken != null) {
            return next(results.nextPageToken);
          }
          let ret = FutureOfFileListL().value(docs);
          return ret;
        }, FileListLToFutureLOfFileListL())));
        return t10$1 == null ? null : t10$1.catchError(dart.fn(error => {
        }, dynamicToNullN()), {test: dart.fn(error => true, ObjectLToboolL())});
      };
      dart.fn(next, StringLToFutureLOfFileListL());
      return next(null);
    }
    loadSettings(opts) {
      let skipSyncGoogle = opts && 'skipSyncGoogle' in opts ? opts.skipSyncGoogle : false;
      return async.async(dart.void, (function* loadSettings() {
        try {
          let src = (yield this.request("settings.json", {showError: false}));
          if (src != null && src[$toLowerCase]() !== "not found") {
            let data = convert.json.decode(src);
            if (dart.dsend(data, '_get', ["urlPDF"]) != null) {
              this.urlPdf = StringL().as(dart.dsend(data, '_get', ["urlPDF"]));
            }
            if (dart.dsend(data, '_get', ["urlPlayground"]) != null) {
              this.urlPlayground = StringL().as(dart.dsend(data, '_get', ["urlPlayground"]));
            }
            if (dart.dsend(data, '_get', ["googleClientId"]) != null) {
              this.googleClientId = StringL().as(dart.dsend(data, '_get', ["googleClientId"]));
            }
          }
        } catch (e) {
          let ex = dart.getThrown(e);
          let msg = dart.toString(ex);
          this.showDebug("Fehler bei Globals.loadSettings: " + dart.str(msg));
        }
        this.loadWebData();
        if (dart.test(this.syncGoogle) && !dart.dtest(skipSyncGoogle)) yield this[_loadFromGoogle]();
        this.loadFromStorage();
        this[_initAfterLoad]();
      }).bind(this));
    }
    loadWebData() {
      try {
        let json = convert.json.decode(this.loadStorage("webData"));
        let code = json_data.JsonData.toText(dart.dsend(json, '_get', ["w1"]));
        this.language = this.languageList[$firstWhere](dart.fn(lang => lang.code == code, LangDataLToboolL()));
        this.theme = json_data.JsonData.toText(dart.dsend(json, '_get', ["w2"]));
        this.syncGoogle = json_data.JsonData.toBool(dart.dsend(json, '_get', ["w3"]));
      } catch (e) {
        let ex = dart.getThrown(e);
        let msg = dart.toString(ex);
        this.showDebug("Fehler bei Globals.loadWebData: " + dart.str(msg));
      }
    }
    refresh() {
      this[_initAfterLoad]();
    }
    [_initAfterLoad]() {
      this.changeLanguage(this.language, {doReload: false});
      globals.Settings.updatePeriod(this.period);
      this.isConfigured = this.lastVersion != null && this.lastVersion[$isNotEmpty] && dart.test(this.userList[$isNotEmpty]);
    }
    compareDate(date1, date2) {
      if (date1 == null) {
        return date2 == null ? 0 : 1;
      }
      if (date2 == null) {
        return -1;
      }
      return date1.compareTo(date2);
    }
    fmtBasal(value, opts) {
      let dontRound = opts && 'dontRound' in opts ? opts.dontRound : false;
      let precision = this.basalPrecision;
      if (dart.test(dontRound)) precision = math.max(intL(), globals.Globals.decimalPlaces(value), precision);
      return this.fmtNumber(value, precision, 0, "null", dontRound);
    }
    limitValue(value, min, max) {
      return dart.notNull(value) < dart.notNull(min) ? min : dart.notNull(value) > dart.notNull(max) ? max : value;
    }
    fmtNumber(value, decimals = 0, fillfront0 = 0, nullText = "null", stripTrailingZero = false, forceSign = false) {
      if (value == null) return nullText;
      let fmt = "#,##0";
      if (dart.notNull(decimals) > 0) {
        fmt = (fmt + ".")[$padRight](dart.asInt(dart.notNull(decimals) + 6), "0");
        value = dart.notNull(value) * ((10 ^ dart.notNull(dart.asInt(decimals))) >>> 0)[$round]() / ((10 ^ dart.notNull(dart.asInt(decimals))) >>> 0);
      }
      let nf = intl.NumberFormat.new(fmt, this.language.code);
      let ret = nf.format(value);
      if (dart.test(stripTrailingZero)) {
        while (ret[$endsWith]("0")) {
          ret = ret[$substring](0, ret.length - 1);
        }
        if (ret[$endsWith](nf.symbols.DECIMAL_SEP)) ret = ret[$substring](0, ret.length - 1);
      }
      if (dart.notNull(fillfront0) > 0) {
        if (dart.notNull(value) < 0) ret = ret[$substring](1);
        while (dart.notNull(fillfront0) > ret.length) {
          ret = "0" + dart.str(ret);
        }
        if (dart.notNull(value) < 0) ret = "-" + dart.str(ret);
      }
      return ret === "NaN" ? nullText : dart.test(forceSign) && dart.notNull(value) >= 0 ? "+" + dart.str(ret) : ret;
    }
    loadFromStorage() {
      this.isLoading = true;
      this.fromSharedString("{" + dart.str(this.storageString) + "}");
      let shared = globals.Settings.tiod(this.loadStorage("sharedData"));
      let device = globals.Settings.tiod(this.loadStorage("deviceData"));
      this.fromStrings(shared, device);
      this.loadLocalOnlySettings();
      this.isLoading = false;
    }
    save(opts) {
      let updateSync = opts && 'updateSync' in opts ? opts.updateSync : true;
      let skipReload = opts && 'skipReload' in opts ? opts.skipReload : false;
      if (dart.test(this.isLoading)) return;
      let oldLang = null;
      let oldWebTheme = null;
      let oldGoogle = null;
      try {
        this.user.loadParamsFromForms();
        let json = convert.json.decode(this.loadStorage("webData"));
        oldLang = json_data.JsonData.toText(dart.dsend(json, '_get', ["w1"]));
        oldWebTheme = json_data.JsonData.toText(dart.dsend(json, '_get', ["w2"]));
        oldGoogle = json_data.JsonData.toBool(dart.dsend(json, '_get', ["w3"]));
      } catch (e) {
        let ex = dart.getThrown(e);
        let msg = dart.toString(ex);
        this.showDebug("Fehler bei Globals.save: " + dart.str(msg));
      }
      this.clearStorage();
      if (dart.test(this.canDebug)) this.saveStorage("debug", "yes");
      this.syncGoogle = oldGoogle;
      this[_theme] = oldWebTheme;
      this.saveWebData();
      this.saveStorage("sharedData", globals.Settings.doit(this.asSharedString));
      this.saveStorage("deviceData", globals.Settings.doit(this.asDeviceString));
      let doReload = this.language.code != oldLang && this.language.code != null && !dart.test(skipReload);
      if (dart.test(this.syncGoogle) && dart.test(updateSync)) {
        this[_uploadToGoogle](doReload);
      } else if (doReload) {
        this.reload();
      }
    }
    saveOld(opts) {
      let t13, t13$, t13$0, t13$1, t13$2, t13$3;
      let updateSync = opts && 'updateSync' in opts ? opts.updateSync : true;
      let skipReload = opts && 'skipReload' in opts ? opts.skipReload : false;
      let oldLang = this.loadStorage("language");
      let oldGoogle = this.loadStorage("syncGoogle");
      let oldWebTheme = this.loadStorage("webtheme");
      this.clearStorage();
      this.saveStorage("version", this.version);
      this.saveStorage("syncGoogle", oldGoogle);
      this.saveStorage("webtheme", oldWebTheme);
      if (dart.test(this.canDebug)) {
        this.saveStorage("debug", "yes");
      }
      if (!dart.test(globals.Settings.hastiod)) this.saveStorage("unsafe", "zh++;");
      let save = "";
      for (let i = 0; i < dart.notNull(this.userList[$length]); i = i + 1) {
        save = save + "," + dart.str(this.userList[$_get](i).asJsonString);
      }
      if (save.length > 1) save = save[$substring](1);
      this.saveStorage("mu", globals.Settings.doit("[" + save + "]"));
      save = "";
      for (let i = 0; i < dart.notNull(this.shortcutList[$length]); i = i + 1) {
        save = save + "," + dart.str(this.shortcutList[$_get](i).asJsonString);
      }
      if (save.length > 1) save = save[$substring](1);
      this.saveStorage("sc", globals.Settings.doit("[" + save + "]"));
      this.saveStorage("userIdx", dart.str(this.userIdx));
      let doReload = this.language.code != oldLang && this.language.code != null && !dart.test(skipReload);
      this.saveStorage("glucMGDL", dart.toString(this.glucMGDL));
      this.saveStorage("language", (t13 = this.language.code, t13 == null ? "de_DE" : t13));
      this.saveStorage("ppPdfSameWindow", dart.test(this.ppPdfSameWindow) ? "true" : "false");
      this.saveStorage("ppPdfDownload", dart.test(this.ppPdfDownload) ? "true" : "false");
      this.saveStorage("ppHideNightscoutInPDF", dart.test(this.ppHideNightscoutInPDF) ? "true" : "false");
      this.saveStorage("ppShowUrlInPDF", dart.test(this.ppShowUrlInPDF) ? "true" : "false");
      this.saveStorage("ppHideLoopData", dart.test(this.ppHideLoopData) ? "true" : "false");
      this.saveStorage("pdfCreationMaxSize", dart.str(this.pdfCreationMaxSize));
      this.saveStorage("ppStandardLimits", dart.test(this[_ppStandardLimits]) ? "true" : "false");
      this.saveStorage("ppCGPAlwaysStandardLimits", dart.test(this.ppCGPAlwaysStandardLimits) ? "true" : "false");
      this.saveStorage("ppComparable", dart.test(this.ppComparable) ? "true" : "false");
      this.saveStorage("ppLatestFirst", dart.test(this.ppLatestFirst) ? "true" : "false");
      this.saveStorage("ppGlucMaxIdx", StringL().as((t13$0 = (t13$ = this.ppGlucMaxIdx, t13$ == null ? null : dart.toString(t13$)), t13$0 == null ? 0 : t13$0)));
      this.saveStorage("ppBasalPrecisionIdx", StringL().as((t13$2 = (t13$1 = this.ppBasalPrecisionIdx, t13$1 == null ? null : dart.toString(t13$1)), t13$2 == null ? 0 : t13$2)));
      this.saveStorage("showAllTileParams", dart.test(this.showAllTileParams) ? "true" : "false");
      this.saveStorage("showCurrentGluc", dart.test(this.showCurrentGluc) ? "true" : "false");
      this.saveStorage("period", (t13$3 = this.period, t13$3 == null ? null : dart.toString(t13$3)));
      this.saveStorage("viewType", this.viewType);
      this.saveStorage("tileShowImage", dart.test(this.tileShowImage) ? "true" : "false");
      this.timestamp = new core.DateTime.now().millisecondsSinceEpoch;
      this.saveStorage("timestamp", dart.str(this.timestamp));
      this.savePdfOrder();
      this.saveStorage("theme", this[_theme]);
      if (dart.test(this.syncGoogle) && dart.test(updateSync)) {
        this[_uploadToGoogle](doReload);
      } else if (doReload) {
        this.reload();
      }
    }
    static percentile(entries, value) {
      let v = dart.notNull(value) / 100;
      let temp = [];
      for (let entry of entries) {
        temp[$add](entry);
      }
      temp[$sort](dart.fn((a, b) => intL().as(dart.dsend(dart.dload(a, 'gluc'), 'compareTo', [dart.dload(b, 'gluc')])), dynamicAnddynamicTointL()));
      let N = temp[$length];
      let n = (dart.notNull(N) - 1) * v + 1;
      if (n === 1) {
        return doubleL().as(dart.dload(temp[$_get](0), 'gluc'));
      } else if (n === N) {
        return doubleL().as(dart.dload(temp[$_get](dart.notNull(N) - 1), 'gluc'));
      } else {
        let k = n[$toInt]();
        let d = n - k;
        if (k > 0 && k < dart.notNull(temp[$length])) {
          return doubleL().as(dart.dsend(dart.dload(temp[$_get](k - 1), 'gluc'), '+', [d * dart.notNull(core.num.as(dart.dsend(dart.dload(temp[$_get](k), 'gluc'), '-', [dart.dload(temp[$_get](k - 1), 'gluc')])))]));
        } else {
          return 0.0;
        }
      }
    }
    checkJSON(doc) {
      try {
        convert.jsonEncode(doc);
        return true;
      } catch (e) {
        let ex = dart.getThrown(e);
        return false;
      }
    }
    saveShortcuts() {
      if (this.currShortcut != null) {
        if (this.currShortcutIdx == null || dart.notNull(this.currShortcutIdx) < 0) {
          this.shortcutList[$add](this.currShortcut);
        } else {
          this.shortcutList[$_set](this.currShortcutIdx, this.currShortcut.copy);
        }
      }
      this.currShortcut = null;
      this.currShortcutIdx = -1;
      this.save();
    }
    parseDate(value) {
      let ret = null;
      if (value != null && value.length === 8) {
        ret = new date$.Date.new(core.int.parse(value[$substring](0, 4)), core.int.parse(value[$substring](4, 6)), core.int.parse(value[$substring](6, 8)));
      }
      return ret;
    }
    findUrlDataFor(begDate, endDate) {
      let ret = JSArrayOfUrlDataL().of([]);
      let d1 = begDate.add({days: -1});
      let d2 = endDate.add({days: 0});
      while (dart.test(d1.isOnOrBefore(d2))) {
        let url = this.user.urlDataFor(d1);
        if (ret[$firstWhere](dart.fn(entry => dart.equals(entry, url), UrlDataLToboolL()), {orElse: dart.fn(() => null, VoidToNullN())}) == null) ret[$add](url);
        d1 = d1.add({days: 1});
      }
      return ret;
    }
    fillFormsFromShortcut(data) {
      this.period = new datepicker_component.DatepickerPeriod.new({src: data.periodData});
      for (let cfg of this.listConfig) {
        cfg.checked = data.forms[$keys][$contains](cfg.form.id);
        if (dart.test(cfg.checked)) {
          cfg.fillFromJson(data.forms[$_get](cfg.form.id));
        }
      }
      for (let entry of this.listConfig) {
        dart.dsend(this.user.formParams, '_set', [entry.id, entry.asString]);
      }
      this[_pdfOrder] = data.pdfOrder;
      this.glucMGDLIdx = data.glucMGDLIdx;
      this.sortConfigs();
    }
  };
  (globals.Globals._internal = function() {
    this[sanitizer] = null;
    this[currShortcutIdx] = -1;
    this[currShortcut] = null;
    this[ppMaxInsulinEffectInMS] = 3 * 60 * 60 * 1000;
    this[_ppStandardLimits] = false;
    this[ppCGPAlwaysStandardLimits] = true;
    this[ppComparable] = false;
    this[ppGlucMaxIdx] = 0;
    this[ppBasalPrecisionIdx] = 0;
    this[ppLatestFirst] = false;
    this[ppPdfSameWindow] = true;
    this[ppPdfDownload] = false;
    this[ppHideNightscoutInPDF] = true;
    this[ppShowUrlInPDF] = false;
    this[ppHideLoopData] = false;
    this[isCreatingPDF] = false;
    this[_pdfCreationMaxSize] = 4000000 - 100000;
    this[msg] = new globals.Msg.new();
    this[info] = new globals.Informator.new();
    this[basalPrecisionAuto] = 1;
    this[driveParent] = "appDataFolder";
    this[_client] = null;
    this[currPeriodShift] = null;
    this[title] = "Nightscout Reporter";
    this[settingsFile] = null;
    this[_syncGoogle] = false;
    this[urlPdf] = "https://nightscout-reporter.zreptil.de/pdfmake/pdfmake.php";
    this[urlPlayground] = "http://pdf.zreptil.de/playground.php";
    this[googleClientId] = "939975570793-i9kj0rp6kgv470t45j1pf1hg3j9fqmbh";
    this[isConfigured] = false;
    this[_khFactor] = 12;
    this[_googleLoaded] = false;
    this[isLoading] = false;
    globals.Globals.__proto__.new.call(this);
    let found = null;
    let dt = new core.DateTime.now();
    let offset = dt.timeZoneOffset.inMilliseconds;
    let list = env.timeZoneDatabase.locations[$values];
    for (let l of list) {
      if (l.currentTimeZone.offset == offset) {
        found = l;
        break;
      }
    }
    if (found != null) {
      globals.Globals.refTimezone = found.name;
      globals.Globals.refLocation = found;
    }
  }).prototype = globals.Globals.prototype;
  dart.addTypeTests(globals.Globals);
  dart.addTypeCaches(globals.Globals);
  dart.setMethodSignature(globals.Globals, () => ({
    __proto__: dart.getMethods(globals.Globals.__proto__),
    show: dart.fnType(dart.void, [dart.legacy(core.String)], {append: dart.legacy(core.bool), skipStart: dart.legacy(core.String)}, {}),
    saveWebData: dart.fnType(dart.void, []),
    restoreLiveStorage: dart.fnType(dart.void, []),
    timeForCalc: dart.fnType(dart.legacy(core.int), [dart.legacy(core.DateTime)]),
    date: dart.fnType(dart.legacy(date$.Date), [dart.legacy(core.DateTime)]),
    msgUrlFailure: dart.fnType(dart.legacy(core.String), [dart.legacy(core.String)]),
    infoClass: dart.fnType(dart.legacy(core.String), [dart.legacy(core.String)]),
    getGlucInfo: dart.fnType(dart.dynamic, []),
    glucValueFromData: dart.fnType(dart.legacy(core.double), [dart.dynamic]),
    glucFromData: dart.fnType(dart.legacy(core.String), [dart.dynamic], [dart.legacy(core.double)]),
    glucFromStatusMGDL: dart.fnType(dart.legacy(core.String), [dart.dynamic], [dart.legacy(core.double)]),
    requestJson: dart.fnType(dart.legacy(async.Future), [dart.legacy(core.String)], {body: dart.dynamic, headers: dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(core.String))), method: dart.legacy(core.String), showError: dart.legacy(core.bool)}, {}),
    donationClick: dart.fnType(dart.void, []),
    request: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.String))), [dart.legacy(core.String)], {asJson: dart.legacy(core.bool), body: dart.dynamic, headers: dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(core.String))), method: dart.legacy(core.String), showError: dart.legacy(core.bool)}, {}),
    checkSetup: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.String))), [], {checkUser: dart.legacy(globals.UserData)}, {}),
    changeLanguage: dart.fnType(dart.void, [dart.legacy(globals.LangData)], {checkConfigured: dart.legacy(core.bool), doReload: dart.legacy(core.bool)}, {}),
    setLanguage: dart.fnType(dart.void, [dart.legacy(globals.LangData)]),
    reload: dart.fnType(dart.void, []),
    clearStorage: dart.fnType(dart.void, []),
    copyFromOtherStorage: dart.fnType(dart.void, []),
    [_uploadToGoogle]: dart.fnType(dart.void, [dart.legacy(core.bool)]),
    [_getFromGoogle]: dart.fnType(dart.void, []),
    [_loadFromGoogle]: dart.fnType(dart.void, []),
    [_searchDocuments]: dart.fnType(dart.legacy(async.Future$(dart.legacy(v3.FileList))), [dart.legacy(core.int), dart.legacy(core.String)]),
    loadSettings: dart.fnType(dart.legacy(async.Future$(dart.void)), [], {skipSyncGoogle: dart.dynamic}, {}),
    loadWebData: dart.fnType(dart.void, []),
    refresh: dart.fnType(dart.void, []),
    [_initAfterLoad]: dart.fnType(dart.void, []),
    compareDate: dart.fnType(dart.legacy(core.int), [dart.legacy(date$.Date), dart.legacy(date$.Date)]),
    fmtBasal: dart.fnType(dart.legacy(core.String), [dart.legacy(core.num)], {dontRound: dart.legacy(core.bool)}, {}),
    limitValue: dart.fnType(dart.legacy(core.double), [dart.legacy(core.double), dart.legacy(core.double), dart.legacy(core.double)]),
    fmtNumber: dart.fnType(dart.legacy(core.String), [dart.legacy(core.num)], [dart.legacy(core.num), dart.legacy(core.int), dart.legacy(core.String), dart.legacy(core.bool), dart.legacy(core.bool)]),
    loadFromStorage: dart.fnType(dart.void, []),
    saveOld: dart.fnType(dart.void, [], {skipReload: dart.legacy(core.bool), updateSync: dart.legacy(core.bool)}, {}),
    checkJSON: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    saveShortcuts: dart.fnType(dart.void, []),
    parseDate: dart.fnType(dart.legacy(date$.Date), [dart.legacy(core.String)]),
    findUrlDataFor: dart.fnType(dart.legacy(core.List$(dart.legacy(globals.UrlData))), [dart.legacy(date$.Date), dart.legacy(date$.Date)]),
    fillFormsFromShortcut: dart.fnType(dart.void, [dart.legacy(globals.ShortcutData)])
  }));
  dart.setGetterSignature(globals.Globals, () => ({
    __proto__: dart.getGetters(globals.Globals.__proto__),
    ppStandardLimits: dart.legacy(core.bool),
    glucMaxValues: dart.legacy(core.List$(dart.legacy(core.double))),
    profileMaxCounts: dart.legacy(core.List$(dart.legacy(core.int))),
    glucMaxValue: dart.legacy(core.double),
    basalPrecisionValues: dart.legacy(core.List$(dart.legacy(core.int))),
    hideLoopData: dart.legacy(core.bool),
    pdfControlMaxSize: dart.legacy(core.int),
    pdfCreationMaxSize: dart.legacy(core.int),
    basalPrecision: dart.legacy(core.int),
    client: dart.legacy(auth.AutoRefreshingAuthClient),
    drive: dart.legacy(v3.DriveApi),
    listPeriodShift: dart.legacy(core.List$(dart.legacy(globals.PeriodShift))),
    msgBE: dart.legacy(core.String),
    msgUrlFailurePrefix: dart.legacy(core.String),
    msgUrlFailureSuffix: dart.legacy(core.String),
    msgUrlFailureHerokuapp: dart.legacy(core.String),
    msgUrlFailure10be: dart.legacy(core.String),
    msgUrlNotSafe: dart.legacy(core.String),
    msgNoURLDefined: dart.legacy(core.String),
    settingsFilename: dart.legacy(core.String),
    syncGoogle: dart.legacy(core.bool),
    khFactor: dart.legacy(core.int),
    isKHBE: dart.legacy(core.bool),
    pdfTarget: dart.legacy(core.String)
  }));
  dart.setSetterSignature(globals.Globals, () => ({
    __proto__: dart.getSetters(globals.Globals.__proto__),
    ppStandardLimits: dart.legacy(core.bool),
    pdfControlMaxSize: dart.legacy(core.int),
    pdfCreationMaxSize: dart.legacy(core.int),
    client: dart.legacy(auth.AutoRefreshingAuthClient),
    syncGoogle: dart.legacy(core.bool),
    khFactor: dart.legacy(core.int)
  }));
  dart.setLibraryUri(globals.Globals, L1);
  dart.setFieldSignature(globals.Globals, () => ({
    __proto__: dart.getFields(globals.Globals.__proto__),
    sanitizer: dart.fieldType(dart.legacy(dom_sanitization_service.DomSanitizationService)),
    currShortcutIdx: dart.fieldType(dart.legacy(core.int)),
    currShortcut: dart.fieldType(dart.legacy(globals.ShortcutData)),
    ppMaxInsulinEffectInMS: dart.fieldType(dart.legacy(core.int)),
    [_ppStandardLimits]: dart.fieldType(dart.legacy(core.bool)),
    ppCGPAlwaysStandardLimits: dart.fieldType(dart.legacy(core.bool)),
    ppComparable: dart.fieldType(dart.legacy(core.bool)),
    ppGlucMaxIdx: dart.fieldType(dart.legacy(core.int)),
    ppBasalPrecisionIdx: dart.fieldType(dart.legacy(core.int)),
    ppLatestFirst: dart.fieldType(dart.legacy(core.bool)),
    ppPdfSameWindow: dart.fieldType(dart.legacy(core.bool)),
    ppPdfDownload: dart.fieldType(dart.legacy(core.bool)),
    ppHideNightscoutInPDF: dart.fieldType(dart.legacy(core.bool)),
    ppShowUrlInPDF: dart.fieldType(dart.legacy(core.bool)),
    ppHideLoopData: dart.fieldType(dart.legacy(core.bool)),
    isCreatingPDF: dart.fieldType(dart.legacy(core.bool)),
    [_pdfCreationMaxSize]: dart.fieldType(dart.legacy(core.int)),
    msg: dart.fieldType(dart.legacy(globals.Msg)),
    info: dart.fieldType(dart.legacy(globals.Informator)),
    basalPrecisionAuto: dart.fieldType(dart.legacy(core.int)),
    driveParent: dart.finalFieldType(dart.legacy(core.String)),
    [_client]: dart.fieldType(dart.legacy(auth.AutoRefreshingAuthClient)),
    currPeriodShift: dart.fieldType(dart.legacy(globals.PeriodShift)),
    title: dart.fieldType(dart.legacy(core.String)),
    settingsFile: dart.fieldType(dart.legacy(v3.File)),
    [_syncGoogle]: dart.fieldType(dart.legacy(core.bool)),
    urlPdf: dart.fieldType(dart.legacy(core.String)),
    urlPlayground: dart.fieldType(dart.legacy(core.String)),
    googleClientId: dart.fieldType(dart.legacy(core.String)),
    isConfigured: dart.fieldType(dart.legacy(core.bool)),
    [_khFactor]: dart.fieldType(dart.legacy(core.int)),
    [_googleLoaded]: dart.fieldType(dart.legacy(core.bool)),
    isLoading: dart.fieldType(dart.legacy(core.bool))
  }));
  dart.defineLazy(globals.Globals, {
    /*globals.Globals.PDFUNLIMITED*/get PDFUNLIMITED() {
      return 4000000;
    },
    /*globals.Globals.PDFDIVIDER*/get PDFDIVIDER() {
      return 100000;
    },
    /*globals.Globals.refTimezone*/get refTimezone() {
      return "Europe/Berlin";
    },
    set refTimezone(_) {},
    /*globals.Globals.refLocation*/get refLocation() {
      return env.getLocation("Europe/Berlin");
    },
    set refLocation(_) {},
    /*globals.Globals._globals*/get _globals() {
      return new globals.Globals._internal();
    },
    /*globals.Globals.stdLower*/get stdLower() {
      return 55;
    },
    /*globals.Globals.stdLow*/get stdLow() {
      return 70;
    },
    /*globals.Globals.stdHigh*/get stdHigh() {
      return 180;
    },
    /*globals.Globals.stdHigher*/get stdHigher() {
      return 250;
    }
  }, true);
  var g$ = dart.privateName(globals, "UrlData.g");
  var url = dart.privateName(globals, "UrlData.url");
  var token = dart.privateName(globals, "UrlData.token");
  var startDate = dart.privateName(globals, "UrlData.startDate");
  var endDate = dart.privateName(globals, "UrlData.endDate");
  globals.UrlData = class UrlData extends core.Object {
    get g() {
      return this[g$];
    }
    set g(value) {
      this[g$] = value;
    }
    get url() {
      return this[url];
    }
    set url(value) {
      this[url] = value;
    }
    get token() {
      return this[token];
    }
    set token(value) {
      this[token] = value;
    }
    get startDate() {
      return this[startDate];
    }
    set startDate(value) {
      this[startDate] = value;
    }
    get endDate() {
      return this[endDate];
    }
    set endDate(value) {
      this[endDate] = value;
    }
    get asJson() {
      return new (IdentityMapOfStringL$StringL()).from(["u", this.url, "t", this.token, "sd", this.startDate == null ? "19700101" : this.startDate.format(new intl.DateFormat.new("yyyyMMdd")), "ed", this.endDate == null ? null : this.endDate.format(new intl.DateFormat.new("yyyyMMdd"))]);
    }
    static fromString(g, src) {
      try {
        return globals.UrlData.fromJson(g, convert.json.decode(src));
      } catch (e) {
        let ex = dart.getThrown(e);
        return new globals.UrlData.new(g);
      }
    }
    static fromJson(g, json) {
      let ret = new globals.UrlData.new(g);
      try {
        ret.url = json_data.JsonData.toText(dart.dsend(json, '_get', ["u"]));
        ret.token = json_data.JsonData.toText(dart.dsend(json, '_get', ["t"]));
        let sd = json_data.JsonData.toText(dart.dsend(json, '_get', ["sd"]));
        ret.startDate = sd == null ? new date$.Date.new(1970, 1, 1) : g.parseDate(sd);
        ret.endDate = dart.dsend(json, '_get', ["ed"]) == null ? null : g.parseDate(json_data.JsonData.toText(dart.dsend(json, '_get', ["ed"])));
      } catch (e) {
        let ex = dart.getThrown(e);
        let msg = dart.toString(ex);
        g.showDebug("Fehler bei UrlData.fromSharedJson: " + dart.str(msg));
      }
      return ret;
    }
    get startDateEdit() {
      return this.startDate == null ? null : this.startDate.format(this.g.fmtDateForDisplay);
    }
    set startDateEdit(v) {
      this.startDate = date$.Date.parse(v, this.g.fmtDateForDisplay);
    }
    get endDateEdit() {
      return this.endDate == null ? null : this.endDate.format(this.g.fmtDateForDisplay);
    }
    set endDateEdit(v) {
      this.endDate = date$.Date.parse(v, this.g.fmtDateForDisplay);
    }
    fullUrl(cmd, opts) {
      let params = opts && 'params' in opts ? opts.params : "";
      let noApi = opts && 'noApi' in opts ? opts.noApi : false;
      let ret = this.url;
      if (ret == null) return ret;
      if (ret[$startsWith]("@")) return ret[$substring](1);
      if (!ret[$endsWith]("/")) ret = dart.str(ret) + "/";
      if (!dart.test(noApi)) {
        if (!ret[$endsWith]("/api/v1/")) ret = dart.str(ret) + "api/v1/";
      }
      if (cmd == null || cmd[$isEmpty]) {
        ret = ret[$substring](0, ret.length - 1);
      } else {
        ret = dart.str(ret) + dart.str(cmd);
      }
      if (this.token != null && this.token[$isNotEmpty]) {
        ret = dart.str(ret) + "?token=" + dart.str(this.token) + "&";
      } else {
        ret = dart.str(ret) + "?";
      }
      if (params == null || params[$isEmpty]) {
        ret = ret[$substring](0, ret.length - 1);
      } else {
        ret = dart.str(ret) + dart.str(params);
      }
      return ret;
    }
  };
  (globals.UrlData.new = function(g) {
    this[url] = null;
    this[token] = null;
    this[startDate] = null;
    this[endDate] = null;
    this[g$] = g;
    ;
  }).prototype = globals.UrlData.prototype;
  dart.addTypeTests(globals.UrlData);
  dart.addTypeCaches(globals.UrlData);
  dart.setMethodSignature(globals.UrlData, () => ({
    __proto__: dart.getMethods(globals.UrlData.__proto__),
    fullUrl: dart.fnType(dart.legacy(core.String), [dart.legacy(core.String)], {noApi: dart.legacy(core.bool), params: dart.legacy(core.String)}, {})
  }));
  dart.setGetterSignature(globals.UrlData, () => ({
    __proto__: dart.getGetters(globals.UrlData.__proto__),
    asJson: dart.dynamic,
    startDateEdit: dart.legacy(core.String),
    endDateEdit: dart.legacy(core.String)
  }));
  dart.setSetterSignature(globals.UrlData, () => ({
    __proto__: dart.getSetters(globals.UrlData.__proto__),
    startDateEdit: dart.legacy(core.String),
    endDateEdit: dart.legacy(core.String)
  }));
  dart.setLibraryUri(globals.UrlData, L1);
  dart.setFieldSignature(globals.UrlData, () => ({
    __proto__: dart.getFields(globals.UrlData.__proto__),
    g: dart.fieldType(dart.legacy(globals.Globals)),
    url: dart.fieldType(dart.legacy(core.String)),
    token: dart.fieldType(dart.legacy(core.String)),
    startDate: dart.fieldType(dart.legacy(date$.Date)),
    endDate: dart.fieldType(dart.legacy(date$.Date))
  }));
  var g$0 = dart.privateName(globals, "UserData.g");
  var name = dart.privateName(globals, "UserData.name");
  var birthDate = dart.privateName(globals, "UserData.birthDate");
  var listApiUrl = dart.privateName(globals, "UserData.listApiUrl");
  var customData = dart.privateName(globals, "UserData.customData");
  var formParams = dart.privateName(globals, "UserData.formParams");
  var diaStartDate = dart.privateName(globals, "UserData.diaStartDate");
  var insulin = dart.privateName(globals, "UserData.insulin");
  var status = dart.privateName(globals, "UserData.status");
  var profileMaxIdx = dart.privateName(globals, "UserData.profileMaxIdx");
  var isReachable = dart.privateName(globals, "UserData.isReachable");
  globals.UserData = class UserData extends core.Object {
    get g() {
      return this[g$0];
    }
    set g(value) {
      this[g$0] = value;
    }
    get name() {
      return this[name];
    }
    set name(value) {
      this[name] = value;
    }
    get birthDate() {
      return this[birthDate];
    }
    set birthDate(value) {
      this[birthDate] = value;
    }
    get listApiUrl() {
      return this[listApiUrl];
    }
    set listApiUrl(value) {
      this[listApiUrl] = value;
    }
    get customData() {
      return this[customData];
    }
    set customData(value) {
      this[customData] = value;
    }
    get formParams() {
      return this[formParams];
    }
    set formParams(value) {
      this[formParams] = value;
    }
    get diaStartDate() {
      return this[diaStartDate];
    }
    set diaStartDate(value) {
      this[diaStartDate] = value;
    }
    get insulin() {
      return this[insulin];
    }
    set insulin(value) {
      this[insulin] = value;
    }
    get status() {
      return this[status];
    }
    set status(value) {
      this[status] = value;
    }
    get profileMaxIdx() {
      return this[profileMaxIdx];
    }
    set profileMaxIdx(value) {
      this[profileMaxIdx] = value;
    }
    get isReachable() {
      return this[isReachable];
    }
    set isReachable(value) {
      this[isReachable] = value;
    }
    saveParamsToForms() {
      for (let entry of this.g.listConfig) {
        entry.fillFromString(dart.dsend(this.formParams, '_get', [entry.id]));
      }
    }
    loadParamsFromForms() {
      for (let entry of this.g.listConfig) {
        dart.dsend(this.formParams, '_set', [entry.id, entry.asString]);
      }
    }
    get display() {
      return this.name[$isEmpty] ? this.apiUrl(null, "", {noApi: true}) : this.name;
    }
    get asJsonString() {
      let t16, t16$, t16$0, t16$1, t16$2;
      this.listApiUrl[$sort](dart.fn((a, b) => this.g.compareDate(a.endDate, b.endDate), UrlDataLAndUrlDataLTointL()));
      let urls = [];
      for (let url of this.listApiUrl) {
        urls[$add](url.asJson);
      }
      let token = this.listApiUrl[$last].token;
      let storageApiUrl = this.listApiUrl[$last].url;
      return "{\"n\":\"" + dart.str(this.name) + "\"," + "\"bd\":\"" + dart.str((t16 = this.birthDate, t16 == null ? "" : t16)) + "\"," + "\"ut\":\"" + dart.str((t16$ = token, t16$ == null ? "" : t16$)) + "\"," + "\"u\":\"" + dart.str((t16$0 = storageApiUrl, t16$0 == null ? "" : t16$0)) + "\"," + "\"s\":" + dart.str(convert.json.encode(urls)) + "," + "\"dd\":\"" + dart.str((t16$1 = this.diaStartDate, t16$1 == null ? "" : t16$1)) + "\"," + "\"i\":\"" + dart.str((t16$2 = this.insulin, t16$2 == null ? "" : t16$2)) + "\"," + "\"c\":" + dart.str(convert.json.encode(this.customData)) + "," + "\"f\":" + dart.str(convert.json.encode(this.formParams)) + "," + "\"r\":" + (dart.test(this.isReachable) ? "true" : "false") + "," + "\"pmi\":" + dart.str(this.profileMaxIdx) + "}";
    }
    static fromJson(g, json) {
      let t16, t16$;
      let ret = new globals.UserData.new(g);
      try {
        ret.name = StringL().as(dart.dsend(json, '_get', ["n"]));
        ret.birthDate = StringL().as(dart.dsend(json, '_get', ["bd"]));
        ret.diaStartDate = StringL().as(dart.dsend(json, '_get', ["dd"]));
        ret.insulin = StringL().as(dart.dsend(json, '_get', ["i"]));
        if (dart.dsend(json, '_get', ["s"]) == null) {
          let src = StringL().as((t16 = dart.dsend(json, '_get', ["u"]), t16 == null ? null : dart.dsend(t16, 'trim', [])));
          let url = new globals.UrlData.new(g);
          url.url = src;
          url.token = StringL().as(dart.dsend(json, '_get', ["ut"]));
          url.startDate = new date$.Date.new(1970, 1, 1);
          url.endDate = null;
          dart.dsend(json, '_set', ["s", [url.asJson]]);
        }
        ret.listApiUrl = JSArrayOfUrlDataL().of([]);
        for (let s of IterableL().as(dart.dsend(json, '_get', ["s"]))) {
          ret.listApiUrl[$add](globals.UrlData.fromJson(g, s));
        }
        ret.listApiUrl[$sort](dart.fn((a, b) => g.compareDate(a.endDate, b.endDate), UrlDataLAndUrlDataLTointL()));
        ret.customData = dart.dsend(json, '_get', ["c"]);
        ret.isReachable = boolL().as((t16$ = dart.dsend(json, '_get', ["r"]), t16$ == null ? true : t16$));
        ret.profileMaxIdx = json_data.JsonData.toInt(dart.dsend(json, '_get', ["pmi"]), null);
        ret.formParams = dart.dsend(json, '_get', ["f"]);
        if (ret.formParams != null && boolL().is(dart.dsend(ret.formParams, '_get', ["analysis"]))) {
          ret.formParams = new _js_helper.LinkedMap.new();
        }
      } catch (e) {
        let ex = dart.getThrown(e);
        let msg = dart.toString(ex);
        g.showDebug("Fehler bei UserData.fromJson: " + dart.str(msg));
      }
      return ret;
    }
    urlDataFor(date) {
      let ret = null;
      if (date != null) {
        for (let url of this.listApiUrl) {
          if (url.startDate == null || dart.test(url.startDate.isOnOrBefore(date))) {
            if (url.endDate == null || dart.test(url.endDate.isOnOrAfter(date))) ret = url;
          }
        }
      }
      ret == null ? ret = this.listApiUrl[$last] : null;
      return ret;
    }
    apiUrl(date, cmd, opts) {
      let params = opts && 'params' in opts ? opts.params : "";
      let noApi = opts && 'noApi' in opts ? opts.noApi : false;
      if (dart.test(this.listApiUrl[$isEmpty])) return null;
      let found = this.urlDataFor(date);
      return found.fullUrl(cmd, {params: params, noApi: noApi});
    }
    get reportUrl() {
      return this.apiUrl(null, "report", {noApi: true});
    }
    get isValid() {
      return async.async(StringL(), (function* isValid() {
        if (this.apiUrl(null, "") == null) return intl.Intl.message("Die URL wurde noch nicht festgelegt");
        let ret = null;
        let check = this.apiUrl(null, "status");
        yield this.g.request(check).then(core.Null, dart.fn(response => {
          if (response !== "<h1>STATUS OK</h1>") ret = this.g.msgUrlFailure(check);
        }, StringLToNullN())).catchError(dart.fn(err => {
          ret = this.g.msgUrlFailure(check);
        }, dynamicToNullN()));
        return ret;
      }).bind(this));
    }
  };
  (globals.UserData.new = function(g) {
    this[name] = "";
    this[birthDate] = "";
    this[listApiUrl] = JSArrayOfUrlDataL().of([]);
    this[customData] = new (IdentityMapOfStringL$StringL()).new();
    this[formParams] = new _js_helper.LinkedMap.new();
    this[diaStartDate] = "";
    this[insulin] = "";
    this[status] = null;
    this[profileMaxIdx] = null;
    this[isReachable] = true;
    this[g$0] = g;
    this.listApiUrl[$add](new globals.UrlData.new(this.g));
  }).prototype = globals.UserData.prototype;
  dart.addTypeTests(globals.UserData);
  dart.addTypeCaches(globals.UserData);
  dart.setMethodSignature(globals.UserData, () => ({
    __proto__: dart.getMethods(globals.UserData.__proto__),
    saveParamsToForms: dart.fnType(dart.void, []),
    loadParamsFromForms: dart.fnType(dart.void, []),
    urlDataFor: dart.fnType(dart.legacy(globals.UrlData), [dart.legacy(date$.Date)]),
    apiUrl: dart.fnType(dart.legacy(core.String), [dart.legacy(date$.Date), dart.legacy(core.String)], {noApi: dart.legacy(core.bool), params: dart.legacy(core.String)}, {})
  }));
  dart.setGetterSignature(globals.UserData, () => ({
    __proto__: dart.getGetters(globals.UserData.__proto__),
    display: dart.legacy(core.String),
    asJsonString: dart.legacy(core.String),
    reportUrl: dart.legacy(core.String),
    isValid: dart.legacy(async.Future$(dart.legacy(core.String)))
  }));
  dart.setLibraryUri(globals.UserData, L1);
  dart.setFieldSignature(globals.UserData, () => ({
    __proto__: dart.getFields(globals.UserData.__proto__),
    g: dart.fieldType(dart.legacy(globals.Globals)),
    name: dart.fieldType(dart.legacy(core.String)),
    birthDate: dart.fieldType(dart.legacy(core.String)),
    listApiUrl: dart.fieldType(dart.legacy(core.List$(dart.legacy(globals.UrlData)))),
    customData: dart.fieldType(dart.dynamic),
    formParams: dart.fieldType(dart.dynamic),
    diaStartDate: dart.fieldType(dart.legacy(core.String)),
    insulin: dart.fieldType(dart.legacy(core.String)),
    status: dart.fieldType(dart.legacy(json_data.StatusData)),
    profileMaxIdx: dart.fieldType(dart.legacy(core.int)),
    isReachable: dart.fieldType(dart.legacy(core.bool))
  }));
  var _isSamePeriod = dart.privateName(globals, "_isSamePeriod");
  var g$1 = dart.privateName(globals, "ShortcutData.g");
  var name$0 = dart.privateName(globals, "ShortcutData.name");
  var pdfOrder = dart.privateName(globals, "ShortcutData.pdfOrder");
  var periodData = dart.privateName(globals, "ShortcutData.periodData");
  var periodText = dart.privateName(globals, "ShortcutData.periodText");
  var glucMGDLIdx$ = dart.privateName(globals, "ShortcutData.glucMGDLIdx");
  var icon = dart.privateName(globals, "ShortcutData.icon");
  var forms = dart.privateName(globals, "ShortcutData.forms");
  globals.ShortcutData = class ShortcutData extends core.Object {
    get g() {
      return this[g$1];
    }
    set g(value) {
      this[g$1] = value;
    }
    get name() {
      return this[name$0];
    }
    set name(value) {
      this[name$0] = value;
    }
    get pdfOrder() {
      return this[pdfOrder];
    }
    set pdfOrder(value) {
      this[pdfOrder] = value;
    }
    get periodData() {
      return this[periodData];
    }
    set periodData(value) {
      this[periodData] = value;
    }
    get periodText() {
      return this[periodText];
    }
    set periodText(value) {
      this[periodText] = value;
    }
    get glucMGDLIdx() {
      return this[glucMGDLIdx$];
    }
    set glucMGDLIdx(value) {
      this[glucMGDLIdx$] = value;
    }
    get icon() {
      return this[icon];
    }
    set icon(value) {
      this[icon] = value;
    }
    get forms() {
      return this[forms];
    }
    set forms(value) {
      this[forms] = value;
    }
    get formData() {
      return convert.json.encode(this.forms);
    }
    [_isSamePeriod](a, b) {
      let sa = a[$split]("|");
      let sb = b[$split]("|");
      if (dart.notNull(sa[$length]) < 5 || dart.notNull(sb[$length]) < 5 || sa[$_get](4) != sb[$_get](4)) return false;
      if (sa[$_get](2) == sb[$_get](2) && sa[$_get](2) !== "") return true;
      if (sa[$_get](0) == sb[$_get](0) && sa[$_get](1) == sb[$_get](1)) return true;
      return false;
    }
    get isActive() {
      let t17;
      let check = convert.json.encode(this.g.currentFormsAsMap);
      if (this.formData != check) return false;
      if (!dart.test(this[_isSamePeriod](this.periodData, dart.toString(this.g.period)))) return false;
      if ((t17 = this.glucMGDLIdx, t17 == null ? this.g.glucMGDLIdx : t17) != this.g.glucMGDLIdx) return false;
      return true;
    }
    get copy() {
      let t17;
      let ret = (t17 = new globals.ShortcutData.new(this.g), (() => {
        t17.name = this.name;
        t17.periodData = this.periodData;
        t17.periodText = this.periodText;
        t17.icon = this.icon;
        t17.pdfOrder = this.pdfOrder;
        t17.glucMGDLIdx = this.glucMGDLIdx;
        return t17;
      })());
      ret.forms = new (IdentityMapOfStringL$dynamic()).new();
      for (let i = 0; i < dart.notNull(this.forms[$keys][$length]); i = i + 1) {
        ret.forms[$_set](this.forms[$keys][$elementAt](i), this.forms[$_get](this.forms[$keys][$elementAt](i)));
      }
      return ret;
    }
    loadCurrentForms() {
      this.forms = this.g.currentFormsAsMap;
      this.pdfOrder = this.g[_pdfOrder];
    }
    get asJsonString() {
      return "{" + "\"n\":\"" + dart.str(this.name) + "\"," + "\"p\":\"" + dart.str(this.periodData) + "\"," + "\"o\":\"" + dart.str(this.pdfOrder) + "\"," + "\"f\":" + dart.str(this.formData) + "," + "\"u\":" + dart.str(this.glucMGDLIdx) + "}";
    }
    static fromJson(g, json) {
      let ret = new globals.ShortcutData.new(g);
      try {
        ret.name = StringL().as(dart.dsend(json, '_get', ["n"]));
        if (ret.name === "null") ret.name = null;
        ret.periodData = StringL().as(dart.dsend(json, '_get', ["p"]));
        ret.forms = MapLOfStringL$dynamic().as(dart.dsend(json, '_get', ["f"]));
        let period = new datepicker_component.DatepickerPeriod.new({src: ret.periodData});
        globals.Settings.updatePeriod(period);
        ret.periodText = period.display;
        ret.pdfOrder = StringL().as(dart.dsend(json, '_get', ["o"]));
        ret.glucMGDLIdx = json_data.JsonData.toInt(dart.dsend(json, '_get', ["u"]), g.glucMGDLIdx);
      } catch (e) {
        let ex = dart.getThrown(e);
        let msg = dart.toString(ex);
        g.showDebug("Fehler bei ShortcutData.fromJson: " + dart.str(msg));
      }
      return ret;
    }
  };
  (globals.ShortcutData.new = function(g) {
    this[name$0] = null;
    this[pdfOrder] = null;
    this[periodData] = null;
    this[periodText] = null;
    this[glucMGDLIdx$] = null;
    this[icon] = "attach_file";
    this[forms] = new (IdentityMapOfStringL$dynamic()).new();
    this[g$1] = g;
    this.periodData = dart.toString(this.g.period);
    this.periodText = this.g.period.display;
    this.glucMGDLIdx = this.g.glucMGDLIdx;
    this.loadCurrentForms();
  }).prototype = globals.ShortcutData.prototype;
  dart.addTypeTests(globals.ShortcutData);
  dart.addTypeCaches(globals.ShortcutData);
  dart.setMethodSignature(globals.ShortcutData, () => ({
    __proto__: dart.getMethods(globals.ShortcutData.__proto__),
    [_isSamePeriod]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.String), dart.legacy(core.String)]),
    loadCurrentForms: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(globals.ShortcutData, () => ({
    __proto__: dart.getGetters(globals.ShortcutData.__proto__),
    formData: dart.legacy(core.String),
    isActive: dart.legacy(core.bool),
    copy: dart.legacy(globals.ShortcutData),
    asJsonString: dart.legacy(core.String)
  }));
  dart.setLibraryUri(globals.ShortcutData, L1);
  dart.setFieldSignature(globals.ShortcutData, () => ({
    __proto__: dart.getFields(globals.ShortcutData.__proto__),
    g: dart.fieldType(dart.legacy(globals.Globals)),
    name: dart.fieldType(dart.legacy(core.String)),
    pdfOrder: dart.fieldType(dart.legacy(core.String)),
    periodData: dart.fieldType(dart.legacy(core.String)),
    periodText: dart.fieldType(dart.legacy(core.String)),
    glucMGDLIdx: dart.fieldType(dart.legacy(core.int)),
    icon: dart.fieldType(dart.legacy(core.String)),
    forms: dart.fieldType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)))
  }));
  var _name$ = dart.privateName(json_data, "_name");
  var C0;
  var C1;
  var C2;
  var C3;
  var C4;
  var C5;
  var C6;
  var C7;
  json_data.Uploader = class Uploader extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (json_data.Uploader.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = json_data.Uploader.prototype;
  dart.addTypeTests(json_data.Uploader);
  dart.addTypeCaches(json_data.Uploader);
  dart.setMethodSignature(json_data.Uploader, () => ({
    __proto__: dart.getMethods(json_data.Uploader.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(json_data.Uploader, L2);
  dart.setFieldSignature(json_data.Uploader, () => ({
    __proto__: dart.getFields(json_data.Uploader.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(json_data.Uploader, ['toString']);
  json_data.Uploader.Unknown = C0 || CT.C0;
  json_data.Uploader.XDrip = C1 || CT.C1;
  json_data.Uploader.Tidepool = C2 || CT.C2;
  json_data.Uploader.Minimed600 = C3 || CT.C3;
  json_data.Uploader.OpenAPS = C4 || CT.C4;
  json_data.Uploader.AndroidAPS = C5 || CT.C5;
  json_data.Uploader.Spike = C6 || CT.C6;
  json_data.Uploader.values = C7 || CT.C7;
  json_data.JsonData = class JsonData extends core.Object {
    static toTime(value) {
      let t18, t18$, t18$0;
      if (value == null) return new core.DateTime.new(0, 1, 1);
      let hour = 0;
      let minute = 0;
      let second = 0;
      let parts = value[$split](":");
      if (dart.test(parts[$isNotEmpty])) hour = (t18 = core.int.tryParse(parts[$_get](0)), t18 == null ? 0 : t18);
      if (dart.notNull(parts[$length]) >= 2) minute = (t18$ = core.int.tryParse(parts[$_get](1)), t18$ == null ? 0 : t18$);
      if (dart.notNull(parts[$length]) >= 3) second = (t18$0 = core.int.tryParse(parts[$_get](2)), t18$0 == null ? 0 : t18$0);
      return new core.DateTime.new(0, 1, 1, hour, minute, second);
    }
    static toDate(value) {
      let t18;
      if (value == null) return new core.DateTime.new(0, 1, 1);
      if (intL().is(value)) return new core.DateTime.fromMillisecondsSinceEpoch(value);
      if (doubleL().is(value)) return new core.DateTime.fromMillisecondsSinceEpoch(value[$toInt]());
      t18 = core.DateTime.tryParse(core.String.as(value)).toLocal();
      return t18 == null ? new core.DateTime.new(0, 1, 1) : t18;
    }
    static toText(value, def = "") {
      if (value == null) return def;
      if (StringL().is(value)) return value;
      return dart.str(value);
    }
    static toBool(value, opts) {
      let ifEmpty = opts && 'ifEmpty' in opts ? opts.ifEmpty : false;
      if (value == null) return ifEmpty;
      if (boolL().is(value)) return value;
      if (StringL().is(value)) {
        if (ifEmpty != null && value === "") {
          return ifEmpty;
        }
        return value === "true" || value === "yes";
      }
      return false;
    }
    static toDouble(value, def = 0) {
      let t18;
      if (value == null || dart.equals(value, "NaN")) return doubleL().as(def);
      if (doubleL().is(value) || intL().is(value)) return doubleL().as(value);
      return doubleL().as((t18 = core.double.tryParse(core.String.as(value)), t18 == null ? def : t18));
    }
    static toInt(value, def = 0) {
      let t18;
      if (value == null) return def;
      if (intL().is(value)) return value;
      if (doubleL().is(value)) return value[$toInt]();
      if (StringL().is(value)) {
        t18 = core.int.tryParse(value);
        return t18 == null ? def : t18;
      }
      if (boolL().is(value)) return dart.test(value) ? def : 1 - dart.notNull(def);
      return def;
    }
  };
  (json_data.JsonData.new = function() {
    ;
  }).prototype = json_data.JsonData.prototype;
  dart.addTypeTests(json_data.JsonData);
  dart.addTypeCaches(json_data.JsonData);
  dart.setLibraryUri(json_data.JsonData, L2);
  var bgHigh = dart.privateName(json_data, "ThresholdData.bgHigh");
  var bgTargetTop = dart.privateName(json_data, "ThresholdData.bgTargetTop");
  var bgTargetBottom = dart.privateName(json_data, "ThresholdData.bgTargetBottom");
  var bgLow = dart.privateName(json_data, "ThresholdData.bgLow");
  json_data.ThresholdData = class ThresholdData extends json_data.JsonData {
    get bgHigh() {
      return this[bgHigh];
    }
    set bgHigh(value) {
      this[bgHigh] = value;
    }
    get bgTargetTop() {
      return this[bgTargetTop];
    }
    set bgTargetTop(value) {
      this[bgTargetTop] = value;
    }
    get bgTargetBottom() {
      return this[bgTargetBottom];
    }
    set bgTargetBottom(value) {
      this[bgTargetBottom] = value;
    }
    get bgLow() {
      return this[bgLow];
    }
    set bgLow(value) {
      this[bgLow] = value;
    }
    static fromJson(json) {
      let ret = new json_data.ThresholdData.new();
      if (json == null) return ret;
      ret.bgHigh = json_data.JsonData.toInt(json[$_get]("bgHigh"));
      ret.bgTargetTop = json_data.JsonData.toInt(json[$_get]("bgTargetTop"));
      ret.bgTargetBottom = json_data.JsonData.toInt(json[$_get]("bgTargetBottom"));
      ret.bgLow = json_data.JsonData.toInt(json[$_get]("bgLow"));
      return ret;
    }
  };
  (json_data.ThresholdData.new = function() {
    this[bgHigh] = null;
    this[bgTargetTop] = null;
    this[bgTargetBottom] = null;
    this[bgLow] = null;
    json_data.ThresholdData.__proto__.new.call(this);
    ;
  }).prototype = json_data.ThresholdData.prototype;
  dart.addTypeTests(json_data.ThresholdData);
  dart.addTypeCaches(json_data.ThresholdData);
  dart.setLibraryUri(json_data.ThresholdData, L2);
  dart.setFieldSignature(json_data.ThresholdData, () => ({
    __proto__: dart.getFields(json_data.ThresholdData.__proto__),
    bgHigh: dart.fieldType(dart.legacy(core.int)),
    bgTargetTop: dart.fieldType(dart.legacy(core.int)),
    bgTargetBottom: dart.fieldType(dart.legacy(core.int)),
    bgLow: dart.fieldType(dart.legacy(core.int))
  }));
  var units = dart.privateName(json_data, "SettingsData.units");
  var timeFormat = dart.privateName(json_data, "SettingsData.timeFormat");
  var nightMode = dart.privateName(json_data, "SettingsData.nightMode");
  var editMode = dart.privateName(json_data, "SettingsData.editMode");
  var showRawbg = dart.privateName(json_data, "SettingsData.showRawbg");
  var customTitle = dart.privateName(json_data, "SettingsData.customTitle");
  var theme = dart.privateName(json_data, "SettingsData.theme");
  var alarmUrgentHigh = dart.privateName(json_data, "SettingsData.alarmUrgentHigh");
  var alarmUrgentHighMins = dart.privateName(json_data, "SettingsData.alarmUrgentHighMins");
  var alarmHigh = dart.privateName(json_data, "SettingsData.alarmHigh");
  var alarmHighMins = dart.privateName(json_data, "SettingsData.alarmHighMins");
  var alarmLow = dart.privateName(json_data, "SettingsData.alarmLow");
  var alarmLowMins = dart.privateName(json_data, "SettingsData.alarmLowMins");
  var alarmUrgentLow = dart.privateName(json_data, "SettingsData.alarmUrgentLow");
  var alarmUrgentLowMins = dart.privateName(json_data, "SettingsData.alarmUrgentLowMins");
  var alarmUrgentMins = dart.privateName(json_data, "SettingsData.alarmUrgentMins");
  var alarmWarnMins = dart.privateName(json_data, "SettingsData.alarmWarnMins");
  var alarmTimeagoWarn = dart.privateName(json_data, "SettingsData.alarmTimeagoWarn");
  var alarmTimeagoWarnMins = dart.privateName(json_data, "SettingsData.alarmTimeagoWarnMins");
  var alarmTimeagoUrgent = dart.privateName(json_data, "SettingsData.alarmTimeagoUrgent");
  var alarmTimeagoUrgentMins = dart.privateName(json_data, "SettingsData.alarmTimeagoUrgentMins");
  var language = dart.privateName(json_data, "SettingsData.language");
  var scaleY = dart.privateName(json_data, "SettingsData.scaleY");
  var showPlugins = dart.privateName(json_data, "SettingsData.showPlugins");
  var showForecast = dart.privateName(json_data, "SettingsData.showForecast");
  var focusHours = dart.privateName(json_data, "SettingsData.focusHours");
  var heartbeat = dart.privateName(json_data, "SettingsData.heartbeat");
  var baseURL = dart.privateName(json_data, "SettingsData.baseURL");
  var authDefaultRoles = dart.privateName(json_data, "SettingsData.authDefaultRoles");
  var thresholds = dart.privateName(json_data, "SettingsData.thresholds");
  var defaultFeatures = dart.privateName(json_data, "SettingsData.defaultFeatures");
  var alarmTypes = dart.privateName(json_data, "SettingsData.alarmTypes");
  var enable = dart.privateName(json_data, "SettingsData.enable");
  json_data.SettingsData = class SettingsData extends json_data.JsonData {
    get units() {
      return this[units];
    }
    set units(value) {
      this[units] = value;
    }
    get timeFormat() {
      return this[timeFormat];
    }
    set timeFormat(value) {
      this[timeFormat] = value;
    }
    get nightMode() {
      return this[nightMode];
    }
    set nightMode(value) {
      this[nightMode] = value;
    }
    get editMode() {
      return this[editMode];
    }
    set editMode(value) {
      this[editMode] = value;
    }
    get showRawbg() {
      return this[showRawbg];
    }
    set showRawbg(value) {
      this[showRawbg] = value;
    }
    get customTitle() {
      return this[customTitle];
    }
    set customTitle(value) {
      this[customTitle] = value;
    }
    get theme() {
      return this[theme];
    }
    set theme(value) {
      this[theme] = value;
    }
    get alarmUrgentHigh() {
      return this[alarmUrgentHigh];
    }
    set alarmUrgentHigh(value) {
      this[alarmUrgentHigh] = value;
    }
    get alarmUrgentHighMins() {
      return this[alarmUrgentHighMins];
    }
    set alarmUrgentHighMins(value) {
      this[alarmUrgentHighMins] = value;
    }
    get alarmHigh() {
      return this[alarmHigh];
    }
    set alarmHigh(value) {
      this[alarmHigh] = value;
    }
    get alarmHighMins() {
      return this[alarmHighMins];
    }
    set alarmHighMins(value) {
      this[alarmHighMins] = value;
    }
    get alarmLow() {
      return this[alarmLow];
    }
    set alarmLow(value) {
      this[alarmLow] = value;
    }
    get alarmLowMins() {
      return this[alarmLowMins];
    }
    set alarmLowMins(value) {
      this[alarmLowMins] = value;
    }
    get alarmUrgentLow() {
      return this[alarmUrgentLow];
    }
    set alarmUrgentLow(value) {
      this[alarmUrgentLow] = value;
    }
    get alarmUrgentLowMins() {
      return this[alarmUrgentLowMins];
    }
    set alarmUrgentLowMins(value) {
      this[alarmUrgentLowMins] = value;
    }
    get alarmUrgentMins() {
      return this[alarmUrgentMins];
    }
    set alarmUrgentMins(value) {
      this[alarmUrgentMins] = value;
    }
    get alarmWarnMins() {
      return this[alarmWarnMins];
    }
    set alarmWarnMins(value) {
      this[alarmWarnMins] = value;
    }
    get alarmTimeagoWarn() {
      return this[alarmTimeagoWarn];
    }
    set alarmTimeagoWarn(value) {
      this[alarmTimeagoWarn] = value;
    }
    get alarmTimeagoWarnMins() {
      return this[alarmTimeagoWarnMins];
    }
    set alarmTimeagoWarnMins(value) {
      this[alarmTimeagoWarnMins] = value;
    }
    get alarmTimeagoUrgent() {
      return this[alarmTimeagoUrgent];
    }
    set alarmTimeagoUrgent(value) {
      this[alarmTimeagoUrgent] = value;
    }
    get alarmTimeagoUrgentMins() {
      return this[alarmTimeagoUrgentMins];
    }
    set alarmTimeagoUrgentMins(value) {
      this[alarmTimeagoUrgentMins] = value;
    }
    get language() {
      return this[language];
    }
    set language(value) {
      this[language] = value;
    }
    get scaleY() {
      return this[scaleY];
    }
    set scaleY(value) {
      this[scaleY] = value;
    }
    get showPlugins() {
      return this[showPlugins];
    }
    set showPlugins(value) {
      this[showPlugins] = value;
    }
    get showForecast() {
      return this[showForecast];
    }
    set showForecast(value) {
      this[showForecast] = value;
    }
    get focusHours() {
      return this[focusHours];
    }
    set focusHours(value) {
      this[focusHours] = value;
    }
    get heartbeat() {
      return this[heartbeat];
    }
    set heartbeat(value) {
      this[heartbeat] = value;
    }
    get baseURL() {
      return this[baseURL];
    }
    set baseURL(value) {
      this[baseURL] = value;
    }
    get authDefaultRoles() {
      return this[authDefaultRoles];
    }
    set authDefaultRoles(value) {
      this[authDefaultRoles] = value;
    }
    get thresholds() {
      return this[thresholds];
    }
    set thresholds(value) {
      this[thresholds] = value;
    }
    get defaultFeatures() {
      return this[defaultFeatures];
    }
    set defaultFeatures(value) {
      this[defaultFeatures] = value;
    }
    get alarmTypes() {
      return this[alarmTypes];
    }
    set alarmTypes(value) {
      this[alarmTypes] = value;
    }
    get enable() {
      return this[enable];
    }
    set enable(value) {
      this[enable] = value;
    }
    static fromJson(json) {
      let ret = new json_data.SettingsData.new();
      if (json == null) return ret;
      ret.units = json_data.JsonData.toText(json[$_get]("units"));
      ret.timeFormat = json_data.JsonData.toInt(json[$_get]("timeFormat"));
      ret.nightMode = json_data.JsonData.toBool(json[$_get]("nightMode"));
      ret.editMode = json_data.JsonData.toBool(json[$_get]("editMode"));
      ret.showRawbg = json_data.JsonData.toText(json[$_get]("showRawbg"));
      ret.customTitle = json_data.JsonData.toText(json[$_get]("customTitle"));
      ret.theme = json_data.JsonData.toText(json[$_get]("theme"));
      ret.alarmUrgentHigh = json_data.JsonData.toBool(json[$_get]("alarmUrgentHigh"));
      for (let entry of IterableL().as(json[$_get]("alarmUrgentHighMins"))) {
        ret.alarmUrgentHighMins[$add](json_data.JsonData.toInt(entry));
      }
      ret.alarmHigh = json_data.JsonData.toBool(json[$_get]("alarmHigh"));
      for (let entry of IterableL().as(json[$_get]("alarmHighMins"))) {
        ret.alarmHighMins[$add](json_data.JsonData.toInt(entry));
      }
      ret.alarmLow = json_data.JsonData.toBool(json[$_get]("alarmLow"));
      for (let entry of IterableL().as(json[$_get]("alarmLowMins"))) {
        ret.alarmLowMins[$add](json_data.JsonData.toInt(entry));
      }
      ret.alarmUrgentLow = json_data.JsonData.toBool(json[$_get]("alarmUrgentLow"));
      for (let entry of IterableL().as(json[$_get]("alarmUrgentLowMins"))) {
        ret.alarmUrgentLowMins[$add](json_data.JsonData.toInt(entry));
      }
      for (let entry of IterableL().as(json[$_get]("alarmUrgentMins"))) {
        ret.alarmUrgentMins[$add](json_data.JsonData.toInt(entry));
      }
      for (let entry of IterableL().as(json[$_get]("alarmWarnMins"))) {
        ret.alarmWarnMins[$add](json_data.JsonData.toInt(entry));
      }
      ret.alarmTimeagoWarn = json_data.JsonData.toBool(json[$_get]("alarmTimeagoWarn"));
      ret.alarmTimeagoWarnMins = json_data.JsonData.toInt(json[$_get]("alarmTimeagoWarnMins"));
      ret.alarmTimeagoUrgent = json_data.JsonData.toBool(json[$_get]("alarmTimeagoUrgent"));
      ret.alarmTimeagoUrgent = json_data.JsonData.toBool(json[$_get]("alarmTimeagoUrgent"));
      ret.alarmTimeagoUrgentMins = json_data.JsonData.toInt(json[$_get]("alarmTimeagoUrgentMins"));
      ret.language = StringL().as(json[$_get]("language"));
      ret.scaleY = StringL().as(json[$_get]("scaleY"));
      for (let entry of dart.toString(json[$_get]("showPlugins"))[$split](" ")) {
        if (entry !== "") ret.showPlugins[$add](entry);
      }
      ret.showForecast = StringL().as(json[$_get]("showForecast"));
      ret.focusHours = json_data.JsonData.toInt(json[$_get]("focusHours"));
      ret.heartbeat = json_data.JsonData.toInt(json[$_get]("heartbeat"));
      ret.baseURL = StringL().as(json[$_get]("baseURL"));
      ret.authDefaultRoles = StringL().as(json[$_get]("authDefaultRoles"));
      if (json[$_get]("thresholds") != null) ret.thresholds = json_data.ThresholdData.fromJson(MapLOfStringL$dynamic().as(json[$_get]("thresholds")));
      for (let t18 of IterableL().as(json[$_get]("DEFAULT_FEATURES"))) {
        let entry = StringL().as(t18);
        ret.defaultFeatures[$add](entry);
      }
      for (let t19 of IterableL().as(json[$_get]("alarmTypes"))) {
        let entry = StringL().as(t19);
        ret.alarmTypes[$add](entry);
      }
      for (let t20 of IterableL().as(json[$_get]("enable"))) {
        let entry = StringL().as(t20);
        ret.enable[$add](entry);
      }
      return ret;
    }
  };
  (json_data.SettingsData.new = function() {
    this[units] = null;
    this[timeFormat] = null;
    this[nightMode] = null;
    this[editMode] = null;
    this[showRawbg] = null;
    this[customTitle] = null;
    this[theme] = null;
    this[alarmUrgentHigh] = null;
    this[alarmUrgentHighMins] = JSArrayOfintL().of([]);
    this[alarmHigh] = null;
    this[alarmHighMins] = JSArrayOfintL().of([]);
    this[alarmLow] = null;
    this[alarmLowMins] = JSArrayOfintL().of([]);
    this[alarmUrgentLow] = null;
    this[alarmUrgentLowMins] = JSArrayOfintL().of([]);
    this[alarmUrgentMins] = JSArrayOfintL().of([]);
    this[alarmWarnMins] = JSArrayOfintL().of([]);
    this[alarmTimeagoWarn] = null;
    this[alarmTimeagoWarnMins] = null;
    this[alarmTimeagoUrgent] = null;
    this[alarmTimeagoUrgentMins] = null;
    this[language] = null;
    this[scaleY] = null;
    this[showPlugins] = JSArrayOfStringL().of([]);
    this[showForecast] = null;
    this[focusHours] = null;
    this[heartbeat] = null;
    this[baseURL] = null;
    this[authDefaultRoles] = null;
    this[thresholds] = null;
    this[defaultFeatures] = JSArrayOfStringL().of([]);
    this[alarmTypes] = JSArrayOfStringL().of([]);
    this[enable] = JSArrayOfStringL().of([]);
    json_data.SettingsData.__proto__.new.call(this);
    ;
  }).prototype = json_data.SettingsData.prototype;
  dart.addTypeTests(json_data.SettingsData);
  dart.addTypeCaches(json_data.SettingsData);
  dart.setLibraryUri(json_data.SettingsData, L2);
  dart.setFieldSignature(json_data.SettingsData, () => ({
    __proto__: dart.getFields(json_data.SettingsData.__proto__),
    units: dart.fieldType(dart.legacy(core.String)),
    timeFormat: dart.fieldType(dart.legacy(core.int)),
    nightMode: dart.fieldType(dart.legacy(core.bool)),
    editMode: dart.fieldType(dart.legacy(core.bool)),
    showRawbg: dart.fieldType(dart.legacy(core.String)),
    customTitle: dart.fieldType(dart.legacy(core.String)),
    theme: dart.fieldType(dart.legacy(core.String)),
    alarmUrgentHigh: dart.fieldType(dart.legacy(core.bool)),
    alarmUrgentHighMins: dart.fieldType(dart.legacy(core.List$(dart.legacy(core.int)))),
    alarmHigh: dart.fieldType(dart.legacy(core.bool)),
    alarmHighMins: dart.fieldType(dart.legacy(core.List$(dart.legacy(core.int)))),
    alarmLow: dart.fieldType(dart.legacy(core.bool)),
    alarmLowMins: dart.fieldType(dart.legacy(core.List$(dart.legacy(core.int)))),
    alarmUrgentLow: dart.fieldType(dart.legacy(core.bool)),
    alarmUrgentLowMins: dart.fieldType(dart.legacy(core.List$(dart.legacy(core.int)))),
    alarmUrgentMins: dart.fieldType(dart.legacy(core.List$(dart.legacy(core.int)))),
    alarmWarnMins: dart.fieldType(dart.legacy(core.List$(dart.legacy(core.int)))),
    alarmTimeagoWarn: dart.fieldType(dart.legacy(core.bool)),
    alarmTimeagoWarnMins: dart.fieldType(dart.legacy(core.int)),
    alarmTimeagoUrgent: dart.fieldType(dart.legacy(core.bool)),
    alarmTimeagoUrgentMins: dart.fieldType(dart.legacy(core.int)),
    language: dart.fieldType(dart.legacy(core.String)),
    scaleY: dart.fieldType(dart.legacy(core.String)),
    showPlugins: dart.fieldType(dart.legacy(core.List$(dart.legacy(core.String)))),
    showForecast: dart.fieldType(dart.legacy(core.String)),
    focusHours: dart.fieldType(dart.legacy(core.int)),
    heartbeat: dart.fieldType(dart.legacy(core.int)),
    baseURL: dart.fieldType(dart.legacy(core.String)),
    authDefaultRoles: dart.fieldType(dart.legacy(core.String)),
    thresholds: dart.fieldType(dart.legacy(json_data.ThresholdData)),
    defaultFeatures: dart.fieldType(dart.legacy(core.List$(dart.legacy(core.String)))),
    alarmTypes: dart.fieldType(dart.legacy(core.List$(dart.legacy(core.String)))),
    enable: dart.fieldType(dart.legacy(core.List$(dart.legacy(core.String))))
  }));
  var display = dart.privateName(json_data, "AgeData.display");
  var warn = dart.privateName(json_data, "AgeData.warn");
  var urgent = dart.privateName(json_data, "AgeData.urgent");
  var info$ = dart.privateName(json_data, "AgeData.info");
  var enableAlerts = dart.privateName(json_data, "AgeData.enableAlerts");
  json_data.AgeData = class AgeData extends json_data.JsonData {
    get display() {
      return this[display];
    }
    set display(value) {
      this[display] = value;
    }
    get warn() {
      return this[warn];
    }
    set warn(value) {
      this[warn] = value;
    }
    get urgent() {
      return this[urgent];
    }
    set urgent(value) {
      this[urgent] = value;
    }
    get info() {
      return this[info$];
    }
    set info(value) {
      this[info$] = value;
    }
    get enableAlerts() {
      return this[enableAlerts];
    }
    set enableAlerts(value) {
      this[enableAlerts] = value;
    }
    static fromJson(json) {
      let ret = new json_data.AgeData.new();
      if (json == null) return ret;
      ret.display = json_data.JsonData.toText(json[$_get]("display"));
      ret.warn = json_data.JsonData.toInt(json[$_get]("warn"));
      ret.urgent = json_data.JsonData.toInt(json[$_get]("urgent"));
      ret.info = json_data.JsonData.toInt(json[$_get]("info"));
      ret.enableAlerts = json_data.JsonData.toBool(json[$_get]("enableAlerts"));
      return ret;
    }
  };
  (json_data.AgeData.new = function() {
    this[display] = null;
    this[warn] = null;
    this[urgent] = null;
    this[info$] = null;
    this[enableAlerts] = null;
    json_data.AgeData.__proto__.new.call(this);
    ;
  }).prototype = json_data.AgeData.prototype;
  dart.addTypeTests(json_data.AgeData);
  dart.addTypeCaches(json_data.AgeData);
  dart.setLibraryUri(json_data.AgeData, L2);
  dart.setFieldSignature(json_data.AgeData, () => ({
    __proto__: dart.getFields(json_data.AgeData.__proto__),
    display: dart.fieldType(dart.legacy(core.String)),
    warn: dart.fieldType(dart.legacy(core.int)),
    urgent: dart.fieldType(dart.legacy(core.int)),
    info: dart.fieldType(dart.legacy(core.int)),
    enableAlerts: dart.fieldType(dart.legacy(core.bool))
  }));
  var upbatEnableAlerts = dart.privateName(json_data, "ExtendedSettingsData.upbatEnableAlerts");
  var upbatWarn = dart.privateName(json_data, "ExtendedSettingsData.upbatWarn");
  var cage = dart.privateName(json_data, "ExtendedSettingsData.cage");
  var sage = dart.privateName(json_data, "ExtendedSettingsData.sage");
  var pumpFields = dart.privateName(json_data, "ExtendedSettingsData.pumpFields");
  var advancedDeviceStatus = dart.privateName(json_data, "ExtendedSettingsData.advancedDeviceStatus");
  json_data.ExtendedSettingsData = class ExtendedSettingsData extends json_data.JsonData {
    get upbatEnableAlerts() {
      return this[upbatEnableAlerts];
    }
    set upbatEnableAlerts(value) {
      this[upbatEnableAlerts] = value;
    }
    get upbatWarn() {
      return this[upbatWarn];
    }
    set upbatWarn(value) {
      this[upbatWarn] = value;
    }
    get cage() {
      return this[cage];
    }
    set cage(value) {
      this[cage] = value;
    }
    get sage() {
      return this[sage];
    }
    set sage(value) {
      this[sage] = value;
    }
    get pumpFields() {
      return this[pumpFields];
    }
    set pumpFields(value) {
      this[pumpFields] = value;
    }
    get advancedDeviceStatus() {
      return this[advancedDeviceStatus];
    }
    set advancedDeviceStatus(value) {
      this[advancedDeviceStatus] = value;
    }
    static fromJson(json) {
      let ret = new json_data.ExtendedSettingsData.new();
      if (json == null) return ret;
      if (json[$_get]("pump") != null) {
        for (let entry of dart.toString(dart.dsend(json[$_get]("pump"), '_get', ["fields"]))[$split](" ")) {
          ret.pumpFields[$add](StringL().as(entry));
        }
      }
      if (json[$_get]("upbat") != null) {
        ret.upbatEnableAlerts = json_data.JsonData.toBool(dart.dsend(json[$_get]("upbat"), '_get', ["enableAlerts"]));
        ret.upbatWarn = json_data.JsonData.toInt(dart.dsend(json[$_get]("upbat"), '_get', ["warn"]));
      }
      ret.cage = json_data.AgeData.fromJson(MapLOfStringL$dynamic().as(json[$_get]("cage")));
      ret.cage = json_data.AgeData.fromJson(MapLOfStringL$dynamic().as(json[$_get]("sage")));
      ret.advancedDeviceStatus = json_data.JsonData.toBool(json[$_get]("advancedDeviceStatus"));
      return ret;
    }
  };
  (json_data.ExtendedSettingsData.new = function() {
    this[upbatEnableAlerts] = null;
    this[upbatWarn] = null;
    this[cage] = null;
    this[sage] = null;
    this[pumpFields] = JSArrayOfStringL().of([]);
    this[advancedDeviceStatus] = null;
    json_data.ExtendedSettingsData.__proto__.new.call(this);
    ;
  }).prototype = json_data.ExtendedSettingsData.prototype;
  dart.addTypeTests(json_data.ExtendedSettingsData);
  dart.addTypeCaches(json_data.ExtendedSettingsData);
  dart.setLibraryUri(json_data.ExtendedSettingsData, L2);
  dart.setFieldSignature(json_data.ExtendedSettingsData, () => ({
    __proto__: dart.getFields(json_data.ExtendedSettingsData.__proto__),
    upbatEnableAlerts: dart.fieldType(dart.legacy(core.bool)),
    upbatWarn: dart.fieldType(dart.legacy(core.int)),
    cage: dart.fieldType(dart.legacy(json_data.AgeData)),
    sage: dart.fieldType(dart.legacy(json_data.AgeData)),
    pumpFields: dart.fieldType(dart.legacy(core.List$(dart.legacy(core.String)))),
    advancedDeviceStatus: dart.fieldType(dart.legacy(core.bool))
  }));
  var raw = dart.privateName(json_data, "StatusData.raw");
  var status$ = dart.privateName(json_data, "StatusData.status");
  var name$1 = dart.privateName(json_data, "StatusData.name");
  var version$ = dart.privateName(json_data, "StatusData.version");
  var serverTime = dart.privateName(json_data, "StatusData.serverTime");
  var serverTimeEpoch = dart.privateName(json_data, "StatusData.serverTimeEpoch");
  var apiEnabled = dart.privateName(json_data, "StatusData.apiEnabled");
  var careportalEnabled = dart.privateName(json_data, "StatusData.careportalEnabled");
  var boluscalcEnabled = dart.privateName(json_data, "StatusData.boluscalcEnabled");
  var head = dart.privateName(json_data, "StatusData.head");
  var settings = dart.privateName(json_data, "StatusData.settings");
  var extendedSettings = dart.privateName(json_data, "StatusData.extendedSettings");
  json_data.StatusData = class StatusData extends json_data.JsonData {
    get raw() {
      return this[raw];
    }
    set raw(value) {
      this[raw] = value;
    }
    get status() {
      return this[status$];
    }
    set status(value) {
      this[status$] = value;
    }
    get name() {
      return this[name$1];
    }
    set name(value) {
      this[name$1] = value;
    }
    get version() {
      return this[version$];
    }
    set version(value) {
      this[version$] = value;
    }
    get serverTime() {
      return this[serverTime];
    }
    set serverTime(value) {
      this[serverTime] = value;
    }
    get serverTimeEpoch() {
      return this[serverTimeEpoch];
    }
    set serverTimeEpoch(value) {
      this[serverTimeEpoch] = value;
    }
    get apiEnabled() {
      return this[apiEnabled];
    }
    set apiEnabled(value) {
      this[apiEnabled] = value;
    }
    get careportalEnabled() {
      return this[careportalEnabled];
    }
    set careportalEnabled(value) {
      this[careportalEnabled] = value;
    }
    get boluscalcEnabled() {
      return this[boluscalcEnabled];
    }
    set boluscalcEnabled(value) {
      this[boluscalcEnabled] = value;
    }
    get head() {
      return this[head];
    }
    set head(value) {
      this[head] = value;
    }
    get settings() {
      return this[settings];
    }
    set settings(value) {
      this[settings] = value;
    }
    get extendedSettings() {
      return this[extendedSettings];
    }
    set extendedSettings(value) {
      this[extendedSettings] = value;
    }
    static fromJson(json) {
      let ret = new json_data.StatusData.new();
      ret.raw = json;
      ret.settings = new json_data.SettingsData.new();
      ret.extendedSettings = new json_data.ExtendedSettingsData.new();
      if (json == null) return ret;
      ret.status = json_data.JsonData.toText(json[$_get]("status"));
      if (ret.status === "401") return ret;
      ret.name = json_data.JsonData.toText(json[$_get]("name"));
      ret.version = json_data.JsonData.toText(json[$_get]("version"));
      ret.serverTime = json_data.JsonData.toDate(json[$_get]("serverTime"));
      ret.serverTimeEpoch = json_data.JsonData.toInt(json[$_get]("serverTimeEpoch"));
      ret.apiEnabled = json_data.JsonData.toBool("apiEnabled");
      ret.careportalEnabled = json_data.JsonData.toBool("careportalEnabled");
      ret.boluscalcEnabled = json_data.JsonData.toBool("boluscalcEnabled");
      ret.head = json_data.JsonData.toText(json[$_get]("head"));
      if (json[$_get]("settings") != null) ret.settings = json_data.SettingsData.fromJson(MapLOfStringL$dynamic().as(json[$_get]("settings")));
      if (json[$_get]("extendedSettings") != null) {
        ret.extendedSettings = json_data.ExtendedSettingsData.fromJson(MapLOfStringL$dynamic().as(json[$_get]("extendedSettings")));
      }
      return ret;
    }
  };
  (json_data.StatusData.new = function() {
    this[raw] = null;
    this[status$] = null;
    this[name$1] = null;
    this[version$] = null;
    this[serverTime] = null;
    this[serverTimeEpoch] = null;
    this[apiEnabled] = null;
    this[careportalEnabled] = null;
    this[boluscalcEnabled] = null;
    this[head] = null;
    this[settings] = null;
    this[extendedSettings] = null;
    json_data.StatusData.__proto__.new.call(this);
    ;
  }).prototype = json_data.StatusData.prototype;
  dart.addTypeTests(json_data.StatusData);
  dart.addTypeCaches(json_data.StatusData);
  dart.setLibraryUri(json_data.StatusData, L2);
  dart.setFieldSignature(json_data.StatusData, () => ({
    __proto__: dart.getFields(json_data.StatusData.__proto__),
    raw: dart.fieldType(dart.dynamic),
    status: dart.fieldType(dart.legacy(core.String)),
    name: dart.fieldType(dart.legacy(core.String)),
    version: dart.fieldType(dart.legacy(core.String)),
    serverTime: dart.fieldType(dart.legacy(core.DateTime)),
    serverTimeEpoch: dart.fieldType(dart.legacy(core.int)),
    apiEnabled: dart.fieldType(dart.legacy(core.bool)),
    careportalEnabled: dart.fieldType(dart.legacy(core.bool)),
    boluscalcEnabled: dart.fieldType(dart.legacy(core.bool)),
    head: dart.fieldType(dart.legacy(core.String)),
    settings: dart.fieldType(dart.legacy(json_data.SettingsData)),
    extendedSettings: dart.fieldType(dart.legacy(json_data.ExtendedSettingsData))
  }));
  var day = dart.privateName(json_data, "ProfileGlucData.day");
  var targetLow = dart.privateName(json_data, "ProfileGlucData.targetLow");
  var targetLower = dart.privateName(json_data, "ProfileGlucData.targetLower");
  var targetHigh = dart.privateName(json_data, "ProfileGlucData.targetHigh");
  var targetHigher = dart.privateName(json_data, "ProfileGlucData.targetHigher");
  var sens = dart.privateName(json_data, "ProfileGlucData.sens");
  var carbRatio = dart.privateName(json_data, "ProfileGlucData.carbRatio");
  var basal = dart.privateName(json_data, "ProfileGlucData.basal");
  var store$ = dart.privateName(json_data, "ProfileGlucData.store");
  json_data.ProfileGlucData = class ProfileGlucData extends core.Object {
    get day() {
      return this[day];
    }
    set day(value) {
      this[day] = value;
    }
    get targetLow() {
      return this[targetLow];
    }
    set targetLow(value) {
      this[targetLow] = value;
    }
    get targetLower() {
      return this[targetLower];
    }
    set targetLower(value) {
      this[targetLower] = value;
    }
    get targetHigh() {
      return this[targetHigh];
    }
    set targetHigh(value) {
      this[targetHigh] = value;
    }
    get targetHigher() {
      return this[targetHigher];
    }
    set targetHigher(value) {
      this[targetHigher] = value;
    }
    get sens() {
      return this[sens];
    }
    set sens(value) {
      this[sens] = value;
    }
    get carbRatio() {
      return this[carbRatio];
    }
    set carbRatio(value) {
      this[carbRatio] = value;
    }
    get basal() {
      return this[basal];
    }
    set basal(value) {
      this[basal] = value;
    }
    get store() {
      return this[store$];
    }
    set store(value) {
      this[store$] = value;
    }
    find(date, time, list) {
      let ret = new json_data.ProfileEntryData.new(this.store.timezone);
      let check = new core.DateTime.new(date.year, date.month, date.day, time.hour, time.minute, time.second);
      for (let entry of list) {
        if (!dart.test(entry.time(date).isAfter(check))) ret = entry;
      }
      return ret;
    }
  };
  (json_data.ProfileGlucData.new = function(store) {
    this[day] = null;
    this[targetLow] = 70.0;
    this[targetLower] = 55.0;
    this[targetHigh] = 180.0;
    this[targetHigher] = 250.0;
    this[sens] = null;
    this[carbRatio] = null;
    this[basal] = null;
    this[store$] = store;
    this.sens = new json_data.ProfileEntryData.new(this.store.timezone);
    this.carbRatio = new json_data.ProfileEntryData.new(this.store.timezone);
    this.basal = new json_data.ProfileEntryData.new(this.store.timezone);
  }).prototype = json_data.ProfileGlucData.prototype;
  dart.addTypeTests(json_data.ProfileGlucData);
  dart.addTypeCaches(json_data.ProfileGlucData);
  dart.setMethodSignature(json_data.ProfileGlucData, () => ({
    __proto__: dart.getMethods(json_data.ProfileGlucData.__proto__),
    find: dart.fnType(dart.legacy(json_data.ProfileEntryData), [dart.legacy(date$.Date), dart.legacy(core.DateTime), dart.legacy(core.List$(dart.legacy(json_data.ProfileEntryData)))])
  }));
  dart.setLibraryUri(json_data.ProfileGlucData, L2);
  dart.setFieldSignature(json_data.ProfileGlucData, () => ({
    __proto__: dart.getFields(json_data.ProfileGlucData.__proto__),
    day: dart.fieldType(dart.legacy(core.DateTime)),
    targetLow: dart.fieldType(dart.legacy(core.double)),
    targetLower: dart.fieldType(dart.legacy(core.double)),
    targetHigh: dart.fieldType(dart.legacy(core.double)),
    targetHigher: dart.fieldType(dart.legacy(core.double)),
    sens: dart.fieldType(dart.legacy(json_data.ProfileEntryData)),
    carbRatio: dart.fieldType(dart.legacy(json_data.ProfileEntryData)),
    basal: dart.fieldType(dart.legacy(json_data.ProfileEntryData)),
    store: dart.fieldType(dart.legacy(json_data.ProfileStoreData))
  }));
  var name$2 = dart.privateName(json_data, "ProfileTimezone.name");
  var location$ = dart.privateName(json_data, "ProfileTimezone.location");
  var localDiff = dart.privateName(json_data, "ProfileTimezone.localDiff");
  json_data.ProfileTimezone = class ProfileTimezone extends core.Object {
    get name() {
      return this[name$2];
    }
    set name(value) {
      this[name$2] = value;
    }
    get location() {
      return this[location$];
    }
    set location(value) {
      this[location$] = value;
    }
    get localDiff() {
      return this[localDiff];
    }
    set localDiff(value) {
      this[localDiff] = value;
    }
  };
  (json_data.ProfileTimezone.new = function(name, isInitializing = false) {
    this[location$] = null;
    this[localDiff] = 0;
    this[name$2] = name;
    this.location = env.getLocation(this.name);
    if (this.location != null) {
      let d = new date_time.TZDateTime.new(this.location, 0, 1, 1, 0, 0, 0);
      this.localDiff = d.difference(new core.DateTime.new(0)).inHours;
    }
  }).prototype = json_data.ProfileTimezone.prototype;
  dart.addTypeTests(json_data.ProfileTimezone);
  dart.addTypeCaches(json_data.ProfileTimezone);
  dart.setLibraryUri(json_data.ProfileTimezone, L2);
  dart.setFieldSignature(json_data.ProfileTimezone, () => ({
    __proto__: dart.getFields(json_data.ProfileTimezone.__proto__),
    name: dart.fieldType(dart.legacy(core.String)),
    location: dart.fieldType(dart.legacy(location.Location)),
    localDiff: dart.fieldType(dart.legacy(core.int))
  }));
  var _time = dart.privateName(json_data, "_time");
  var _percentAdjust = dart.privateName(json_data, "_percentAdjust");
  var _absoluteRate = dart.privateName(json_data, "_absoluteRate");
  var _timezone = dart.privateName(json_data, "_timezone");
  var _percent = dart.privateName(json_data, "_percent");
  var _rate = dart.privateName(json_data, "_rate");
  var _absolute = dart.privateName(json_data, "_absolute");
  var forceText = dart.privateName(json_data, "ProfileEntryData.forceText");
  var value$ = dart.privateName(json_data, "ProfileEntryData.value");
  var duration = dart.privateName(json_data, "ProfileEntryData.duration");
  var orgValue = dart.privateName(json_data, "ProfileEntryData.orgValue");
  var timeAsSeconds = dart.privateName(json_data, "ProfileEntryData.timeAsSeconds");
  var from = dart.privateName(json_data, "ProfileEntryData.from");
  json_data.ProfileEntryData = class ProfileEntryData extends json_data.JsonData {
    get forceText() {
      return this[forceText];
    }
    set forceText(value) {
      this[forceText] = value;
    }
    get value() {
      return this[value$];
    }
    set value(value) {
      this[value$] = value;
    }
    get duration() {
      return this[duration];
    }
    set duration(value) {
      this[duration] = value;
    }
    get orgValue() {
      return this[orgValue];
    }
    set orgValue(value) {
      this[orgValue] = value;
    }
    get timeAsSeconds() {
      return this[timeAsSeconds];
    }
    set timeAsSeconds(value) {
      this[timeAsSeconds] = value;
    }
    get from() {
      return this[from];
    }
    set from(value) {
      this[from] = value;
    }
    set percentAdjust(value) {
      return this[_percentAdjust] = value;
    }
    set absoluteRate(value) {
      return this[_absoluteRate] = value;
    }
    get tempAdjusted() {
      return this[_absoluteRate] != null ? 0.0 : this.orgValue == null || this.orgValue === 0 ? 0.0 : (dart.notNull(this.value) - dart.notNull(this.orgValue)) / dart.notNull(this.orgValue);
    }
    get localDiff() {
      return this[_timezone].localDiff;
    }
    get hash() {
      return dart.str(this[_time].hour) + ":" + dart.str(this[_time].minute) + "=" + dart.str(this.value);
    }
    endTime(date, adjustLocalForTime = false) {
      let ret = this.time(date, adjustLocalForTime);
      ret.add(new core.Duration.new({seconds: dart.notNull(this.duration) - 1}));
      return ret;
    }
    get timeForCalc() {
      return dart.notNull(this[_time].hour) * 3600 + dart.notNull(this[_time].minute) * 60 + dart.notNull(this[_time].second);
    }
    set timeForCalc(value) {
      let h = (dart.notNull(value) / 3600)[$truncate]();
      let m = (value[$modulo](3600) / 60)[$truncate]();
      let s = value[$modulo](60);
      this[_time] = new core.DateTime.new(this[_time].year, this[_time].month, this[_time].day, h, m, s);
    }
    time(date, adjustLocalForTime = false) {
      let hour = this[_time].hour;
      if (dart.test(adjustLocalForTime)) hour = dart.notNull(hour) + dart.notNull(this[_timezone].localDiff);
      while (dart.notNull(hour) < 0) {
        hour = dart.notNull(hour) + 24;
      }
      while (dart.notNull(hour) >= 24) {
        hour = dart.notNull(hour) - 24;
      }
      return new core.DateTime.new(date.year, date.month, date.day, hour, this[_time].minute, this[_time].second);
    }
    get copy() {
      let t21;
      t21 = new json_data.ProfileEntryData.new(null);
      return (() => {
        t21.value = this.value;
        t21.duration = this.duration;
        t21.timeAsSeconds = this.timeAsSeconds;
        t21[_absoluteRate] = this[_absoluteRate];
        t21[_timezone] = this[_timezone];
        t21[_percentAdjust] = this[_percentAdjust];
        t21[_time] = this[_time];
        t21.forceText = this.forceText;
        t21.orgValue = this.orgValue;
        t21[_timezone] = this[_timezone];
        t21.from = this.from;
        return t21;
      })();
    }
    clone(time) {
      let ret = this.copy;
      ret[_time] = time;
      return ret;
    }
    get isCalculated() {
      return this[_percentAdjust] != null || this[_absoluteRate] != null;
    }
    transferCalcValues(src) {
      this[_percentAdjust] = src[_percentAdjust];
      this[_absoluteRate] = src[_absoluteRate];
    }
    adjustedValue(v) {
      if (this[_percentAdjust] != null) return dart.notNull(v) + dart.notNull(v) * dart.notNull(this[_percentAdjust]) / 100.0;
      if (this[_absoluteRate] != null) {
        return this[_absoluteRate];
      }
      return v;
    }
    static fromTreatment(timezone, src) {
      let ret = new json_data.ProfileEntryData.new(timezone, src.createdAt);
      if (src[_percent] != null) {
        ret.percentAdjust = src[_percent][$toDouble]();
      } else if (src[_rate] != null) ret.absoluteRate = src[_rate];
      ret.from = src.from;
      if ((src.from == json_data.Uploader.Minimed600 || src.from == json_data.Uploader.Tidepool || src.from == json_data.Uploader.Spike || src.from == json_data.Uploader.Unknown) && src[_absolute] != null) ret.absoluteRate = src[_absolute];
      ret.duration = src.duration;
      return ret;
    }
    static fromJson(json, timezone, timeshift, percentage = 1, isReciprocal = false) {
      let t21, t21$;
      let ret = new json_data.ProfileEntryData.new(timezone);
      if (json == null) return ret;
      ret[_time] = json_data.JsonData.toTime(StringL().as(json[$_get]("time")));
      if (dart.notNull(ret[_time].hour) < 24 - dart.notNull(timeshift)) {
        ret[_time] = ret[_time].add(new core.Duration.new({hours: timeshift}));
      } else {
        ret[_time] = ret[_time].add(new core.Duration.new({hours: dart.notNull(timeshift) - 24}));
      }
      ret.value = json_data.JsonData.toDouble(json[$_get]("value"));
      if (ret.value != null) {
        if (dart.test(isReciprocal)) {
          if (dart.notNull(percentage) > 0) {
            t21 = ret;
            t21.value = dart.notNull(t21.value) / dart.notNull(percentage);
          } else {
            ret.value = 0.0;
          }
        } else {
          t21$ = ret;
          t21$.value = dart.notNull(t21$.value) * dart.notNull(percentage);
        }
      }
      ret.timeAsSeconds = json_data.JsonData.toInt(json[$_get]("timeAsSeconds"));
      return ret;
    }
  };
  (json_data.ProfileEntryData.new = function(timezone, src = null) {
    let t21;
    this[_time] = null;
    this[forceText] = null;
    this[value$] = null;
    this[_percentAdjust] = null;
    this[_absoluteRate] = null;
    this[duration] = 3600;
    this[orgValue] = null;
    this[timeAsSeconds] = null;
    this[_timezone] = null;
    this[from] = json_data.Uploader.Unknown;
    json_data.ProfileEntryData.__proto__.new.call(this);
    if (timezone != null) this[_timezone] = timezone;
    this[_time] = (t21 = src, t21 == null ? new core.DateTime.new(0) : t21);
  }).prototype = json_data.ProfileEntryData.prototype;
  dart.addTypeTests(json_data.ProfileEntryData);
  dart.addTypeCaches(json_data.ProfileEntryData);
  dart.setMethodSignature(json_data.ProfileEntryData, () => ({
    __proto__: dart.getMethods(json_data.ProfileEntryData.__proto__),
    endTime: dart.fnType(dart.legacy(core.DateTime), [dart.legacy(date$.Date)], [dart.legacy(core.bool)]),
    time: dart.fnType(dart.legacy(core.DateTime), [dart.legacy(date$.Date)], [dart.legacy(core.bool)]),
    clone: dart.fnType(dart.legacy(json_data.ProfileEntryData), [dart.legacy(core.DateTime)]),
    transferCalcValues: dart.fnType(dart.void, [dart.legacy(json_data.ProfileEntryData)]),
    adjustedValue: dart.fnType(dart.legacy(core.double), [dart.legacy(core.double)])
  }));
  dart.setGetterSignature(json_data.ProfileEntryData, () => ({
    __proto__: dart.getGetters(json_data.ProfileEntryData.__proto__),
    tempAdjusted: dart.legacy(core.double),
    localDiff: dart.legacy(core.int),
    hash: dart.legacy(core.String),
    timeForCalc: dart.legacy(core.int),
    copy: dart.legacy(json_data.ProfileEntryData),
    isCalculated: dart.legacy(core.bool)
  }));
  dart.setSetterSignature(json_data.ProfileEntryData, () => ({
    __proto__: dart.getSetters(json_data.ProfileEntryData.__proto__),
    percentAdjust: dart.legacy(core.double),
    absoluteRate: dart.legacy(core.double),
    timeForCalc: dart.legacy(core.int)
  }));
  dart.setLibraryUri(json_data.ProfileEntryData, L2);
  dart.setFieldSignature(json_data.ProfileEntryData, () => ({
    __proto__: dart.getFields(json_data.ProfileEntryData.__proto__),
    [_time]: dart.fieldType(dart.legacy(core.DateTime)),
    forceText: dart.fieldType(dart.legacy(core.String)),
    value: dart.fieldType(dart.legacy(core.double)),
    [_percentAdjust]: dart.fieldType(dart.legacy(core.double)),
    [_absoluteRate]: dart.fieldType(dart.legacy(core.double)),
    duration: dart.fieldType(dart.legacy(core.int)),
    orgValue: dart.fieldType(dart.legacy(core.double)),
    timeAsSeconds: dart.fieldType(dart.legacy(core.int)),
    [_timezone]: dart.fieldType(dart.legacy(json_data.ProfileTimezone)),
    from: dart.fieldType(dart.legacy(json_data.Uploader))
  }));
  var _listSum = dart.privateName(json_data, "_listSum");
  var _importFromTime = dart.privateName(json_data, "_importFromTime");
  var _removeFrom = dart.privateName(json_data, "_removeFrom");
  var _addFrom = dart.privateName(json_data, "_addFrom");
  var name$3 = dart.privateName(json_data, "ProfileStoreData.name");
  var dia = dart.privateName(json_data, "ProfileStoreData.dia");
  var listCarbratio = dart.privateName(json_data, "ProfileStoreData.listCarbratio");
  var carbsHr = dart.privateName(json_data, "ProfileStoreData.carbsHr");
  var delay = dart.privateName(json_data, "ProfileStoreData.delay");
  var maxPrecision = dart.privateName(json_data, "ProfileStoreData.maxPrecision");
  var listSens = dart.privateName(json_data, "ProfileStoreData.listSens");
  var timezone = dart.privateName(json_data, "ProfileStoreData.timezone");
  var listBasal = dart.privateName(json_data, "ProfileStoreData.listBasal");
  var listTargetLow = dart.privateName(json_data, "ProfileStoreData.listTargetLow");
  var listTargetHigh = dart.privateName(json_data, "ProfileStoreData.listTargetHigh");
  var startDate$ = dart.privateName(json_data, "ProfileStoreData.startDate");
  var units$ = dart.privateName(json_data, "ProfileStoreData.units");
  json_data.ProfileStoreData = class ProfileStoreData extends json_data.JsonData {
    get name() {
      return this[name$3];
    }
    set name(value) {
      this[name$3] = value;
    }
    get dia() {
      return this[dia];
    }
    set dia(value) {
      this[dia] = value;
    }
    get listCarbratio() {
      return this[listCarbratio];
    }
    set listCarbratio(value) {
      this[listCarbratio] = value;
    }
    get carbsHr() {
      return this[carbsHr];
    }
    set carbsHr(value) {
      this[carbsHr] = value;
    }
    get delay() {
      return this[delay];
    }
    set delay(value) {
      this[delay] = value;
    }
    get maxPrecision() {
      return this[maxPrecision];
    }
    set maxPrecision(value) {
      this[maxPrecision] = value;
    }
    get listSens() {
      return this[listSens];
    }
    set listSens(value) {
      this[listSens] = value;
    }
    get timezone() {
      return this[timezone];
    }
    set timezone(value) {
      this[timezone] = value;
    }
    get listBasal() {
      return this[listBasal];
    }
    set listBasal(value) {
      this[listBasal] = value;
    }
    get listTargetLow() {
      return this[listTargetLow];
    }
    set listTargetLow(value) {
      this[listTargetLow] = value;
    }
    get listTargetHigh() {
      return this[listTargetHigh];
    }
    set listTargetHigh(value) {
      this[listTargetHigh] = value;
    }
    get startDate() {
      return this[startDate$];
    }
    set startDate(value) {
      this[startDate$] = value;
    }
    get units() {
      return this[units$];
    }
    set units(value) {
      this[units$] = value;
    }
    get ieBasalSum() {
      return this[_listSum](this.listBasal);
    }
    get icrSum() {
      return this[_listSum](this.listCarbratio);
    }
    get isfSum() {
      return this[_listSum](this.listSens);
    }
    get carbRatioPerHour() {
      let t21;
      return dart.notNull((t21 = this.carbsHr, t21 == null ? 0 : t21)) > 0 ? this.carbsHr : 12;
    }
    [_listSum](list) {
      let t21, t21$;
      let ret = 0.0;
      for (let entry of list) {
        ret = ret + dart.notNull((t21 = entry.value, t21 == null ? 0.0 : t21)) * dart.notNull((t21$ = entry.duration, t21$ == null ? 0 : t21$)) / 3600;
      }
      return ret;
    }
    list2String(list) {
      let dst = JSArrayOfStringL().of([]);
      for (let entry of list) {
        dst[$add](entry.hash);
      }
      return dst[$join]("|");
    }
    get hash() {
      let temp = dart.str(this.dia) + "-" + dart.str(this.carbsHr) + "-" + dart.str(this.list2String(this.listCarbratio)) + "-" + dart.str(this.list2String(this.listBasal)) + "-" + dart.str(this.list2String(this.listSens)) + "-" + dart.str(this.list2String(this.listTargetHigh)) + "-" + dart.str(this.list2String(this.listTargetLow));
      let bytes = convert.utf8.encode(temp);
      return dart.str(sha1.sha1.convert(bytes));
    }
    get copy() {
      let t21;
      let ret = (t21 = new json_data.ProfileStoreData.new(this.name), (() => {
        t21.dia = this.dia;
        t21.carbsHr = this.carbsHr;
        t21.delay = this.delay;
        t21.startDate = this.startDate;
        t21.maxPrecision = this.maxPrecision;
        t21.timezone = this.timezone;
        t21.units = this.units;
        return t21;
      })());
      ret.listBasal = JSArrayOfProfileEntryDataL().of([]);
      for (let entry of this.listBasal) {
        ret.listBasal[$add](entry.copy);
      }
      ret.listCarbratio = JSArrayOfProfileEntryDataL().of([]);
      for (let entry of this.listCarbratio) {
        ret.listCarbratio[$add](entry.copy);
      }
      ret.listSens = JSArrayOfProfileEntryDataL().of([]);
      for (let entry of this.listSens) {
        ret.listSens[$add](entry.copy);
      }
      ret.listTargetLow = JSArrayOfProfileEntryDataL().of([]);
      for (let entry of this.listTargetLow) {
        ret.listTargetLow[$add](entry.copy);
      }
      ret.listTargetHigh = JSArrayOfProfileEntryDataL().of([]);
      for (let entry of this.listTargetHigh) {
        ret.listTargetHigh[$add](entry.copy);
      }
      return ret;
    }
    static _adjust(list) {
      list[$sort](dart.fn((a, b) => a[_time].compareTo(b[_time]), ProfileEntryDataLAndProfileEntryDataLTointL()));
      if (dart.test(list[$isNotEmpty]) && list[$first][_time].hour !== 0) {
        let first = list[$last].copy;
        if (first.value == list[$first].value) {
          list[$first][_time] = list[$first][_time].add(new core.Duration.new({hours: -dart.notNull(first[_time].hour)}));
        } else {
          first[_time] = first[_time].add(new core.Duration.new({hours: -dart.notNull(first[_time].hour)}));
          list[$insert](0, first);
        }
      }
      json_data.ProfileStoreData._adjustDuration(list);
    }
    adjustDurations() {
      json_data.ProfileStoreData._adjustDuration(this.listCarbratio);
      json_data.ProfileStoreData._adjustDuration(this.listBasal);
      json_data.ProfileStoreData._adjustDuration(this.listTargetHigh);
      json_data.ProfileStoreData._adjustDuration(this.listTargetLow);
      json_data.ProfileStoreData._adjustDuration(this.listSens);
    }
    static _adjustDuration(list) {
      for (let i = 0; i < dart.notNull(list[$length]); i = i + 1) {
        let end = 86400;
        if (i < dart.notNull(list[$length]) - 1) end = list[$_get](i + 1).timeForCalc;
        list[$_get](i).duration = dart.notNull(end) - dart.notNull(list[$_get](i).timeForCalc);
      }
    }
    static fromJson(name, json, percentage, timeshift, startDate) {
      let ret = new json_data.ProfileStoreData.new(name);
      if (json == null) return ret;
      ret.dia = json_data.JsonData.toDouble(json[$_get]("dia"));
      ret.carbsHr = json_data.JsonData.toInt(json[$_get]("carbs_hr"));
      ret.delay = json_data.JsonData.toInt(json[$_get]("delay"));
      try {
        ret.timezone = new json_data.ProfileTimezone.new(json_data.JsonData.toText(json[$_get]("timezone")));
      } catch (e) {
        let ex = dart.getThrown(e);
        ret.timezone = new json_data.ProfileTimezone.new(globals.Globals.refTimezone);
      }
      if (startDate.year !== 1970 || startDate.day !== 1 || startDate.month !== 1) {
        ret.startDate = startDate;
      } else {
        ret.startDate = json_data.JsonData.toDate(json[$_get]("startDate"));
      }
      ret.units = json_data.JsonData.toText(json[$_get]("units"));
      for (let entry of IterableL().as(json[$_get]("carbratio"))) {
        ret.listCarbratio[$add](json_data.ProfileEntryData.fromJson(MapLOfStringL$dynamic().as(entry), ret.timezone, timeshift, percentage, true));
      }
      json_data.ProfileStoreData._adjust(ret.listCarbratio);
      for (let entry of IterableL().as(json[$_get]("sens"))) {
        ret.listSens[$add](json_data.ProfileEntryData.fromJson(MapLOfStringL$dynamic().as(entry), ret.timezone, timeshift, percentage, true));
      }
      json_data.ProfileStoreData._adjust(ret.listSens);
      ret.maxPrecision = 0;
      for (let entry of IterableL().as(json[$_get]("basal"))) {
        ret.listBasal[$add](json_data.ProfileEntryData.fromJson(MapLOfStringL$dynamic().as(entry), ret.timezone, timeshift, percentage));
        ret.maxPrecision = math.max(intL(), ret.maxPrecision, globals.Globals.decimalPlaces(ret.listBasal[$last].value));
      }
      json_data.ProfileStoreData._adjust(ret.listBasal);
      for (let entry of IterableL().as(json[$_get]("target_low"))) {
        let value = json_data.ProfileEntryData.fromJson(MapLOfStringL$dynamic().as(entry), ret.timezone, timeshift);
        ret.listTargetLow[$add](value);
      }
      json_data.ProfileStoreData._adjust(ret.listTargetLow);
      for (let entry of IterableL().as(json[$_get]("target_high"))) {
        let value = json_data.ProfileEntryData.fromJson(MapLOfStringL$dynamic().as(entry), ret.timezone, timeshift);
        ret.listTargetHigh[$add](value);
      }
      json_data.ProfileStoreData._adjust(ret.listTargetHigh);
      return ret;
    }
    [_importFromTime](time, listSrc, listDst) {
      let date = new date$.Date.new(time.year, time.month, time.day);
      listSrc = listSrc[$where](dart.fn(p => p.endTime(date).isAfter(time), ProfileEntryDataLToboolL()))[$toList]();
      if (dart.test(listSrc[$isEmpty])) return;
      listDst = listDst[$where](dart.fn(p => p.time(date).isBefore(time), ProfileEntryDataLToboolL()))[$toList]();
      if (dart.test(listDst[$isEmpty])) listDst[$add](listSrc[$last].copy);
      listDst[$last].duration = time.difference(listDst[$last].time(date)).inSeconds;
      listSrc[$first].duration = time.difference(listSrc[$first][_time]).inSeconds;
      listSrc[$first][_time] = time;
      listDst[$addAll](listSrc);
    }
    importFromTime(time, src) {
      this[_importFromTime](time, src.listCarbratio, this.listCarbratio);
      this[_importFromTime](time, src.listSens, this.listSens);
      this[_importFromTime](time, src.listBasal, this.listBasal);
      this[_importFromTime](time, src.listTargetLow, this.listTargetLow);
      this[_importFromTime](time, src.listTargetHigh, this.listTargetHigh);
    }
    removeFrom(hour, minute, second, duration) {
      this[_removeFrom](this.listCarbratio, dart.notNull(hour) * 3600 + dart.notNull(minute) * 60 + dart.notNull(second), duration);
      this[_removeFrom](this.listSens, dart.notNull(hour) * 3600 + dart.notNull(minute) * 60 + dart.notNull(second), duration);
      this[_removeFrom](this.listBasal, dart.notNull(hour) * 3600 + dart.notNull(minute) * 60 + dart.notNull(second), duration);
      this[_removeFrom](this.listTargetLow, dart.notNull(hour) * 3600 + dart.notNull(minute) * 60 + dart.notNull(second), duration);
      this[_removeFrom](this.listTargetHigh, dart.notNull(hour) * 3600 + dart.notNull(minute) * 60 + dart.notNull(second), duration);
    }
    [_removeFrom](list, time, duration) {
      for (let i = 0; i < dart.notNull(list[$length]); i = i + 1) {
        let check = list[$_get](i).timeForCalc;
        if (dart.notNull(check) >= dart.notNull(time) && (duration === 0 || dart.notNull(check) < dart.notNull(time) + dart.notNull(duration))) {
          if (i > 0) {
            list[$_get](i - 1).duration = duration === 0 ? 24 * 60 * 60 - dart.notNull(list[$_get](i - 1).timeForCalc) : dart.notNull(duration) + dart.notNull(list[$_get](i).timeForCalc) - dart.notNull(list[$_get](i - 1).timeForCalc);
          }
          list[$removeAt](i);
          i = i - 1;
        }
      }
    }
    addFrom(src, srcStore) {
      this[_addFrom](this.listCarbratio, src, srcStore.listCarbratio);
      this[_addFrom](this.listSens, src, srcStore.listSens);
      this[_addFrom](this.listBasal, src, srcStore.listBasal);
      this[_addFrom](this.listTargetLow, src, srcStore.listTargetLow);
      this[_addFrom](this.listTargetHigh, src, srcStore.listTargetHigh);
    }
    [_addFrom](list, srcProfile, srcList) {
      let t22;
      let timeOfProfile = dart.notNull(srcProfile.startDate.hour) * 3600 + dart.notNull(srcProfile.startDate.minute) * 60 + dart.notNull(srcProfile.startDate.second);
      for (let i = 0; i < dart.notNull(srcList[$length]); i = i + 1) {
        let src = srcList[$_get](i).copy;
        let check = src.timeForCalc;
        if (srcProfile.duration === 0 || dart.notNull(check) < timeOfProfile + dart.notNull(srcProfile.duration)) {
          let duration = 86400 - dart.notNull(check);
          if (i < dart.notNull(srcList[$length]) - 1) duration = dart.notNull(srcList[$_get](i + 1).timeForCalc) - dart.notNull(check);
          if (dart.notNull(check) >= timeOfProfile) {
            if (dart.test(list[$isNotEmpty])) list[$last].duration = dart.notNull(src.timeForCalc) - dart.notNull(list[$last].timeForCalc);
            src.duration = 86400 - dart.notNull(src.timeForCalc);
            list[$add](src);
          } else if (dart.notNull(check) + duration > timeOfProfile) {
            t22 = src;
            t22.duration = dart.notNull(t22.duration) - (timeOfProfile - dart.notNull(src.timeForCalc));
            src.timeForCalc = timeOfProfile;
            list[$add](src);
          }
        }
      }
    }
  };
  (json_data.ProfileStoreData.new = function(name) {
    this[name$3] = null;
    this[dia] = null;
    this[listCarbratio] = JSArrayOfProfileEntryDataL().of([]);
    this[carbsHr] = null;
    this[delay] = null;
    this[maxPrecision] = 0;
    this[listSens] = JSArrayOfProfileEntryDataL().of([]);
    this[timezone] = null;
    this[listBasal] = JSArrayOfProfileEntryDataL().of([]);
    this[listTargetLow] = JSArrayOfProfileEntryDataL().of([]);
    this[listTargetHigh] = JSArrayOfProfileEntryDataL().of([]);
    this[startDate$] = null;
    this[units$] = null;
    json_data.ProfileStoreData.__proto__.new.call(this);
    this.name = name;
    this.timezone = new json_data.ProfileTimezone.new(globals.Globals.refTimezone);
  }).prototype = json_data.ProfileStoreData.prototype;
  dart.addTypeTests(json_data.ProfileStoreData);
  dart.addTypeCaches(json_data.ProfileStoreData);
  dart.setMethodSignature(json_data.ProfileStoreData, () => ({
    __proto__: dart.getMethods(json_data.ProfileStoreData.__proto__),
    [_listSum]: dart.fnType(dart.legacy(core.double), [dart.legacy(core.List$(dart.legacy(json_data.ProfileEntryData)))]),
    list2String: dart.fnType(dart.legacy(core.String), [dart.legacy(core.List$(dart.legacy(json_data.ProfileEntryData)))]),
    adjustDurations: dart.fnType(dart.void, []),
    [_importFromTime]: dart.fnType(dart.void, [dart.legacy(core.DateTime), dart.legacy(core.List$(dart.legacy(json_data.ProfileEntryData))), dart.legacy(core.List$(dart.legacy(json_data.ProfileEntryData)))]),
    importFromTime: dart.fnType(dart.dynamic, [dart.legacy(core.DateTime), dart.legacy(json_data.ProfileStoreData)]),
    removeFrom: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.int)]),
    [_removeFrom]: dart.fnType(dart.void, [dart.legacy(core.List$(dart.legacy(json_data.ProfileEntryData))), dart.legacy(core.int), dart.legacy(core.int)]),
    addFrom: dart.fnType(dart.void, [dart.legacy(json_data.ProfileData), dart.legacy(json_data.ProfileStoreData)]),
    [_addFrom]: dart.fnType(dart.void, [dart.legacy(core.List$(dart.legacy(json_data.ProfileEntryData))), dart.legacy(json_data.ProfileData), dart.legacy(core.List$(dart.legacy(json_data.ProfileEntryData)))])
  }));
  dart.setGetterSignature(json_data.ProfileStoreData, () => ({
    __proto__: dart.getGetters(json_data.ProfileStoreData.__proto__),
    ieBasalSum: dart.legacy(core.double),
    icrSum: dart.legacy(core.double),
    isfSum: dart.legacy(core.double),
    carbRatioPerHour: dart.legacy(core.int),
    hash: dart.legacy(core.String),
    copy: dart.legacy(json_data.ProfileStoreData)
  }));
  dart.setLibraryUri(json_data.ProfileStoreData, L2);
  dart.setFieldSignature(json_data.ProfileStoreData, () => ({
    __proto__: dart.getFields(json_data.ProfileStoreData.__proto__),
    name: dart.fieldType(dart.legacy(core.String)),
    dia: dart.fieldType(dart.legacy(core.double)),
    listCarbratio: dart.fieldType(dart.legacy(core.List$(dart.legacy(json_data.ProfileEntryData)))),
    carbsHr: dart.fieldType(dart.legacy(core.int)),
    delay: dart.fieldType(dart.legacy(core.int)),
    maxPrecision: dart.fieldType(dart.legacy(core.int)),
    listSens: dart.fieldType(dart.legacy(core.List$(dart.legacy(json_data.ProfileEntryData)))),
    timezone: dart.fieldType(dart.legacy(json_data.ProfileTimezone)),
    listBasal: dart.fieldType(dart.legacy(core.List$(dart.legacy(json_data.ProfileEntryData)))),
    listTargetLow: dart.fieldType(dart.legacy(core.List$(dart.legacy(json_data.ProfileEntryData)))),
    listTargetHigh: dart.fieldType(dart.legacy(core.List$(dart.legacy(json_data.ProfileEntryData)))),
    startDate: dart.fieldType(dart.legacy(core.DateTime)),
    units: dart.fieldType(dart.legacy(core.String))
  }));
  var _mixStore = dart.privateName(json_data, "_mixStore");
  var raw$ = dart.privateName(json_data, "ProfileData.raw");
  var id = dart.privateName(json_data, "ProfileData.id");
  var defaultProfile = dart.privateName(json_data, "ProfileData.defaultProfile");
  var enteredBy = dart.privateName(json_data, "ProfileData.enteredBy");
  var duration$ = dart.privateName(json_data, "ProfileData.duration");
  var store = dart.privateName(json_data, "ProfileData.store");
  var startDate$0 = dart.privateName(json_data, "ProfileData.startDate");
  var units$0 = dart.privateName(json_data, "ProfileData.units");
  var createdAt = dart.privateName(json_data, "ProfileData.createdAt");
  var maxPrecision$ = dart.privateName(json_data, "ProfileData.maxPrecision");
  var isFromNS = dart.privateName(json_data, "ProfileData.isFromNS");
  json_data.ProfileData = class ProfileData extends json_data.JsonData {
    get raw() {
      return this[raw$];
    }
    set raw(value) {
      this[raw$] = value;
    }
    get id() {
      return this[id];
    }
    set id(value) {
      this[id] = value;
    }
    get defaultProfile() {
      return this[defaultProfile];
    }
    set defaultProfile(value) {
      this[defaultProfile] = value;
    }
    get enteredBy() {
      return this[enteredBy];
    }
    set enteredBy(value) {
      this[enteredBy] = value;
    }
    get duration() {
      return this[duration$];
    }
    set duration(value) {
      this[duration$] = value;
    }
    get store() {
      return this[store];
    }
    set store(value) {
      this[store] = value;
    }
    get startDate() {
      return this[startDate$0];
    }
    set startDate(value) {
      this[startDate$0] = value;
    }
    get units() {
      return this[units$0];
    }
    set units(value) {
      this[units$0] = value;
    }
    get createdAt() {
      return this[createdAt];
    }
    set createdAt(value) {
      this[createdAt] = value;
    }
    get maxPrecision() {
      return this[maxPrecision$];
    }
    set maxPrecision(value) {
      this[maxPrecision$] = value;
    }
    get isFromNS() {
      return this[isFromNS];
    }
    set isFromNS(value) {
      this[isFromNS] = value;
    }
    get storeHash() {
      return this.store[$keys][$reduce](dart.fn((value, element) => dart.notNull(value) + dart.notNull(this.store[$_get](element).hash), StringLAndStringLToStringL()));
    }
    get copy() {
      let t22;
      let ret = (t22 = new json_data.ProfileData.new(), (() => {
        t22.raw = this.raw;
        t22.duration = this.duration;
        t22.id = this.id;
        t22.defaultProfile = this.defaultProfile;
        t22.startDate = this.startDate;
        t22.units = this.units;
        t22.createdAt = this.createdAt;
        t22.maxPrecision = this.maxPrecision;
        t22.isFromNS = false;
        t22.enteredBy = this.enteredBy;
        return t22;
      })());
      ret.store = new (IdentityMapOfStringL$ProfileStoreDataL()).new();
      for (let key of this.store[$keys]) {
        ret.store[$_set](key, this.store[$_get](key).copy);
      }
      return ret;
    }
    get mills() {
      let t22;
      t22 = this.startDate.millisecondsSinceEpoch;
      return t22 == null ? 0 : t22;
    }
    get current() {
      return this.store[$_get](this.defaultProfile);
    }
    static fromJson(json, opts) {
      let isFromNS = opts && 'isFromNS' in opts ? opts.isFromNS : false;
      let ret = new json_data.ProfileData.new();
      ret.raw = json;
      ret.isFromNS = isFromNS;
      if (json == null) return ret;
      ret.id = StringL().as(json[$_get]("int"));
      ret.enteredBy = json_data.JsonData.toText(json[$_get]("enteredBy"));
      ret.defaultProfile = StringL().as(json[$_get]("defaultProfile"));
      ret.startDate = json_data.JsonData.toDate(json[$_get]("startDate"));
      let timeshift = json_data.JsonData.toInt(json[$_get]("timeshift"));
      ret.units = json_data.JsonData.toText(json[$_get]("units"));
      ret.createdAt = json_data.JsonData.toDate(json[$_get]("created_at"));
      ret.duration = dart.notNull(json_data.JsonData.toInt(json[$_get]("duration"))) * 60;
      let src = MapLOfStringL$dynamic().as(json[$_get]("store"));
      ret.maxPrecision = 0;
      for (let key of src[$keys]) {
        let temp = src[$entries][$firstWhere](dart.fn(e => e.key == key, MapEntryLOfStringL$dynamicToboolL()), {orElse: dart.fn(() => null, VoidToNullN())});
        if (temp != null) {
          let percentage = json_data.JsonData.toDouble(json[$_get]("percentage"));
          if (percentage == null || percentage === 0.0) {
            percentage = 1.0;
          } else {
            percentage = dart.notNull(percentage) / 100.0;
          }
          ret.store[$_set](key, json_data.ProfileStoreData.fromJson(key, MapLOfStringL$dynamic().as(dart.dload(temp, 'value')), percentage, timeshift, ret.startDate));
          ret.maxPrecision = math.max(intL(), ret.maxPrecision, ret.store[$_get](key).maxPrecision);
        }
      }
      return ret;
    }
    includeTreatment(t) {
      if (dart.test(t.isTempTarget) && dart.notNull(t.duration) > 0) {
        let time = ((dart.notNull(t.createdAt.hour) + dart.notNull(t.timeshift)) * 60 + dart.notNull(t.createdAt.minute)) * 60;
        for (let data of this.store[$values]) {
          this[_mixStore](data.listTargetHigh, data.timezone, time, t.duration, t.targetTop);
          this[_mixStore](data.listTargetLow, data.timezone, time, t.duration, t.targetBottom);
          data.listTargetHigh[$sort](dart.fn((a, b) => a.timeForCalc[$compareTo](b.timeForCalc), ProfileEntryDataLAndProfileEntryDataLTointL()));
          data.listTargetLow[$sort](dart.fn((a, b) => a.timeForCalc[$compareTo](b.timeForCalc), ProfileEntryDataLAndProfileEntryDataLTointL()));
        }
      }
    }
    [_mixStore](list, timezone, time, duration, value) {
      let t22, t22$;
      let entry = new json_data.ProfileEntryData.new(timezone);
      entry.timeForCalc = time;
      entry.duration = duration;
      entry.value = value;
      if (dart.test(list[$isEmpty])) {
        let e = new json_data.ProfileEntryData.new(timezone);
        e.timeForCalc = 0;
        e.duration = time;
        list[$add](e);
        list[$add](entry);
        e = new json_data.ProfileEntryData.new(timezone);
        e.timeForCalc = dart.notNull(time) + dart.notNull(duration);
        e.duration = 86400 - dart.notNull(e.timeForCalc);
        list[$add](e);
        return;
      }
      let idx = list[$indexWhere](dart.fn(e => dart.notNull(e.timeForCalc) >= dart.notNull(time), ProfileEntryDataLToboolL()));
      if (dart.notNull(idx) < 0) {
        idx = list[$indexWhere](dart.fn(e => dart.notNull(e.timeForCalc) + dart.notNull(e.duration) >= dart.notNull(time), ProfileEntryDataLToboolL()));
        if (dart.notNull(idx) < 0) {
          list[$last].duration = dart.notNull(time) - dart.notNull(list[$last].timeForCalc);
          if (dart.notNull(list[$last].duration) < 0) list[$removeLast]();
          entry.duration = 86400 - dart.notNull(entry.timeForCalc);
          list[$add](entry);
          return;
        }
        list[$insert](idx, entry);
        if (dart.notNull(list[$_get](dart.notNull(idx) + 1).timeForCalc) < dart.notNull(entry.timeForCalc)) {
          let e = list[$_get](dart.notNull(idx) + 1).copy;
          e.duration = dart.notNull(entry.timeForCalc) - dart.notNull(e.timeForCalc);
          list[$insert](idx, e);
          idx = dart.notNull(idx) + 1;
        }
        if (dart.notNull(entry.timeForCalc) + dart.notNull(entry.duration) < dart.notNull(list[$_get](dart.notNull(idx) + 1).timeForCalc)) {
          let e = list[$_get](dart.notNull(idx) - 1).copy;
          e.timeForCalc = dart.notNull(entry.timeForCalc) + dart.notNull(entry.duration);
          e.duration = dart.notNull(list[$_get](dart.notNull(idx) + 1).timeForCalc) - dart.notNull(e.timeForCalc);
          list[$insert](dart.notNull(idx) + 1, e);
          return;
        } else if (dart.notNull(entry.timeForCalc) + dart.notNull(entry.duration) > dart.notNull(list[$_get](dart.notNull(idx) + 1).timeForCalc)) {
          t22 = list[$_get](dart.notNull(idx) + 1);
          t22.duration = dart.notNull(t22.duration) - (dart.notNull(entry.timeForCalc) + dart.notNull(entry.duration) - dart.notNull(list[$_get](dart.notNull(idx) + 1).timeForCalc));
          list[$_get](dart.notNull(idx) + 1).timeForCalc = dart.notNull(entry.timeForCalc) + dart.notNull(entry.duration);
        }
      } else if (dart.notNull(idx) > 0) {
        list[$_get](dart.notNull(idx) - 1).duration = dart.notNull(time) - dart.notNull(list[$_get](dart.notNull(idx) - 1).timeForCalc);
        let nextIdx = list[$indexWhere](dart.fn(e => dart.notNull(e.timeForCalc) + dart.notNull(e.duration) >= dart.notNull(time), ProfileEntryDataLToboolL()));
        while (dart.notNull(nextIdx) > dart.notNull(idx) + 1) {
          list[$removeRange](idx, 1);
          nextIdx = list[$indexWhere](dart.fn(e => dart.notNull(e.timeForCalc) + dart.notNull(e.duration) >= dart.notNull(time), ProfileEntryDataLToboolL()));
        }
        list[$insert](idx, entry);
        if (dart.notNull(list[$_get](dart.notNull(idx) + 1).timeForCalc) < dart.notNull(entry.timeForCalc)) {
          let e = list[$_get](dart.notNull(idx) + 1).copy;
          e.duration = dart.notNull(entry.timeForCalc) - dart.notNull(e.timeForCalc);
          list[$insert](idx, e);
          idx = dart.notNull(idx) + 1;
        }
        if (dart.notNull(entry.timeForCalc) + dart.notNull(entry.duration) < dart.notNull(list[$_get](dart.notNull(idx) + 1).timeForCalc)) {
          let e = list[$_get](dart.notNull(idx) - 1).copy;
          e.timeForCalc = dart.notNull(entry.timeForCalc) + dart.notNull(entry.duration);
          e.duration = dart.notNull(list[$_get](dart.notNull(idx) + 1).timeForCalc) - dart.notNull(e.timeForCalc);
          list[$insert](dart.notNull(idx) + 1, e);
          return;
        } else if (dart.notNull(entry.timeForCalc) + dart.notNull(entry.duration) > dart.notNull(list[$_get](dart.notNull(idx) + 1).timeForCalc)) {
          t22$ = list[$_get](dart.notNull(idx) + 1);
          t22$.duration = dart.notNull(t22$.duration) - (dart.notNull(entry.timeForCalc) + dart.notNull(entry.duration) - dart.notNull(list[$_get](dart.notNull(idx) + 1).timeForCalc));
          list[$_get](dart.notNull(idx) + 1).timeForCalc = dart.notNull(entry.timeForCalc) + dart.notNull(entry.duration);
        }
      }
    }
    mixWith(src) {
      for (let key of this.store[$keys]) {
        let srcKey = key;
        if (!dart.test(src.store[$containsKey](srcKey))) srcKey = src.defaultProfile;
        if (dart.test(src.store[$containsKey](srcKey))) {
          this.store[$_get](key).removeFrom(src.startDate.hour, src.startDate.minute, src.startDate.second, src.duration);
          this.store[$_get](key).addFrom(src, src.store[$_get](srcKey));
        }
      }
    }
  };
  (json_data.ProfileData.new = function() {
    this[raw$] = null;
    this[id] = null;
    this[defaultProfile] = null;
    this[enteredBy] = null;
    this[duration$] = null;
    this[store] = new (IdentityMapOfStringL$ProfileStoreDataL()).new();
    this[startDate$0] = null;
    this[units$0] = null;
    this[createdAt] = null;
    this[maxPrecision$] = 0;
    this[isFromNS] = false;
    json_data.ProfileData.__proto__.new.call(this);
    ;
  }).prototype = json_data.ProfileData.prototype;
  dart.addTypeTests(json_data.ProfileData);
  dart.addTypeCaches(json_data.ProfileData);
  dart.setMethodSignature(json_data.ProfileData, () => ({
    __proto__: dart.getMethods(json_data.ProfileData.__proto__),
    includeTreatment: dart.fnType(dart.void, [dart.legacy(json_data.TreatmentData)]),
    [_mixStore]: dart.fnType(dart.void, [dart.legacy(core.List$(dart.legacy(json_data.ProfileEntryData))), dart.legacy(json_data.ProfileTimezone), dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.double)]),
    mixWith: dart.fnType(dart.void, [dart.legacy(json_data.ProfileData)])
  }));
  dart.setGetterSignature(json_data.ProfileData, () => ({
    __proto__: dart.getGetters(json_data.ProfileData.__proto__),
    storeHash: dart.legacy(core.String),
    copy: dart.legacy(json_data.ProfileData),
    mills: dart.legacy(core.int),
    current: dart.legacy(json_data.ProfileStoreData)
  }));
  dart.setLibraryUri(json_data.ProfileData, L2);
  dart.setFieldSignature(json_data.ProfileData, () => ({
    __proto__: dart.getFields(json_data.ProfileData.__proto__),
    raw: dart.fieldType(dart.dynamic),
    id: dart.fieldType(dart.legacy(core.String)),
    defaultProfile: dart.fieldType(dart.legacy(core.String)),
    enteredBy: dart.fieldType(dart.legacy(core.String)),
    duration: dart.fieldType(dart.legacy(core.int)),
    store: dart.fieldType(dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(json_data.ProfileStoreData)))),
    startDate: dart.fieldType(dart.legacy(core.DateTime)),
    units: dart.fieldType(dart.legacy(core.String)),
    createdAt: dart.fieldType(dart.legacy(core.DateTime)),
    maxPrecision: dart.fieldType(dart.legacy(core.int)),
    isFromNS: dart.fieldType(dart.legacy(core.bool))
  }));
  var profile = dart.privateName(json_data, "BoluscalcData.profile");
  var notes = dart.privateName(json_data, "BoluscalcData.notes");
  var eventTime = dart.privateName(json_data, "BoluscalcData.eventTime");
  var targetBGLow = dart.privateName(json_data, "BoluscalcData.targetBGLow");
  var targetBGHigh = dart.privateName(json_data, "BoluscalcData.targetBGHigh");
  var isf = dart.privateName(json_data, "BoluscalcData.isf");
  var ic = dart.privateName(json_data, "BoluscalcData.ic");
  var iob = dart.privateName(json_data, "BoluscalcData.iob");
  var bolusIob = dart.privateName(json_data, "BoluscalcData.bolusIob");
  var basalIob = dart.privateName(json_data, "BoluscalcData.basalIob");
  var bolusIobUsed = dart.privateName(json_data, "BoluscalcData.bolusIobUsed");
  var basalIobUsed = dart.privateName(json_data, "BoluscalcData.basalIobUsed");
  var bg = dart.privateName(json_data, "BoluscalcData.bg");
  var insulinBg = dart.privateName(json_data, "BoluscalcData.insulinBg");
  var insulinBgUsed = dart.privateName(json_data, "BoluscalcData.insulinBgUsed");
  var bgDiff = dart.privateName(json_data, "BoluscalcData.bgDiff");
  var insulinCarbs = dart.privateName(json_data, "BoluscalcData.insulinCarbs");
  var carbs = dart.privateName(json_data, "BoluscalcData.carbs");
  var cob = dart.privateName(json_data, "BoluscalcData.cob");
  var cobUsed = dart.privateName(json_data, "BoluscalcData.cobUsed");
  var insulinCob = dart.privateName(json_data, "BoluscalcData.insulinCob");
  var otherCorrection = dart.privateName(json_data, "BoluscalcData.otherCorrection");
  var insulinSuperBolus = dart.privateName(json_data, "BoluscalcData.insulinSuperBolus");
  var insulinTrend = dart.privateName(json_data, "BoluscalcData.insulinTrend");
  var insulin$ = dart.privateName(json_data, "BoluscalcData.insulin");
  var superBolusUsed = dart.privateName(json_data, "BoluscalcData.superBolusUsed");
  var trendUsed = dart.privateName(json_data, "BoluscalcData.trendUsed");
  var trend = dart.privateName(json_data, "BoluscalcData.trend");
  var ttUsed = dart.privateName(json_data, "BoluscalcData.ttUsed");
  var NSClientId = dart.privateName(json_data, "BoluscalcData.NSClientId");
  json_data.BoluscalcData = class BoluscalcData extends json_data.JsonData {
    get profile() {
      return this[profile];
    }
    set profile(value) {
      this[profile] = value;
    }
    get notes() {
      return this[notes];
    }
    set notes(value) {
      this[notes] = value;
    }
    get eventTime() {
      return this[eventTime];
    }
    set eventTime(value) {
      this[eventTime] = value;
    }
    get targetBGLow() {
      return this[targetBGLow];
    }
    set targetBGLow(value) {
      this[targetBGLow] = value;
    }
    get targetBGHigh() {
      return this[targetBGHigh];
    }
    set targetBGHigh(value) {
      this[targetBGHigh] = value;
    }
    get isf() {
      return this[isf];
    }
    set isf(value) {
      this[isf] = value;
    }
    get ic() {
      return this[ic];
    }
    set ic(value) {
      this[ic] = value;
    }
    get iob() {
      return this[iob];
    }
    set iob(value) {
      this[iob] = value;
    }
    get bolusIob() {
      return this[bolusIob];
    }
    set bolusIob(value) {
      this[bolusIob] = value;
    }
    get basalIob() {
      return this[basalIob];
    }
    set basalIob(value) {
      this[basalIob] = value;
    }
    get bolusIobUsed() {
      return this[bolusIobUsed];
    }
    set bolusIobUsed(value) {
      this[bolusIobUsed] = value;
    }
    get basalIobUsed() {
      return this[basalIobUsed];
    }
    set basalIobUsed(value) {
      this[basalIobUsed] = value;
    }
    get bg() {
      return this[bg];
    }
    set bg(value) {
      this[bg] = value;
    }
    get insulinBg() {
      return this[insulinBg];
    }
    set insulinBg(value) {
      this[insulinBg] = value;
    }
    get insulinBgUsed() {
      return this[insulinBgUsed];
    }
    set insulinBgUsed(value) {
      this[insulinBgUsed] = value;
    }
    get bgDiff() {
      return this[bgDiff];
    }
    set bgDiff(value) {
      this[bgDiff] = value;
    }
    get insulinCarbs() {
      return this[insulinCarbs];
    }
    set insulinCarbs(value) {
      this[insulinCarbs] = value;
    }
    get carbs() {
      return this[carbs];
    }
    set carbs(value) {
      this[carbs] = value;
    }
    get cob() {
      return this[cob];
    }
    set cob(value) {
      this[cob] = value;
    }
    get cobUsed() {
      return this[cobUsed];
    }
    set cobUsed(value) {
      this[cobUsed] = value;
    }
    get insulinCob() {
      return this[insulinCob];
    }
    set insulinCob(value) {
      this[insulinCob] = value;
    }
    get otherCorrection() {
      return this[otherCorrection];
    }
    set otherCorrection(value) {
      this[otherCorrection] = value;
    }
    get insulinSuperBolus() {
      return this[insulinSuperBolus];
    }
    set insulinSuperBolus(value) {
      this[insulinSuperBolus] = value;
    }
    get insulinTrend() {
      return this[insulinTrend];
    }
    set insulinTrend(value) {
      this[insulinTrend] = value;
    }
    get insulin() {
      return this[insulin$];
    }
    set insulin(value) {
      this[insulin$] = value;
    }
    get superBolusUsed() {
      return this[superBolusUsed];
    }
    set superBolusUsed(value) {
      this[superBolusUsed] = value;
    }
    get trendUsed() {
      return this[trendUsed];
    }
    set trendUsed(value) {
      this[trendUsed] = value;
    }
    get trend() {
      return this[trend];
    }
    set trend(value) {
      this[trend] = value;
    }
    get ttUsed() {
      return this[ttUsed];
    }
    set ttUsed(value) {
      this[ttUsed] = value;
    }
    get NSClientId() {
      return this[NSClientId];
    }
    set NSClientId(value) {
      this[NSClientId] = value;
    }
    get copy() {
      let t22;
      t22 = new json_data.BoluscalcData.new();
      return (() => {
        t22.profile = this.profile;
        t22.notes = this.notes;
        t22.eventTime = this.eventTime;
        t22.targetBGLow = this.targetBGLow;
        t22.targetBGHigh = this.targetBGHigh;
        t22.isf = this.isf;
        t22.ic = this.ic;
        t22.iob = this.iob;
        t22.bolusIob = this.bolusIob;
        t22.basalIob = this.basalIob;
        t22.bolusIobUsed = this.bolusIobUsed;
        t22.basalIobUsed = this.basalIobUsed;
        t22.bg = this.bg;
        t22.insulinBg = this.insulinBg;
        t22.insulinBgUsed = this.insulinBgUsed;
        t22.bgDiff = this.bgDiff;
        t22.insulinCarbs = this.insulinCarbs;
        t22.carbs = this.carbs;
        t22.cob = this.cob;
        t22.cobUsed = this.cobUsed;
        t22.insulinCob = this.insulinCob;
        t22.otherCorrection = this.otherCorrection;
        t22.insulinSuperBolus = this.insulinSuperBolus;
        t22.insulinTrend = this.insulinTrend;
        t22.insulin = this.insulin;
        t22.superBolusUsed = this.superBolusUsed;
        t22.trendUsed = this.trendUsed;
        t22.trend = this.trend;
        t22.ttUsed = this.ttUsed;
        t22.NSClientId = this.NSClientId;
        return t22;
      })();
    }
    static fromJson(json) {
      let ret = new json_data.BoluscalcData.new();
      if (json == null) return ret;
      ret.profile = StringL().as(json[$_get]("profile"));
      ret.notes = StringL().as(json[$_get]("notes"));
      ret.eventTime = json_data.JsonData.toDate(json[$_get]("eventTime"));
      ret.targetBGLow = json_data.JsonData.toInt(json[$_get]("targetBGLow"));
      ret.targetBGHigh = json_data.JsonData.toInt(json[$_get]("targetBGHigh"));
      ret.isf = json_data.JsonData.toInt(json[$_get]("isf"));
      ret.ic = json_data.JsonData.toInt(json[$_get]("ic"));
      ret.iob = json_data.JsonData.toDouble(json[$_get]("iob"));
      ret.bolusIob = json_data.JsonData.toDouble(json[$_get]("bolusIob"));
      ret.basalIob = json_data.JsonData.toDouble(json[$_get]("basalIob"));
      ret.bolusIobUsed = json_data.JsonData.toBool(json[$_get]("bolusIobUsed"));
      ret.basalIobUsed = json_data.JsonData.toBool(json[$_get]("basalIobUsed"));
      ret.bg = json_data.JsonData.toInt(json[$_get]("bg"));
      ret.insulinBg = json_data.JsonData.toDouble(json[$_get]("insulinBg"));
      ret.insulinBgUsed = json_data.JsonData.toBool(json[$_get]("insulinBgUsed"));
      ret.bgDiff = json_data.JsonData.toInt(json[$_get]("bgdiff"));
      ret.insulinCarbs = json_data.JsonData.toDouble(json[$_get]("insulincarbs"));
      ret.carbs = json_data.JsonData.toDouble(json[$_get]("carbs"));
      ret.cob = json_data.JsonData.toDouble(json[$_get]("cob"));
      ret.cobUsed = json_data.JsonData.toBool(json[$_get]("cobused"));
      ret.insulinCob = json_data.JsonData.toDouble(json[$_get]("insulincob"));
      ret.otherCorrection = json_data.JsonData.toDouble(json[$_get]("othercorrection"));
      ret.insulinSuperBolus = json_data.JsonData.toDouble(json[$_get]("insulinsuperbolus"));
      ret.insulinTrend = json_data.JsonData.toDouble(json[$_get]("insulintrend"));
      ret.insulin = json_data.JsonData.toDouble(json[$_get]("insulin"));
      if (ret.insulin === 0.0) ret.insulin = json_data.JsonData.toDouble(json[$_get]("enteredinsulin"));
      ret.superBolusUsed = json_data.JsonData.toBool(json[$_get]("superbolusused"));
      ret.trendUsed = json_data.JsonData.toBool(json[$_get]("trendused"));
      ret.trend = json_data.JsonData.toText(json[$_get]("trend"));
      ret.ttUsed = json_data.JsonData.toBool(json[$_get]("ttused"));
      ret.NSClientId = json_data.JsonData.toText(json[$_get]("NSCLIENT_ID"));
      return ret;
    }
    slice(src, dst, f) {
      let t22, t22$, t22$0, t22$1, t22$2, t22$3, t22$4, t22$5, t22$6, t22$7, t22$8, t22$9, t22$10, t22$11, t22$12, t22$13, t22$14, t22$15, t22$16, t22$17, t22$18, t22$19, t22$20, t22$21, t22$22, t22$23, t22$24, t22$25, t22$26, t22$27, t22$28, t22$29, t22$30, t22$31, t22$32, t22$33, t22$34, t22$35, t22$36, t22$37;
      this.isf = globals.Globals.calc((t22$ = (t22 = src, t22 == null ? null : t22.isf), t22$ == null ? null : t22$[$toDouble]()), (t22$1 = (t22$0 = dst, t22$0 == null ? null : t22$0.isf), t22$1 == null ? null : t22$1[$toDouble]()), f)[$toInt]();
      this.ic = globals.Globals.calc((t22$3 = (t22$2 = src, t22$2 == null ? null : t22$2.ic), t22$3 == null ? null : t22$3[$toDouble]()), (t22$5 = (t22$4 = dst, t22$4 == null ? null : t22$4.ic), t22$5 == null ? null : t22$5[$toDouble]()), f)[$toInt]();
      this.iob = globals.Globals.calc((t22$6 = src, t22$6 == null ? null : t22$6.iob), (t22$7 = dst, t22$7 == null ? null : t22$7.iob), f);
      this.bolusIob = globals.Globals.calc((t22$8 = src, t22$8 == null ? null : t22$8.bolusIob), (t22$9 = dst, t22$9 == null ? null : t22$9.bolusIob), f);
      this.basalIob = globals.Globals.calc((t22$10 = src, t22$10 == null ? null : t22$10.basalIob), (t22$11 = dst, t22$11 == null ? null : t22$11.basalIob), f);
      this.bg = globals.Globals.calc((t22$13 = (t22$12 = src, t22$12 == null ? null : t22$12.bg), t22$13 == null ? null : t22$13[$toDouble]()), (t22$15 = (t22$14 = dst, t22$14 == null ? null : t22$14.bg), t22$15 == null ? null : t22$15[$toDouble]()), f)[$toInt]();
      this.insulinBg = globals.Globals.calc((t22$16 = src, t22$16 == null ? null : t22$16.insulinBg), (t22$17 = dst, t22$17 == null ? null : t22$17.insulinBg), f);
      this.bgDiff = globals.Globals.calc((t22$19 = (t22$18 = src, t22$18 == null ? null : t22$18.bgDiff), t22$19 == null ? null : t22$19[$toDouble]()), (t22$21 = (t22$20 = dst, t22$20 == null ? null : t22$20.bgDiff), t22$21 == null ? null : t22$21[$toDouble]()), f)[$toInt]();
      this.insulinCarbs = globals.Globals.calc((t22$22 = src, t22$22 == null ? null : t22$22.insulinCarbs), (t22$23 = dst, t22$23 == null ? null : t22$23.insulinCarbs), f);
      this.carbs = globals.Globals.calc((t22$24 = src, t22$24 == null ? null : t22$24.carbs), (t22$25 = dst, t22$25 == null ? null : t22$25.carbs), f);
      this.cob = globals.Globals.calc((t22$26 = src, t22$26 == null ? null : t22$26.cob), (t22$27 = dst, t22$27 == null ? null : t22$27.cob), f);
      this.insulinCob = globals.Globals.calc((t22$28 = src, t22$28 == null ? null : t22$28.insulinCob), (t22$29 = dst, t22$29 == null ? null : t22$29.insulinCob), f);
      this.otherCorrection = globals.Globals.calc((t22$30 = src, t22$30 == null ? null : t22$30.otherCorrection), (t22$31 = dst, t22$31 == null ? null : t22$31.otherCorrection), f);
      this.insulinSuperBolus = globals.Globals.calc((t22$32 = src, t22$32 == null ? null : t22$32.insulinSuperBolus), (t22$33 = dst, t22$33 == null ? null : t22$33.insulinSuperBolus), f);
      this.insulinTrend = globals.Globals.calc((t22$34 = src, t22$34 == null ? null : t22$34.insulinTrend), (t22$35 = dst, t22$35 == null ? null : t22$35.insulinTrend), f);
      this.insulin = globals.Globals.calc((t22$36 = src, t22$36 == null ? null : t22$36.insulin), (t22$37 = dst, t22$37 == null ? null : t22$37.insulin), f);
    }
  };
  (json_data.BoluscalcData.new = function() {
    this[profile] = null;
    this[notes] = null;
    this[eventTime] = null;
    this[targetBGLow] = null;
    this[targetBGHigh] = null;
    this[isf] = null;
    this[ic] = null;
    this[iob] = null;
    this[bolusIob] = null;
    this[basalIob] = null;
    this[bolusIobUsed] = null;
    this[basalIobUsed] = null;
    this[bg] = null;
    this[insulinBg] = null;
    this[insulinBgUsed] = null;
    this[bgDiff] = null;
    this[insulinCarbs] = null;
    this[carbs] = null;
    this[cob] = null;
    this[cobUsed] = null;
    this[insulinCob] = null;
    this[otherCorrection] = null;
    this[insulinSuperBolus] = null;
    this[insulinTrend] = null;
    this[insulin$] = null;
    this[superBolusUsed] = null;
    this[trendUsed] = null;
    this[trend] = null;
    this[ttUsed] = null;
    this[NSClientId] = null;
    json_data.BoluscalcData.__proto__.new.call(this);
    ;
  }).prototype = json_data.BoluscalcData.prototype;
  dart.addTypeTests(json_data.BoluscalcData);
  dart.addTypeCaches(json_data.BoluscalcData);
  dart.setMethodSignature(json_data.BoluscalcData, () => ({
    __proto__: dart.getMethods(json_data.BoluscalcData.__proto__),
    slice: dart.fnType(dart.void, [dart.legacy(json_data.BoluscalcData), dart.legacy(json_data.BoluscalcData), dart.legacy(core.double)])
  }));
  dart.setGetterSignature(json_data.BoluscalcData, () => ({
    __proto__: dart.getGetters(json_data.BoluscalcData.__proto__),
    copy: dart.legacy(json_data.BoluscalcData)
  }));
  dart.setLibraryUri(json_data.BoluscalcData, L2);
  dart.setFieldSignature(json_data.BoluscalcData, () => ({
    __proto__: dart.getFields(json_data.BoluscalcData.__proto__),
    profile: dart.fieldType(dart.legacy(core.String)),
    notes: dart.fieldType(dart.legacy(core.String)),
    eventTime: dart.fieldType(dart.legacy(core.DateTime)),
    targetBGLow: dart.fieldType(dart.legacy(core.int)),
    targetBGHigh: dart.fieldType(dart.legacy(core.int)),
    isf: dart.fieldType(dart.legacy(core.int)),
    ic: dart.fieldType(dart.legacy(core.int)),
    iob: dart.fieldType(dart.legacy(core.double)),
    bolusIob: dart.fieldType(dart.legacy(core.double)),
    basalIob: dart.fieldType(dart.legacy(core.double)),
    bolusIobUsed: dart.fieldType(dart.legacy(core.bool)),
    basalIobUsed: dart.fieldType(dart.legacy(core.bool)),
    bg: dart.fieldType(dart.legacy(core.int)),
    insulinBg: dart.fieldType(dart.legacy(core.double)),
    insulinBgUsed: dart.fieldType(dart.legacy(core.bool)),
    bgDiff: dart.fieldType(dart.legacy(core.int)),
    insulinCarbs: dart.fieldType(dart.legacy(core.double)),
    carbs: dart.fieldType(dart.legacy(core.double)),
    cob: dart.fieldType(dart.legacy(core.double)),
    cobUsed: dart.fieldType(dart.legacy(core.bool)),
    insulinCob: dart.fieldType(dart.legacy(core.double)),
    otherCorrection: dart.fieldType(dart.legacy(core.double)),
    insulinSuperBolus: dart.fieldType(dart.legacy(core.double)),
    insulinTrend: dart.fieldType(dart.legacy(core.double)),
    insulin: dart.fieldType(dart.legacy(core.double)),
    superBolusUsed: dart.fieldType(dart.legacy(core.bool)),
    trendUsed: dart.fieldType(dart.legacy(core.bool)),
    trend: dart.fieldType(dart.legacy(core.String)),
    ttUsed: dart.fieldType(dart.legacy(core.bool)),
    NSClientId: dart.fieldType(dart.legacy(core.String))
  }));
  var insulin$0 = dart.privateName(json_data, "InsulinInjectionData.insulin");
  var units$1 = dart.privateName(json_data, "InsulinInjectionData.units");
  json_data.InsulinInjectionData = class InsulinInjectionData extends json_data.JsonData {
    get insulin() {
      return this[insulin$0];
    }
    set insulin(value) {
      this[insulin$0] = value;
    }
    get units() {
      return this[units$1];
    }
    set units(value) {
      this[units$1] = value;
    }
    get copy() {
      let t22;
      t22 = new json_data.InsulinInjectionData.new();
      return (() => {
        t22.insulin = this.insulin;
        t22.units = this.units;
        return t22;
      })();
    }
    static fromJson(g, json) {
      let ret = new json_data.InsulinInjectionData.new();
      if (json == null) return ret;
      ret.insulin = json_data.JsonData.toText(json[$_get]("insulin"));
      ret.units = json_data.JsonData.toDouble(json[$_get]("units"));
      return ret;
    }
  };
  (json_data.InsulinInjectionData.new = function() {
    this[insulin$0] = null;
    this[units$1] = null;
    json_data.InsulinInjectionData.__proto__.new.call(this);
    ;
  }).prototype = json_data.InsulinInjectionData.prototype;
  dart.addTypeTests(json_data.InsulinInjectionData);
  dart.addTypeCaches(json_data.InsulinInjectionData);
  dart.setGetterSignature(json_data.InsulinInjectionData, () => ({
    __proto__: dart.getGetters(json_data.InsulinInjectionData.__proto__),
    copy: dart.legacy(json_data.InsulinInjectionData)
  }));
  dart.setLibraryUri(json_data.InsulinInjectionData, L2);
  dart.setFieldSignature(json_data.InsulinInjectionData, () => ({
    __proto__: dart.getFields(json_data.InsulinInjectionData.__proto__),
    insulin: dart.fieldType(dart.legacy(core.String)),
    units: dart.fieldType(dart.legacy(core.double))
  }));
  var _carbs = dart.privateName(json_data, "_carbs");
  var _key600 = dart.privateName(json_data, "_key600");
  var _from = dart.privateName(json_data, "_from");
  var _t = dart.privateName(json_data, "_t");
  var raw$0 = dart.privateName(json_data, "TreatmentData.raw");
  var id$ = dart.privateName(json_data, "TreatmentData.id");
  var eventType = dart.privateName(json_data, "TreatmentData.eventType");
  var duration$0 = dart.privateName(json_data, "TreatmentData.duration");
  var timeshift = dart.privateName(json_data, "TreatmentData.timeshift");
  var createdAt$ = dart.privateName(json_data, "TreatmentData.createdAt");
  var enteredBy$ = dart.privateName(json_data, "TreatmentData.enteredBy");
  var NSClientId$ = dart.privateName(json_data, "TreatmentData.NSClientId");
  var insulin$1 = dart.privateName(json_data, "TreatmentData.insulin");
  var microbolus = dart.privateName(json_data, "TreatmentData.microbolus");
  var insulinInjections = dart.privateName(json_data, "TreatmentData.insulinInjections");
  var splitExt = dart.privateName(json_data, "TreatmentData.splitExt");
  var splitNow = dart.privateName(json_data, "TreatmentData.splitNow");
  var isSMB = dart.privateName(json_data, "TreatmentData.isSMB");
  var duplicates = dart.privateName(json_data, "TreatmentData.duplicates");
  var pumpId = dart.privateName(json_data, "TreatmentData.pumpId");
  var glucose = dart.privateName(json_data, "TreatmentData.glucose");
  var glucoseType = dart.privateName(json_data, "TreatmentData.glucoseType");
  var boluscalc = dart.privateName(json_data, "TreatmentData.boluscalc");
  var notes$ = dart.privateName(json_data, "TreatmentData.notes");
  var reason = dart.privateName(json_data, "TreatmentData.reason");
  var targetTop = dart.privateName(json_data, "TreatmentData.targetTop");
  var targetBottom = dart.privateName(json_data, "TreatmentData.targetBottom");
  var isECarb = dart.privateName(json_data, "TreatmentData.isECarb");
  json_data.TreatmentData = class TreatmentData extends json_data.JsonData {
    get raw() {
      return this[raw$0];
    }
    set raw(value) {
      this[raw$0] = value;
    }
    get id() {
      return this[id$];
    }
    set id(value) {
      this[id$] = value;
    }
    get eventType() {
      return this[eventType];
    }
    set eventType(value) {
      this[eventType] = value;
    }
    get duration() {
      return this[duration$0];
    }
    set duration(value) {
      this[duration$0] = value;
    }
    get timeshift() {
      return this[timeshift];
    }
    set timeshift(value) {
      this[timeshift] = value;
    }
    get createdAt() {
      return this[createdAt$];
    }
    set createdAt(value) {
      this[createdAt$] = value;
    }
    get enteredBy() {
      return this[enteredBy$];
    }
    set enteredBy(value) {
      this[enteredBy$] = value;
    }
    get NSClientId() {
      return this[NSClientId$];
    }
    set NSClientId(value) {
      this[NSClientId$] = value;
    }
    get insulin() {
      return this[insulin$1];
    }
    set insulin(value) {
      this[insulin$1] = value;
    }
    get microbolus() {
      return this[microbolus];
    }
    set microbolus(value) {
      this[microbolus] = value;
    }
    get insulinInjections() {
      return this[insulinInjections];
    }
    set insulinInjections(value) {
      this[insulinInjections] = value;
    }
    get splitExt() {
      return this[splitExt];
    }
    set splitExt(value) {
      this[splitExt] = value;
    }
    get splitNow() {
      return this[splitNow];
    }
    set splitNow(value) {
      this[splitNow] = value;
    }
    get isSMB() {
      return this[isSMB];
    }
    set isSMB(value) {
      this[isSMB] = value;
    }
    get duplicates() {
      return this[duplicates];
    }
    set duplicates(value) {
      this[duplicates] = value;
    }
    get pumpId() {
      return this[pumpId];
    }
    set pumpId(value) {
      this[pumpId] = value;
    }
    get glucose() {
      return this[glucose];
    }
    set glucose(value) {
      this[glucose] = value;
    }
    get glucoseType() {
      return this[glucoseType];
    }
    set glucoseType(value) {
      this[glucoseType] = value;
    }
    get boluscalc() {
      return this[boluscalc];
    }
    set boluscalc(value) {
      this[boluscalc] = value;
    }
    get notes() {
      return this[notes$];
    }
    set notes(value) {
      this[notes$] = value;
    }
    get reason() {
      return this[reason];
    }
    set reason(value) {
      this[reason] = value;
    }
    get targetTop() {
      return this[targetTop];
    }
    set targetTop(value) {
      this[targetTop] = value;
    }
    get targetBottom() {
      return this[targetBottom];
    }
    set targetBottom(value) {
      this[targetBottom] = value;
    }
    get isECarb() {
      return this[isECarb];
    }
    set isECarb(value) {
      this[isECarb] = value;
    }
    get key600() {
      let t22;
      t22 = this[_key600];
      return t22 == null ? "" : t22;
    }
    get isBloody() {
      let t22;
      return (t22 = this.glucoseType, t22 == null ? null : t22[$toLowerCase]()) === "finger" || this.eventType[$toLowerCase]() === "bg check";
    }
    get timeForCalc() {
      return dart.notNull(this.createdAt.hour) * 3600 + dart.notNull(this.createdAt.minute) * 60 + dart.notNull(this.createdAt.second);
    }
    get from() {
      let t22;
      if (this[_from] == json_data.Uploader.Unknown) {
        let check = (t22 = this.enteredBy[$toLowerCase](), t22 === null ? "" : t22);
        if (check === "openaps") {
          this[_from] = json_data.Uploader.OpenAPS;
        } else if (check === "tidepool") {
          this[_from] = json_data.Uploader.Tidepool;
        } else if (check[$contains]("androidaps")) {
          this[_from] = json_data.Uploader.AndroidAPS;
        } else if (check[$startsWith]("xdrip")) {
          this[_from] = json_data.Uploader.XDrip;
        } else if (check === "spike") this[_from] = json_data.Uploader.Spike;
      }
      return this[_from];
    }
    get [_t]() {
      return this.eventType[$toLowerCase]();
    }
    get hasNoType() {
      return this[_t] === "<none>" || this[_t] === "";
    }
    get isSiteChange() {
      return this[_t] === "site change";
    }
    get isInsulinChange() {
      return this[_t] === "insulin change";
    }
    get isSensorChange() {
      return this[_t] === "sensor change" || this[_t] === "sensor start";
    }
    get isPumpBatteryChange() {
      return this[_t] === "pump battery change";
    }
    get isProfileSwitch() {
      return this[_t] === "profile switch";
    }
    get isTempTarget() {
      return this[_t] === "temporary target";
    }
    get isTempBasal() {
      return this[_t] === "temp basal";
    }
    get isExercise() {
      return this[_t] === "exercise";
    }
    get isBGCheck() {
      return this[_t] === "bg check";
    }
    get isMealBolus() {
      return this[_t] === "meal bolus";
    }
    get isBolusWizard() {
      return this[_t] === "bolus wizard";
    }
    get absoluteTempBasal() {
      return this[_absolute];
    }
    adjustedValue(v) {
      if (this[_percent] != null) return dart.notNull(v) + dart.notNull(v) * dart.notNull(this[_percent]) / 100.0;
      if (this[_rate] != null) return this[_rate];
      return v;
    }
    get eCarbs() {
      return dart.test(this.isECarb) ? this[_carbs] : 0.0;
    }
    get carbs() {
      if (this[_carbs] != null && !dart.test(this.isECarb)) return this[_carbs];
      return 0.0;
    }
    get isCarbBolus() {
      if (dart.test(this.isMealBolus)) return true;
      if (dart.test(this.isBolusWizard) && dart.notNull(this.carbs) > 0) return true;
      return false;
    }
    get bolusInsulin() {
      if (this.insulin != null) return this.insulin;
      return 0.0;
    }
    carbo(value) {
      this[_carbs] = value;
    }
    get copy() {
      let t22;
      let ret = (t22 = new json_data.TreatmentData.new(), (() => {
        t22.id = this.id;
        t22.eventType = this.eventType;
        t22.duration = this.duration;
        t22.timeshift = this.timeshift;
        t22[_percent] = this[_percent];
        t22[_absolute] = this[_absolute];
        t22[_rate] = this[_rate];
        t22.createdAt = this.createdAt.add(new core.Duration.new({minutes: 0}));
        t22.enteredBy = this.enteredBy;
        t22.NSClientId = this.NSClientId;
        t22[_carbs] = this[_carbs];
        t22.insulin = this.insulin;
        t22.splitExt = this.splitExt;
        t22.splitNow = this.splitNow;
        t22.microbolus = this.microbolus;
        t22.isSMB = this.isSMB;
        t22.pumpId = this.pumpId;
        t22.glucose = this.glucose;
        t22.glucoseType = this.glucoseType;
        t22.boluscalc = this.boluscalc == null ? null : this.boluscalc.copy;
        t22.notes = this.notes;
        t22.reason = this.reason;
        t22.targetTop = this.targetTop;
        t22.targetBottom = this.targetBottom;
        t22[_from] = this[_from];
        t22[_key600] = this[_key600];
        t22.isECarb = this.isECarb;
        t22.raw = this.raw;
        return t22;
      })());
      ret.insulinInjections = JSArrayOfInsulinInjectionDataL().of([]);
      for (let entry of this.insulinInjections) {
        ret.insulinInjections[$add](entry.copy);
      }
      return ret;
    }
    equals(t) {
      return this.createdAt.millisecondsSinceEpoch == t.createdAt.millisecondsSinceEpoch && this.eventType == t.eventType && this.duration == t.duration && this.notes == t.notes;
    }
    static fromJson(g, json) {
      let t23, t23$;
      let ret = new json_data.TreatmentData.new();
      if (json == null) return ret;
      ret.raw = json;
      ret.id = json_data.JsonData.toText(json[$_get]("_id"));
      ret.eventType = json_data.JsonData.toText(json[$_get]("eventType"));
      ret.duration = dart.notNull(json_data.JsonData.toInt(json[$_get]("duration"))) * 60;
      ret.timeshift = json_data.JsonData.toInt(json[$_get]("timeshift"));
      ret[_percent] = json_data.JsonData.toInt(json[$_get]("percent"), null);
      ret[_absolute] = json_data.JsonData.toDouble(json[$_get]("absolute"), null);
      ret[_rate] = json_data.JsonData.toDouble(json[$_get]("rate"));
      ret.createdAt = json_data.JsonData.toDate(json[$_get]("created_at"));
      ret.enteredBy = json_data.JsonData.toText(json[$_get]("enteredBy"));
      ret.NSClientId = json_data.JsonData.toText(json[$_get]("NSCLIENT_ID"));
      ret[_carbs] = json_data.JsonData.toDouble(json[$_get]("carbs"));
      ret.insulin = json_data.JsonData.toDouble(json[$_get]("insulin"));
      if (ret.insulin === 0.0) ret.insulin = json_data.JsonData.toDouble(json[$_get]("enteredinsulin"));
      ret.splitExt = json_data.JsonData.toInt(json[$_get]("splitExt"));
      ret.splitNow = json_data.JsonData.toInt(json[$_get]("splitNow"));
      ret.isSMB = json_data.JsonData.toBool(json[$_get]("isSMB"));
      ret.pumpId = json_data.JsonData.toText(json[$_get]("pumpId"));
      ret.glucoseType = json_data.JsonData.toText(json[$_get]("glucoseType"));
      if (json[$_get]("boluscalc") != null) ret.boluscalc = json_data.BoluscalcData.fromJson(MapLOfStringL$dynamic().as(json[$_get]("boluscalc")));
      ret.notes = json_data.JsonData.toText(json[$_get]("notes"));
      ret.reason = json_data.JsonData.toText(json[$_get]("reason"));
      ret.targetTop = json_data.JsonData.toDouble(json[$_get]("targetTop"));
      ret.targetBottom = json_data.JsonData.toDouble(json[$_get]("targetBottom"));
      let temp = json_data.JsonData.toText(json[$_get]("units"));
      if (temp[$toLowerCase]() === globals.Settings.msgUnitMGDL[$toLowerCase]() && !dart.test(g.glucMGDLFromStatus)) {
        ret.targetTop = dart.notNull(ret.targetTop) / 18.02;
        ret.targetBottom = dart.notNull(ret.targetBottom) / 18.02;
      } else if (temp[$toLowerCase]() === globals.Settings.msgUnitMMOL[$toLowerCase]() && dart.test(g.glucMGDLFromStatus)) {
        ret.targetTop = dart.notNull(ret.targetTop) * 18.02;
        ret.targetBottom = dart.notNull(ret.targetBottom) * 18.02;
      }
      ret.microbolus = 0.0;
      temp = json_data.JsonData.toText(json[$_get]("insulinInjections"));
      let list = [];
      try {
        list = ListL().as(convert.json.decode(temp));
      } catch (e) {
        let ex = dart.getThrown(e);
      }
      for (let entry of list) {
        ret.insulinInjections[$add](json_data.InsulinInjectionData.fromJson(g, MapLOfStringL$dynamic().as(entry)));
      }
      ret.glucose = json_data.JsonData.toDouble(json[$_get]("glucose"));
      if (json[$_get]("units") != null) {
        if (dart.equals(dart.dsend(json[$_get]("units"), 'toLowerCase', []), globals.Settings.msgUnitMGDL[$toLowerCase]()) && dart.equals(dart.dsend(g.getGlucInfo(), '_get', ["unit"]), globals.Settings.msgUnitMMOL)) {
          ret.glucose = dart.notNull(ret.glucose) / 18.02;
        } else if (dart.equals(dart.dsend(json[$_get]("units"), 'toLowerCase', []), globals.Settings.msgUnitMMOL[$toLowerCase]()) && dart.equals(dart.dsend(g.getGlucInfo(), '_get', ["unit"]), globals.Settings.msgUnitMGDL)) {
          ret.glucose = dart.notNull(ret.glucose) * 18.02;
        }
      }
      if (json[$_get]("key600") != null) {
        ret[_from] = json_data.Uploader.Minimed600;
        ret[_key600] = json_data.JsonData.toText(json[$_get]("key600"));
        let reg = core.RegExp.new("microbolus (.*)U");
        let m = reg.firstMatch(ret.notes);
        if (m != null && m.groupCount === 1) {
          if (dart.notNull((t23 = ret[_absolute], t23 == null ? 0.0 : t23)) > 0) {
            ret.microbolus = dart.notNull(ret[_absolute]) / 3600 * dart.notNull(ret.duration);
          } else {
            ret.microbolus = (t23$ = core.double.tryParse(m.group(1)), t23$ == null ? 0.0 : t23$);
          }
        }
      }
      return ret;
    }
    slice(src, dst, f) {
      this[_carbs] = globals.Globals.calc(src[_carbs], dst[_carbs], f);
      this.glucose = globals.Globals.calc(src.glucose, dst.glucose, f);
      if (this.boluscalc != null) this.boluscalc.slice(src.boluscalc, dst.boluscalc, f);
    }
    calcIOB(profile, time) {
      let t23, t23$, t23$0, t23$1, t23$2, t23$3;
      let dia = 3.0;
      let sens = 0.0;
      let check = dart.notNull(time.hour) * 3600 + dart.notNull(time.minute) * 60 + dart.notNull(time.second);
      if (profile != null) {
        dia = (t23$ = (t23 = profile.store, t23 == null ? null : t23.dia), t23$ == null ? dia : t23$);
        sens = (t23$3 = (t23$2 = (t23$1 = (t23$0 = profile.store, t23$0 == null ? null : t23$0.listSens), t23$1 == null ? null : t23$1[$lastWhere](dart.fn(e => dart.notNull(e.timeForCalc) <= check, ProfileEntryDataLToboolL()), {orElse: dart.fn(() => null, VoidToNullN())})), t23$2 == null ? null : t23$2.value), t23$3 == null ? sens : t23$3);
      }
      let scaleFactor = 3.0 / dart.notNull(dia);
      let peak = 75.0;
      let ret = new json_data.CalcIOBData.new(0.0, 0.0, this);
      if (this.insulin != null) {
        let bolusTime = this.createdAt.millisecondsSinceEpoch;
        let minAgo = scaleFactor * (dart.notNull(time.millisecondsSinceEpoch) - dart.notNull(bolusTime)) / 1000 / 60;
        if (minAgo < peak) {
          let x1 = minAgo / 5 + 1;
          ret.iob = dart.notNull(this.insulin) * (1 - 0.001852 * x1 * x1 + 0.001852 * x1);
          ret.activity = dart.notNull(sens) * dart.notNull(this.insulin) * (2 / dart.notNull(dia) / 60 / peak) * minAgo;
        } else if (minAgo < 180) {
          let x2 = (minAgo - peak) / 5;
          ret.iob = dart.notNull(this.insulin) * (0.001323 * x2 * x2 - 0.054233 * x2 + 0.55556);
          ret.activity = dart.notNull(sens) * dart.notNull(this.insulin) * (2 / dart.notNull(dia) / 60 - (minAgo - peak) * 2 / dart.notNull(dia) / 60 / (60 * 3 - peak));
        }
      }
      return ret;
    }
    calcCOB(profile, time, lastDecayedBy) {
      let delay = 20;
      let isDecaying = false;
      let initialCarbs = null;
      if (this.carbs != null) {
        let carbTime = this.createdAt;
        let carbs_hr = profile.store.carbRatioPerHour;
        if (carbs_hr === 0) carbs_hr = 12;
        let carbs_min = dart.notNull(carbs_hr) / 60;
        let decayedBy = carbTime;
        let minutesleft = ((dart.notNull(lastDecayedBy) - dart.notNull(carbTime.millisecondsSinceEpoch)) / 1000 / 60)[$truncate]();
        decayedBy = decayedBy.add(new core.Duration.new({minutes: math.max(intL(), delay, minutesleft) + (dart.notNull(this.carbs) / carbs_min)[$truncate]()}));
        if (delay > minutesleft) {
          initialCarbs = this.carbs;
        } else {
          initialCarbs = dart.notNull(this.carbs) + minutesleft * carbs_min;
        }
        let startDecay = carbTime.add(new core.Duration.new({minutes: delay}));
        if (dart.notNull(time.millisecondsSinceEpoch) < dart.notNull(lastDecayedBy) || dart.notNull(time.millisecondsSinceEpoch) > dart.notNull(startDecay.millisecondsSinceEpoch)) {
          isDecaying = true;
        } else {
          isDecaying = false;
        }
        return new (IdentityMapOfStringL$dynamic()).from(["initialCarbs", initialCarbs, "decayedBy", decayedBy, "isDecaying", isDecaying, "carbTime", carbTime]);
      }
      return null;
    }
    calcTotalCOB(data, yesterday, ret, profile, time, iob) {
      let t23, t23$, t23$0, t23$1, t23$2, t23$3, t24, t23$4;
      let liverSensRatio = 8.0;
      let sens = (t23$ = (t23 = profile.store.listSens[$lastWhere](dart.fn(e => dart.notNull(e.timeForCalc) <= dart.notNull(this.timeForCalc), ProfileEntryDataLToboolL()), {orElse: dart.fn(() => null, VoidToNullN())}), t23 == null ? null : t23.value), t23$ == null ? 0.0 : t23$);
      let carbRatio = (t23$1 = (t23$0 = profile.store.listCarbratio[$lastWhere](dart.fn(e => dart.notNull(e.timeForCalc) <= dart.notNull(this.timeForCalc), ProfileEntryDataLToboolL()), {orElse: dart.fn(() => null, VoidToNullN())}), t23$0 == null ? null : t23$0.value), t23$1 == null ? 0.0 : t23$1);
      let cCalc = this.calcCOB(profile, time, intL().as((t23$3 = (t23$2 = dart.dsend(ret, '_get', ["lastDecayedBy"]), t23$2 == null ? null : dart.dload(t23$2, 'millisecondsSinceEpoch')), t23$3 == null ? 0 : t23$3)));
      if (cCalc != null) {
        let decaysin_hr = doubleL().as(dart.dsend(dart.dsend(dart.dsend(dart.dsend(dart.dload(dart.dsend(cCalc, '_get', ["decayedBy"]), 'millisecondsSinceEpoch'), '-', [time.millisecondsSinceEpoch]), '/', [1000]), '/', [60]), '/', [60]));
        if (dart.notNull(decaysin_hr) > -10) {
          let actStart = dart.dload(dart.dcall(iob, [data, dart.dsend(ret, '_get', ["lastDecayedBy"]), yesterday]), 'activity');
          let actEnd = dart.dload(dart.dcall(iob, [data, dart.dsend(cCalc, '_get', ["decayedBy"]), yesterday]), 'activity');
          let avgActivity = dart.dsend(dart.dsend(actStart, '+', [actEnd]), '/', [2]);
          if (sens === 0.0) sens = 1.0;
          if (carbRatio === 0.0) carbRatio = 1.0;
          let delayedCarbs = dart.dsend(dart.dsend(dart.dsend(avgActivity, '*', [liverSensRatio]), '/', [sens]), '*', [carbRatio]);
          let delayMinutes = intL().as(dart.dsend(dart.dsend(delayedCarbs, '~/', [profile.store.carbRatioPerHour]), '*', [60]));
          if (dart.notNull(delayMinutes) > 0) {
            dart.dsend(cCalc, '_set', ["decayedBy", dart.dsend(dart.dsend(cCalc, '_get', ["decayedBy"]), 'add', [new core.Duration.new({minutes: delayMinutes})])]);
            decaysin_hr = doubleL().as(dart.dsend(dart.dsend(dart.dsend(dart.dsend(dart.dload(dart.dsend(cCalc, '_get', ["decayedBy"]), 'millisecondsSinceEpoch'), '-', [time.millisecondsSinceEpoch]), '/', [1000]), '/', [60]), '/', [60]));
          }
        }
        dart.dsend(ret, '_set', ["lastDecayedBy", dart.dsend(cCalc, '_get', ["decayedBy"])]);
        if (dart.notNull(decaysin_hr) > 0) {
          t23$4 = ret;
          t24 = "totalCOB";
          dart.dsend(t23$4, '_set', [t24, dart.dsend(dart.dsend(t23$4, '_get', [t24]), '+', [math.min(doubleL(), this.carbs, dart.notNull(decaysin_hr) * dart.notNull(profile.store.carbRatioPerHour))])]);
          dart.dsend(ret, '_set', ["isDecaying", dart.dsend(cCalc, '_get', ["isDecaying"])]);
        }
      } else {
        dart.dsend(ret, '_set', ["totalCOB", 0]);
      }
    }
  };
  (json_data.TreatmentData.new = function() {
    this[raw$0] = null;
    this[id$] = null;
    this[eventType] = null;
    this[duration$0] = null;
    this[timeshift] = null;
    this[_percent] = null;
    this[_absolute] = null;
    this[_rate] = null;
    this[createdAt$] = null;
    this[enteredBy$] = null;
    this[NSClientId$] = null;
    this[_carbs] = null;
    this[insulin$1] = null;
    this[microbolus] = null;
    this[insulinInjections] = JSArrayOfInsulinInjectionDataL().of([]);
    this[splitExt] = null;
    this[splitNow] = null;
    this[isSMB] = null;
    this[duplicates] = 1;
    this[pumpId] = null;
    this[glucose] = null;
    this[glucoseType] = null;
    this[boluscalc] = null;
    this[notes$] = null;
    this[reason] = null;
    this[targetTop] = null;
    this[targetBottom] = null;
    this[_key600] = null;
    this[_from] = json_data.Uploader.Unknown;
    this[isECarb] = false;
    json_data.TreatmentData.__proto__.new.call(this);
    ;
  }).prototype = json_data.TreatmentData.prototype;
  dart.addTypeTests(json_data.TreatmentData);
  dart.addTypeCaches(json_data.TreatmentData);
  dart.setMethodSignature(json_data.TreatmentData, () => ({
    __proto__: dart.getMethods(json_data.TreatmentData.__proto__),
    adjustedValue: dart.fnType(dart.legacy(core.double), [dart.legacy(core.double)]),
    carbo: dart.fnType(dart.void, [dart.legacy(core.double)]),
    equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(json_data.TreatmentData)]),
    slice: dart.fnType(dart.void, [dart.legacy(json_data.TreatmentData), dart.legacy(json_data.TreatmentData), dart.legacy(core.double)]),
    calcIOB: dart.fnType(dart.legacy(json_data.CalcIOBData), [dart.legacy(json_data.ProfileGlucData), dart.legacy(core.DateTime)]),
    calcCOB: dart.fnType(dart.dynamic, [dart.legacy(json_data.ProfileGlucData), dart.legacy(core.DateTime), dart.legacy(core.int)]),
    calcTotalCOB: dart.fnType(dart.void, [dart.legacy(json_data.ReportData), dart.legacy(json_data.DayData), dart.dynamic, dart.legacy(json_data.ProfileGlucData), dart.legacy(core.DateTime), dart.dynamic])
  }));
  dart.setGetterSignature(json_data.TreatmentData, () => ({
    __proto__: dart.getGetters(json_data.TreatmentData.__proto__),
    key600: dart.legacy(core.String),
    isBloody: dart.legacy(core.bool),
    timeForCalc: dart.legacy(core.int),
    from: dart.legacy(json_data.Uploader),
    [_t]: dart.legacy(core.String),
    hasNoType: dart.legacy(core.bool),
    isSiteChange: dart.legacy(core.bool),
    isInsulinChange: dart.legacy(core.bool),
    isSensorChange: dart.legacy(core.bool),
    isPumpBatteryChange: dart.legacy(core.bool),
    isProfileSwitch: dart.legacy(core.bool),
    isTempTarget: dart.legacy(core.bool),
    isTempBasal: dart.legacy(core.bool),
    isExercise: dart.legacy(core.bool),
    isBGCheck: dart.legacy(core.bool),
    isMealBolus: dart.legacy(core.bool),
    isBolusWizard: dart.legacy(core.bool),
    absoluteTempBasal: dart.legacy(core.double),
    eCarbs: dart.legacy(core.double),
    carbs: dart.legacy(core.double),
    isCarbBolus: dart.legacy(core.bool),
    bolusInsulin: dart.legacy(core.double),
    copy: dart.legacy(json_data.TreatmentData)
  }));
  dart.setLibraryUri(json_data.TreatmentData, L2);
  dart.setFieldSignature(json_data.TreatmentData, () => ({
    __proto__: dart.getFields(json_data.TreatmentData.__proto__),
    raw: dart.fieldType(dart.dynamic),
    id: dart.fieldType(dart.legacy(core.String)),
    eventType: dart.fieldType(dart.legacy(core.String)),
    duration: dart.fieldType(dart.legacy(core.int)),
    timeshift: dart.fieldType(dart.legacy(core.int)),
    [_percent]: dart.fieldType(dart.legacy(core.int)),
    [_absolute]: dart.fieldType(dart.legacy(core.double)),
    [_rate]: dart.fieldType(dart.legacy(core.double)),
    createdAt: dart.fieldType(dart.legacy(core.DateTime)),
    enteredBy: dart.fieldType(dart.legacy(core.String)),
    NSClientId: dart.fieldType(dart.legacy(core.String)),
    [_carbs]: dart.fieldType(dart.legacy(core.double)),
    insulin: dart.fieldType(dart.legacy(core.double)),
    microbolus: dart.fieldType(dart.legacy(core.double)),
    insulinInjections: dart.fieldType(dart.legacy(core.List$(dart.legacy(json_data.InsulinInjectionData)))),
    splitExt: dart.fieldType(dart.legacy(core.int)),
    splitNow: dart.fieldType(dart.legacy(core.int)),
    isSMB: dart.fieldType(dart.legacy(core.bool)),
    duplicates: dart.fieldType(dart.legacy(core.int)),
    pumpId: dart.fieldType(dart.legacy(core.String)),
    glucose: dart.fieldType(dart.legacy(core.double)),
    glucoseType: dart.fieldType(dart.legacy(core.String)),
    boluscalc: dart.fieldType(dart.legacy(json_data.BoluscalcData)),
    notes: dart.fieldType(dart.legacy(core.String)),
    reason: dart.fieldType(dart.legacy(core.String)),
    targetTop: dart.fieldType(dart.legacy(core.double)),
    targetBottom: dart.fieldType(dart.legacy(core.double)),
    [_key600]: dart.fieldType(dart.legacy(core.String)),
    [_from]: dart.fieldType(dart.legacy(json_data.Uploader)),
    isECarb: dart.fieldType(dart.legacy(core.bool))
  }));
  var raw$1 = dart.privateName(json_data, "EntryData.raw");
  var id$0 = dart.privateName(json_data, "EntryData.id");
  var time = dart.privateName(json_data, "EntryData.time");
  var rssi = dart.privateName(json_data, "EntryData.rssi");
  var device = dart.privateName(json_data, "EntryData.device");
  var direction = dart.privateName(json_data, "EntryData.direction");
  var rawbg = dart.privateName(json_data, "EntryData.rawbg");
  var sgv = dart.privateName(json_data, "EntryData.sgv");
  var mbg = dart.privateName(json_data, "EntryData.mbg");
  var type$ = dart.privateName(json_data, "EntryData.type");
  var slope = dart.privateName(json_data, "EntryData.slope");
  var intercept = dart.privateName(json_data, "EntryData.intercept");
  var scale = dart.privateName(json_data, "EntryData.scale");
  var isGap = dart.privateName(json_data, "EntryData.isGap");
  var isCopy = dart.privateName(json_data, "EntryData.isCopy");
  var activity = dart.privateName(json_data, "EntryData.activity");
  json_data.EntryData = class EntryData extends json_data.JsonData {
    get raw() {
      return this[raw$1];
    }
    set raw(value) {
      this[raw$1] = value;
    }
    get id() {
      return this[id$0];
    }
    set id(value) {
      this[id$0] = value;
    }
    get time() {
      return this[time];
    }
    set time(value) {
      this[time] = value;
    }
    get rssi() {
      return this[rssi];
    }
    set rssi(value) {
      this[rssi] = value;
    }
    get device() {
      return this[device];
    }
    set device(value) {
      this[device] = value;
    }
    get direction() {
      return this[direction];
    }
    set direction(value) {
      this[direction] = value;
    }
    get rawbg() {
      return this[rawbg];
    }
    set rawbg(value) {
      this[rawbg] = value;
    }
    get sgv() {
      return this[sgv];
    }
    set sgv(value) {
      this[sgv] = value;
    }
    get mbg() {
      return this[mbg];
    }
    set mbg(value) {
      this[mbg] = value;
    }
    get type() {
      return this[type$];
    }
    set type(value) {
      this[type$] = value;
    }
    get slope() {
      return this[slope];
    }
    set slope(value) {
      this[slope] = value;
    }
    get intercept() {
      return this[intercept];
    }
    set intercept(value) {
      this[intercept] = value;
    }
    get scale() {
      return this[scale];
    }
    set scale(value) {
      this[scale] = value;
    }
    get isGap() {
      return this[isGap];
    }
    set isGap(value) {
      this[isGap] = value;
    }
    get isCopy() {
      return this[isCopy];
    }
    set isCopy(value) {
      this[isCopy] = value;
    }
    get activity() {
      return this[activity];
    }
    set activity(value) {
      this[activity] = value;
    }
    get isInvalid() {
      return false;
    }
    get isInvalidOrGluc0() {
      return dart.test(this.isInvalid) || this.gluc == null || this.gluc === 0;
    }
    get isGlucInvalid() {
      return this.gluc == null || dart.notNull(this.gluc) <= 0;
    }
    get gluc() {
      let t23;
      return dart.test(this.isGap) ? -1.0 : (t23 = this.type === "sgv" ? this.sgv : this.rawbg, t23 == null ? 0.0 : t23);
    }
    get bloodGluc() {
      let t23;
      t23 = this.type === "mbg" ? this.mbg : 0.0;
      return t23 == null ? 0.0 : t23;
    }
    get fullGluc() {
      let t23;
      return dart.test(this.isGap) ? -1.0 : (t23 = this.type === "mbg" ? this.mbg : this.gluc, t23 == null ? 0.0 : t23);
    }
    get copy() {
      let t23;
      t23 = new json_data.EntryData.new();
      return (() => {
        t23.id = this.id;
        t23.time = this.time;
        t23.rssi = this.rssi;
        t23.device = this.device;
        t23.direction = this.direction;
        t23.rawbg = this.rawbg;
        t23.sgv = this.sgv;
        t23.mbg = this.mbg;
        t23.type = this.type;
        t23.isGap = this.isGap;
        t23.isCopy = true;
        t23.slope = this.slope;
        t23.intercept = this.intercept;
        t23.scale = this.scale;
        return t23;
      })();
    }
    static fromJson(json) {
      let ret = new json_data.EntryData.new();
      ret.raw = json;
      if (json == null) return ret;
      ret.id = StringL().as(json[$_get]("_id"));
      ret.time = json_data.JsonData.toDate(json[$_get]("date"));
      ret.rssi = json_data.JsonData.toInt(json[$_get]("rssi"));
      ret.device = StringL().as(json[$_get]("device"));
      ret.direction = StringL().as(json[$_get]("direction"));
      ret.rawbg = json_data.JsonData.toDouble(json[$_get]("rawbg"));
      ret.type = StringL().as(json[$_get]("type"));
      ret.sgv = json_data.JsonData.toDouble(json[$_get]("sgv"));
      ret.mbg = json_data.JsonData.toDouble(json[$_get]("mbg"));
      if (ret.type == null && dart.notNull(ret.sgv) > 0) ret.type = "sgv";
      if (ret.type == null && dart.notNull(ret.mbg) > 0) ret.type = "mbg";
      if (dart.notNull(ret.sgv) < 20) {
        ret.sgv = 0.0;
        ret.isGap = true;
      }
      ret.slope = json_data.JsonData.toDouble(json[$_get]("slope"));
      ret.intercept = json_data.JsonData.toDouble(json[$_get]("intercept"));
      ret.scale = json_data.JsonData.toDouble(json[$_get]("scale"));
      return ret;
    }
    slice(src, dst, f) {
      this.sgv = globals.Globals.calc(src.sgv, dst.sgv, f);
      this.rawbg = globals.Globals.calc(src.rawbg, dst.rawbg, f);
      this.mbg = globals.Globals.calc(src.mbg, dst.mbg, f);
    }
  };
  (json_data.EntryData.new = function() {
    this[raw$1] = null;
    this[id$0] = null;
    this[time] = null;
    this[rssi] = null;
    this[device] = null;
    this[direction] = null;
    this[rawbg] = null;
    this[sgv] = null;
    this[mbg] = null;
    this[type$] = null;
    this[slope] = null;
    this[intercept] = null;
    this[scale] = null;
    this[isGap] = false;
    this[isCopy] = false;
    this[activity] = null;
    json_data.EntryData.__proto__.new.call(this);
    ;
  }).prototype = json_data.EntryData.prototype;
  dart.addTypeTests(json_data.EntryData);
  dart.addTypeCaches(json_data.EntryData);
  dart.setMethodSignature(json_data.EntryData, () => ({
    __proto__: dart.getMethods(json_data.EntryData.__proto__),
    slice: dart.fnType(dart.void, [dart.legacy(json_data.EntryData), dart.legacy(json_data.EntryData), dart.legacy(core.double)])
  }));
  dart.setGetterSignature(json_data.EntryData, () => ({
    __proto__: dart.getGetters(json_data.EntryData.__proto__),
    isInvalid: dart.legacy(core.bool),
    isInvalidOrGluc0: dart.legacy(core.bool),
    isGlucInvalid: dart.legacy(core.bool),
    gluc: dart.legacy(core.double),
    bloodGluc: dart.legacy(core.double),
    fullGluc: dart.legacy(core.double),
    copy: dart.legacy(json_data.EntryData)
  }));
  dart.setLibraryUri(json_data.EntryData, L2);
  dart.setFieldSignature(json_data.EntryData, () => ({
    __proto__: dart.getFields(json_data.EntryData.__proto__),
    raw: dart.fieldType(dart.dynamic),
    id: dart.fieldType(dart.legacy(core.String)),
    time: dart.fieldType(dart.legacy(core.DateTime)),
    rssi: dart.fieldType(dart.legacy(core.int)),
    device: dart.fieldType(dart.legacy(core.String)),
    direction: dart.fieldType(dart.legacy(core.String)),
    rawbg: dart.fieldType(dart.legacy(core.double)),
    sgv: dart.fieldType(dart.legacy(core.double)),
    mbg: dart.fieldType(dart.legacy(core.double)),
    type: dart.fieldType(dart.legacy(core.String)),
    slope: dart.fieldType(dart.legacy(core.double)),
    intercept: dart.fieldType(dart.legacy(core.double)),
    scale: dart.fieldType(dart.legacy(core.double)),
    isGap: dart.fieldType(dart.legacy(core.bool)),
    isCopy: dart.fieldType(dart.legacy(core.bool)),
    activity: dart.fieldType(dart.legacy(core.double))
  }));
  var status$0 = dart.privateName(json_data, "PumpStatusData.status");
  var bolusing = dart.privateName(json_data, "PumpStatusData.bolusing");
  var suspended = dart.privateName(json_data, "PumpStatusData.suspended");
  var timestamp$ = dart.privateName(json_data, "PumpStatusData.timestamp");
  json_data.PumpStatusData = class PumpStatusData extends json_data.JsonData {
    get status() {
      return this[status$0];
    }
    set status(value) {
      this[status$0] = value;
    }
    get bolusing() {
      return this[bolusing];
    }
    set bolusing(value) {
      this[bolusing] = value;
    }
    get suspended() {
      return this[suspended];
    }
    set suspended(value) {
      this[suspended] = value;
    }
    get timestamp() {
      return this[timestamp$];
    }
    set timestamp(value) {
      this[timestamp$] = value;
    }
    get copy() {
      let t23;
      t23 = new json_data.PumpStatusData.new();
      return (() => {
        t23.status = this.status;
        t23.bolusing = this.bolusing;
        t23.suspended = this.suspended;
        t23.timestamp = this.timestamp.add(new core.Duration.new({days: 0}));
        return t23;
      })();
    }
    static fromJson(json) {
      let ret = new json_data.PumpStatusData.new();
      if (json == null) return ret;
      ret.status = json_data.JsonData.toText(json[$_get]("status"));
      ret.bolusing = json_data.JsonData.toBool(json[$_get]("bolusing"));
      ret.suspended = json_data.JsonData.toBool(json[$_get]("suspended"));
      ret.timestamp = json_data.JsonData.toDate(json[$_get]("timestamp"));
      return ret;
    }
  };
  (json_data.PumpStatusData.new = function() {
    this[status$0] = null;
    this[bolusing] = null;
    this[suspended] = null;
    this[timestamp$] = null;
    json_data.PumpStatusData.__proto__.new.call(this);
    ;
  }).prototype = json_data.PumpStatusData.prototype;
  dart.addTypeTests(json_data.PumpStatusData);
  dart.addTypeCaches(json_data.PumpStatusData);
  dart.setGetterSignature(json_data.PumpStatusData, () => ({
    __proto__: dart.getGetters(json_data.PumpStatusData.__proto__),
    copy: dart.legacy(json_data.PumpStatusData)
  }));
  dart.setLibraryUri(json_data.PumpStatusData, L2);
  dart.setFieldSignature(json_data.PumpStatusData, () => ({
    __proto__: dart.getFields(json_data.PumpStatusData.__proto__),
    status: dart.fieldType(dart.legacy(core.String)),
    bolusing: dart.fieldType(dart.legacy(core.bool)),
    suspended: dart.fieldType(dart.legacy(core.bool)),
    timestamp: dart.fieldType(dart.legacy(core.DateTime))
  }));
  var status$1 = dart.privateName(json_data, "PumpBatteryData.status");
  var voltage = dart.privateName(json_data, "PumpBatteryData.voltage");
  json_data.PumpBatteryData = class PumpBatteryData extends json_data.JsonData {
    get status() {
      return this[status$1];
    }
    set status(value) {
      this[status$1] = value;
    }
    get voltage() {
      return this[voltage];
    }
    set voltage(value) {
      this[voltage] = value;
    }
    get copy() {
      let t23;
      t23 = new json_data.PumpBatteryData.new();
      return (() => {
        t23.status = this.status;
        t23.voltage = this.voltage;
        return t23;
      })();
    }
    static fromJson(json) {
      let ret = new json_data.PumpBatteryData.new();
      if (json == null) return ret;
      ret.status = json_data.JsonData.toText(json[$_get]("status"));
      ret.voltage = json_data.JsonData.toDouble(json[$_get]("voltage"));
      return ret;
    }
  };
  (json_data.PumpBatteryData.new = function() {
    this[status$1] = null;
    this[voltage] = null;
    json_data.PumpBatteryData.__proto__.new.call(this);
    ;
  }).prototype = json_data.PumpBatteryData.prototype;
  dart.addTypeTests(json_data.PumpBatteryData);
  dart.addTypeCaches(json_data.PumpBatteryData);
  dart.setGetterSignature(json_data.PumpBatteryData, () => ({
    __proto__: dart.getGetters(json_data.PumpBatteryData.__proto__),
    copy: dart.legacy(json_data.PumpBatteryData)
  }));
  dart.setLibraryUri(json_data.PumpBatteryData, L2);
  dart.setFieldSignature(json_data.PumpBatteryData, () => ({
    __proto__: dart.getFields(json_data.PumpBatteryData.__proto__),
    status: dart.fieldType(dart.legacy(core.String)),
    voltage: dart.fieldType(dart.legacy(core.double))
  }));
  var clock = dart.privateName(json_data, "PumpData.clock");
  var pumpBattery = dart.privateName(json_data, "PumpData.pumpBattery");
  var reservoir = dart.privateName(json_data, "PumpData.reservoir");
  var pumpStatus = dart.privateName(json_data, "PumpData.pumpStatus");
  json_data.PumpData = class PumpData extends json_data.JsonData {
    get clock() {
      return this[clock];
    }
    set clock(value) {
      this[clock] = value;
    }
    get pumpBattery() {
      return this[pumpBattery];
    }
    set pumpBattery(value) {
      this[pumpBattery] = value;
    }
    get reservoir() {
      return this[reservoir];
    }
    set reservoir(value) {
      this[reservoir] = value;
    }
    get pumpStatus() {
      return this[pumpStatus];
    }
    set pumpStatus(value) {
      this[pumpStatus] = value;
    }
    get copy() {
      let t23;
      t23 = new json_data.PumpData.new();
      return (() => {
        t23.clock = this.clock.add(new core.Duration.new({days: 0}));
        t23.pumpBattery = this.pumpBattery.copy;
        t23.reservoir = this.reservoir;
        t23.pumpStatus = this.pumpStatus.copy;
        return t23;
      })();
    }
    static fromJson(json) {
      let ret = new json_data.PumpData.new();
      if (json == null) return ret;
      ret.clock = json_data.JsonData.toDate(json[$_get]("clock"));
      ret.pumpBattery = json_data.PumpBatteryData.fromJson(MapLOfStringL$dynamic().as(json[$_get]("pumpbattery")));
      ret.reservoir = json_data.JsonData.toDouble(json[$_get]("reservoir"));
      ret.pumpStatus = json_data.PumpStatusData.fromJson(MapLOfStringL$dynamic().as(json[$_get]("pumpstatus")));
      return ret;
    }
  };
  (json_data.PumpData.new = function() {
    this[clock] = null;
    this[pumpBattery] = null;
    this[reservoir] = null;
    this[pumpStatus] = null;
    json_data.PumpData.__proto__.new.call(this);
    ;
  }).prototype = json_data.PumpData.prototype;
  dart.addTypeTests(json_data.PumpData);
  dart.addTypeCaches(json_data.PumpData);
  dart.setGetterSignature(json_data.PumpData, () => ({
    __proto__: dart.getGetters(json_data.PumpData.__proto__),
    copy: dart.legacy(json_data.PumpData)
  }));
  dart.setLibraryUri(json_data.PumpData, L2);
  dart.setFieldSignature(json_data.PumpData, () => ({
    __proto__: dart.getFields(json_data.PumpData.__proto__),
    clock: dart.fieldType(dart.legacy(core.DateTime)),
    pumpBattery: dart.fieldType(dart.legacy(json_data.PumpBatteryData)),
    reservoir: dart.fieldType(dart.legacy(core.double)),
    pumpStatus: dart.fieldType(dart.legacy(json_data.PumpStatusData))
  }));
  var batteryVoltage = dart.privateName(json_data, "UploaderData.batteryVoltage");
  var batteryPercentageRemaining = dart.privateName(json_data, "UploaderData.batteryPercentageRemaining");
  json_data.UploaderData = class UploaderData extends json_data.JsonData {
    get batteryVoltage() {
      return this[batteryVoltage];
    }
    set batteryVoltage(value) {
      this[batteryVoltage] = value;
    }
    get batteryPercentageRemaining() {
      return this[batteryPercentageRemaining];
    }
    set batteryPercentageRemaining(value) {
      this[batteryPercentageRemaining] = value;
    }
    get copy() {
      let t23;
      t23 = new json_data.UploaderData.new();
      return (() => {
        t23.batteryVoltage = this.batteryVoltage;
        t23.batteryPercentageRemaining = this.batteryPercentageRemaining;
        return t23;
      })();
    }
    static fromJson(json) {
      let ret = new json_data.UploaderData.new();
      if (json == null) return ret;
      ret.batteryVoltage = json_data.JsonData.toDouble(json[$_get]("batteryVoltage"));
      ret.batteryPercentageRemaining = json_data.JsonData.toDouble(json[$_get]("battery"));
      return ret;
    }
  };
  (json_data.UploaderData.new = function() {
    this[batteryVoltage] = null;
    this[batteryPercentageRemaining] = null;
    json_data.UploaderData.__proto__.new.call(this);
    ;
  }).prototype = json_data.UploaderData.prototype;
  dart.addTypeTests(json_data.UploaderData);
  dart.addTypeCaches(json_data.UploaderData);
  dart.setGetterSignature(json_data.UploaderData, () => ({
    __proto__: dart.getGetters(json_data.UploaderData.__proto__),
    copy: dart.legacy(json_data.UploaderData)
  }));
  dart.setLibraryUri(json_data.UploaderData, L2);
  dart.setFieldSignature(json_data.UploaderData, () => ({
    __proto__: dart.getFields(json_data.UploaderData.__proto__),
    batteryVoltage: dart.fieldType(dart.legacy(core.double)),
    batteryPercentageRemaining: dart.fieldType(dart.legacy(core.double))
  }));
  var state = dart.privateName(json_data, "XDripJSData.state");
  var stateString = dart.privateName(json_data, "XDripJSData.stateString");
  var stateStringShort = dart.privateName(json_data, "XDripJSData.stateStringShort");
  var txId = dart.privateName(json_data, "XDripJSData.txId");
  var txStatus = dart.privateName(json_data, "XDripJSData.txStatus");
  var txStatusString = dart.privateName(json_data, "XDripJSData.txStatusString");
  var txStatusStringShort = dart.privateName(json_data, "XDripJSData.txStatusStringShort");
  var txActivation = dart.privateName(json_data, "XDripJSData.txActivation");
  var mode = dart.privateName(json_data, "XDripJSData.mode");
  var timestamp$0 = dart.privateName(json_data, "XDripJSData.timestamp");
  var rssi$ = dart.privateName(json_data, "XDripJSData.rssi");
  var unfiltered = dart.privateName(json_data, "XDripJSData.unfiltered");
  var filtered = dart.privateName(json_data, "XDripJSData.filtered");
  var noise = dart.privateName(json_data, "XDripJSData.noise");
  var noiseString = dart.privateName(json_data, "XDripJSData.noiseString");
  var slope$ = dart.privateName(json_data, "XDripJSData.slope");
  var intercept$ = dart.privateName(json_data, "XDripJSData.intercept");
  var calType = dart.privateName(json_data, "XDripJSData.calType");
  var lastCalibrationDate = dart.privateName(json_data, "XDripJSData.lastCalibrationDate");
  var sessionStart = dart.privateName(json_data, "XDripJSData.sessionStart");
  var batteryTimestamp = dart.privateName(json_data, "XDripJSData.batteryTimestamp");
  var voltageA = dart.privateName(json_data, "XDripJSData.voltageA");
  var voltageB = dart.privateName(json_data, "XDripJSData.voltageB");
  var temperature = dart.privateName(json_data, "XDripJSData.temperature");
  var resistance = dart.privateName(json_data, "XDripJSData.resistance");
  json_data.XDripJSData = class XDripJSData extends json_data.JsonData {
    get state() {
      return this[state];
    }
    set state(value) {
      this[state] = value;
    }
    get stateString() {
      return this[stateString];
    }
    set stateString(value) {
      this[stateString] = value;
    }
    get stateStringShort() {
      return this[stateStringShort];
    }
    set stateStringShort(value) {
      this[stateStringShort] = value;
    }
    get txId() {
      return this[txId];
    }
    set txId(value) {
      this[txId] = value;
    }
    get txStatus() {
      return this[txStatus];
    }
    set txStatus(value) {
      this[txStatus] = value;
    }
    get txStatusString() {
      return this[txStatusString];
    }
    set txStatusString(value) {
      this[txStatusString] = value;
    }
    get txStatusStringShort() {
      return this[txStatusStringShort];
    }
    set txStatusStringShort(value) {
      this[txStatusStringShort] = value;
    }
    get txActivation() {
      return this[txActivation];
    }
    set txActivation(value) {
      this[txActivation] = value;
    }
    get mode() {
      return this[mode];
    }
    set mode(value) {
      this[mode] = value;
    }
    get timestamp() {
      return this[timestamp$0];
    }
    set timestamp(value) {
      this[timestamp$0] = value;
    }
    get rssi() {
      return this[rssi$];
    }
    set rssi(value) {
      this[rssi$] = value;
    }
    get unfiltered() {
      return this[unfiltered];
    }
    set unfiltered(value) {
      this[unfiltered] = value;
    }
    get filtered() {
      return this[filtered];
    }
    set filtered(value) {
      this[filtered] = value;
    }
    get noise() {
      return this[noise];
    }
    set noise(value) {
      this[noise] = value;
    }
    get noiseString() {
      return this[noiseString];
    }
    set noiseString(value) {
      this[noiseString] = value;
    }
    get slope() {
      return this[slope$];
    }
    set slope(value) {
      this[slope$] = value;
    }
    get intercept() {
      return this[intercept$];
    }
    set intercept(value) {
      this[intercept$] = value;
    }
    get calType() {
      return this[calType];
    }
    set calType(value) {
      this[calType] = value;
    }
    get lastCalibrationDate() {
      return this[lastCalibrationDate];
    }
    set lastCalibrationDate(value) {
      this[lastCalibrationDate] = value;
    }
    get sessionStart() {
      return this[sessionStart];
    }
    set sessionStart(value) {
      this[sessionStart] = value;
    }
    get batteryTimestamp() {
      return this[batteryTimestamp];
    }
    set batteryTimestamp(value) {
      this[batteryTimestamp] = value;
    }
    get voltageA() {
      return this[voltageA];
    }
    set voltageA(value) {
      this[voltageA] = value;
    }
    get voltageB() {
      return this[voltageB];
    }
    set voltageB(value) {
      this[voltageB] = value;
    }
    get temperature() {
      return this[temperature];
    }
    set temperature(value) {
      this[temperature] = value;
    }
    get resistance() {
      return this[resistance];
    }
    set resistance(value) {
      this[resistance] = value;
    }
    get copy() {
      let t23;
      t23 = new json_data.XDripJSData.new();
      return (() => {
        t23.state = this.state;
        t23.stateString = this.stateString;
        t23.stateStringShort = this.stateStringShort;
        t23.txId = this.txId;
        t23.txStatus = this.txStatus;
        t23.txStatusString = this.txStatusString;
        t23.txStatusStringShort = this.txStatusStringShort;
        t23.txActivation = this.txActivation.add(new core.Duration.new({days: 0}));
        t23.mode = this.mode;
        t23.timestamp = this.timestamp.add(new core.Duration.new({days: 0}));
        t23.rssi = this.rssi;
        t23.unfiltered = this.unfiltered;
        t23.filtered = this.filtered;
        t23.noise = this.noise;
        t23.noiseString = this.noiseString;
        t23.slope = this.slope;
        t23.intercept = this.intercept;
        t23.calType = this.calType;
        t23.lastCalibrationDate = this.lastCalibrationDate.add(new core.Duration.new({days: 0}));
        t23.sessionStart = this.sessionStart.add(new core.Duration.new({days: 0}));
        t23.batteryTimestamp = this.batteryTimestamp.add(new core.Duration.new({days: 0}));
        t23.voltageA = this.voltageA;
        t23.voltageB = this.voltageB;
        t23.temperature = this.temperature;
        t23.resistance = this.resistance;
        return t23;
      })();
    }
    static fromJson(json) {
      let ret = new json_data.XDripJSData.new();
      if (json == null) return ret;
      ret.state = json_data.JsonData.toInt(json[$_get]("state"));
      ret.stateString = json_data.JsonData.toText(json[$_get]("stateString"));
      ret.stateStringShort = json_data.JsonData.toText(json[$_get]("stateStringShort"));
      ret.txId = json_data.JsonData.toText(json[$_get]("txId"));
      ret.txStatus = json_data.JsonData.toInt(json[$_get]("txStatus"));
      ret.txStatusString = json_data.JsonData.toText(json[$_get]("txStatusString"));
      ret.txStatusStringShort = json_data.JsonData.toText(json[$_get]("txStatusStringShort"));
      ret.txActivation = json_data.JsonData.toDate(json[$_get]("txActivation"));
      ret.mode = json_data.JsonData.toText(json[$_get]("mode"));
      ret.timestamp = json_data.JsonData.toDate(json[$_get]("timestamp"));
      ret.rssi = json_data.JsonData.toDouble(json[$_get]("rssi"));
      ret.unfiltered = json_data.JsonData.toDouble(json[$_get]("unfiltered"));
      ret.filtered = json_data.JsonData.toDouble(json[$_get]("filtered"));
      ret.noise = json_data.JsonData.toDouble(json[$_get]("noise"));
      ret.noiseString = json_data.JsonData.toDouble(json[$_get]("noiseString"));
      ret.slope = json_data.JsonData.toDouble(json[$_get]("slope"));
      ret.intercept = json_data.JsonData.toDouble(json[$_get]("intercept"));
      ret.calType = json_data.JsonData.toText(json[$_get]("calType"));
      ret.lastCalibrationDate = json_data.JsonData.toDate(json[$_get]("lastCalibrationDate"));
      ret.sessionStart = json_data.JsonData.toDate(json[$_get]("sessionStart"));
      ret.batteryTimestamp = json_data.JsonData.toDate(json[$_get]("batteryTimestamp"));
      ret.voltageA = json_data.JsonData.toDouble(json[$_get]("voltagea"));
      ret.voltageB = json_data.JsonData.toDouble(json[$_get]("voltageb"));
      ret.temperature = json_data.JsonData.toDouble(json[$_get]("temperature"));
      ret.resistance = json_data.JsonData.toDouble(json[$_get]("resistance"));
      return ret;
    }
  };
  (json_data.XDripJSData.new = function() {
    this[state] = null;
    this[stateString] = null;
    this[stateStringShort] = null;
    this[txId] = null;
    this[txStatus] = null;
    this[txStatusString] = null;
    this[txStatusStringShort] = null;
    this[txActivation] = null;
    this[mode] = null;
    this[timestamp$0] = null;
    this[rssi$] = null;
    this[unfiltered] = null;
    this[filtered] = null;
    this[noise] = null;
    this[noiseString] = null;
    this[slope$] = null;
    this[intercept$] = null;
    this[calType] = null;
    this[lastCalibrationDate] = null;
    this[sessionStart] = null;
    this[batteryTimestamp] = null;
    this[voltageA] = null;
    this[voltageB] = null;
    this[temperature] = null;
    this[resistance] = null;
    json_data.XDripJSData.__proto__.new.call(this);
    ;
  }).prototype = json_data.XDripJSData.prototype;
  dart.addTypeTests(json_data.XDripJSData);
  dart.addTypeCaches(json_data.XDripJSData);
  dart.setGetterSignature(json_data.XDripJSData, () => ({
    __proto__: dart.getGetters(json_data.XDripJSData.__proto__),
    copy: dart.legacy(json_data.XDripJSData)
  }));
  dart.setLibraryUri(json_data.XDripJSData, L2);
  dart.setFieldSignature(json_data.XDripJSData, () => ({
    __proto__: dart.getFields(json_data.XDripJSData.__proto__),
    state: dart.fieldType(dart.legacy(core.int)),
    stateString: dart.fieldType(dart.legacy(core.String)),
    stateStringShort: dart.fieldType(dart.legacy(core.String)),
    txId: dart.fieldType(dart.legacy(core.String)),
    txStatus: dart.fieldType(dart.legacy(core.int)),
    txStatusString: dart.fieldType(dart.legacy(core.String)),
    txStatusStringShort: dart.fieldType(dart.legacy(core.String)),
    txActivation: dart.fieldType(dart.legacy(core.DateTime)),
    mode: dart.fieldType(dart.legacy(core.String)),
    timestamp: dart.fieldType(dart.legacy(core.DateTime)),
    rssi: dart.fieldType(dart.legacy(core.double)),
    unfiltered: dart.fieldType(dart.legacy(core.double)),
    filtered: dart.fieldType(dart.legacy(core.double)),
    noise: dart.fieldType(dart.legacy(core.double)),
    noiseString: dart.fieldType(dart.legacy(core.double)),
    slope: dart.fieldType(dart.legacy(core.double)),
    intercept: dart.fieldType(dart.legacy(core.double)),
    calType: dart.fieldType(dart.legacy(core.String)),
    lastCalibrationDate: dart.fieldType(dart.legacy(core.DateTime)),
    sessionStart: dart.fieldType(dart.legacy(core.DateTime)),
    batteryTimestamp: dart.fieldType(dart.legacy(core.DateTime)),
    voltageA: dart.fieldType(dart.legacy(core.double)),
    voltageB: dart.fieldType(dart.legacy(core.double)),
    temperature: dart.fieldType(dart.legacy(core.double)),
    resistance: dart.fieldType(dart.legacy(core.double))
  }));
  var iob$ = dart.privateName(json_data, "IOBData.iob");
  var basalIob$ = dart.privateName(json_data, "IOBData.basalIob");
  var activity$ = dart.privateName(json_data, "IOBData.activity");
  var time$ = dart.privateName(json_data, "IOBData.time");
  json_data.IOBData = class IOBData extends json_data.JsonData {
    get iob() {
      return this[iob$];
    }
    set iob(value) {
      this[iob$] = value;
    }
    get basalIob() {
      return this[basalIob$];
    }
    set basalIob(value) {
      this[basalIob$] = value;
    }
    get activity() {
      return this[activity$];
    }
    set activity(value) {
      this[activity$] = value;
    }
    get time() {
      return this[time$];
    }
    set time(value) {
      this[time$] = value;
    }
    get copy() {
      let t23;
      t23 = new json_data.IOBData.new();
      return (() => {
        t23.iob = this.iob;
        t23.basalIob = this.basalIob;
        t23.activity = this.activity;
        t23.time = this.time.add(new core.Duration.new({days: 0}));
        return t23;
      })();
    }
    static fromJson(json) {
      let ret = new json_data.IOBData.new();
      if (json == null) return ret;
      ret.iob = json_data.JsonData.toDouble(json[$_get]("iob"));
      ret.basalIob = json_data.JsonData.toDouble(json[$_get]("basaliob"));
      ret.activity = json_data.JsonData.toDouble(json[$_get]("activity"));
      ret.time = json_data.JsonData.toDate(json[$_get]("time"));
      return ret;
    }
  };
  (json_data.IOBData.new = function() {
    this[iob$] = null;
    this[basalIob$] = null;
    this[activity$] = null;
    this[time$] = null;
    json_data.IOBData.__proto__.new.call(this);
    ;
  }).prototype = json_data.IOBData.prototype;
  dart.addTypeTests(json_data.IOBData);
  dart.addTypeCaches(json_data.IOBData);
  dart.setGetterSignature(json_data.IOBData, () => ({
    __proto__: dart.getGetters(json_data.IOBData.__proto__),
    copy: dart.legacy(json_data.IOBData)
  }));
  dart.setLibraryUri(json_data.IOBData, L2);
  dart.setFieldSignature(json_data.IOBData, () => ({
    __proto__: dart.getFields(json_data.IOBData.__proto__),
    iob: dart.fieldType(dart.legacy(core.double)),
    basalIob: dart.fieldType(dart.legacy(core.double)),
    activity: dart.fieldType(dart.legacy(core.double)),
    time: dart.fieldType(dart.legacy(core.DateTime))
  }));
  var iob$0 = dart.privateName(json_data, "LoopData.iob");
  json_data.LoopData = class LoopData extends json_data.JsonData {
    get iob() {
      return this[iob$0];
    }
    set iob(value) {
      this[iob$0] = value;
    }
    get copy() {
      let t23;
      t23 = new json_data.LoopData.new();
      return (() => {
        t23.iob = this.iob;
        return t23;
      })();
    }
    static fromJson(json) {
      let ret = new json_data.LoopData.new();
      if (json == null) return ret;
      ret.iob = json_data.IOBData.fromJson(MapLOfStringL$dynamic().as(json[$_get]("iob")));
      return ret;
    }
  };
  (json_data.LoopData.new = function() {
    this[iob$0] = null;
    json_data.LoopData.__proto__.new.call(this);
    ;
  }).prototype = json_data.LoopData.prototype;
  dart.addTypeTests(json_data.LoopData);
  dart.addTypeCaches(json_data.LoopData);
  dart.setGetterSignature(json_data.LoopData, () => ({
    __proto__: dart.getGetters(json_data.LoopData.__proto__),
    copy: dart.legacy(json_data.LoopData)
  }));
  dart.setLibraryUri(json_data.LoopData, L2);
  dart.setFieldSignature(json_data.LoopData, () => ({
    __proto__: dart.getFields(json_data.LoopData.__proto__),
    iob: dart.fieldType(dart.legacy(json_data.IOBData))
  }));
  var device$ = dart.privateName(json_data, "DeviceStatusData.device");
  var createdAt$0 = dart.privateName(json_data, "DeviceStatusData.createdAt");
  var openAPS = dart.privateName(json_data, "DeviceStatusData.openAPS");
  var loop = dart.privateName(json_data, "DeviceStatusData.loop");
  var pump = dart.privateName(json_data, "DeviceStatusData.pump");
  var uploader = dart.privateName(json_data, "DeviceStatusData.uploader");
  var xdripjs = dart.privateName(json_data, "DeviceStatusData.xdripjs");
  json_data.DeviceStatusData = class DeviceStatusData extends json_data.JsonData {
    get device() {
      return this[device$];
    }
    set device(value) {
      this[device$] = value;
    }
    get createdAt() {
      return this[createdAt$0];
    }
    set createdAt(value) {
      this[createdAt$0] = value;
    }
    get openAPS() {
      return this[openAPS];
    }
    set openAPS(value) {
      this[openAPS] = value;
    }
    get loop() {
      return this[loop];
    }
    set loop(value) {
      this[loop] = value;
    }
    get pump() {
      return this[pump];
    }
    set pump(value) {
      this[pump] = value;
    }
    get uploader() {
      return this[uploader];
    }
    set uploader(value) {
      this[uploader] = value;
    }
    get xdripjs() {
      return this[xdripjs];
    }
    set xdripjs(value) {
      this[xdripjs] = value;
    }
    static fromJson(json) {
      let ret = new json_data.DeviceStatusData.new();
      if (json == null) return ret;
      ret.device = json_data.JsonData.toText(json[$_get]("device"));
      ret.createdAt = json_data.JsonData.toDate(json[$_get]("created_at"));
      ret.openAPS = json_data.LoopData.fromJson(MapLOfStringL$dynamic().as(json[$_get]("openaps")));
      ret.loop = json_data.LoopData.fromJson(MapLOfStringL$dynamic().as(json[$_get]("loop")));
      ret.pump = json_data.PumpData.fromJson(MapLOfStringL$dynamic().as(json[$_get]("pump")));
      ret.uploader = json_data.UploaderData.fromJson(MapLOfStringL$dynamic().as(json[$_get]("uploader")));
      ret.xdripjs = json_data.XDripJSData.fromJson(MapLOfStringL$dynamic().as(json[$_get]("xdripjs")));
      return ret;
    }
  };
  (json_data.DeviceStatusData.new = function() {
    this[device$] = null;
    this[createdAt$0] = null;
    this[openAPS] = null;
    this[loop] = null;
    this[pump] = null;
    this[uploader] = null;
    this[xdripjs] = null;
    json_data.DeviceStatusData.__proto__.new.call(this);
    ;
  }).prototype = json_data.DeviceStatusData.prototype;
  dart.addTypeTests(json_data.DeviceStatusData);
  dart.addTypeCaches(json_data.DeviceStatusData);
  dart.setLibraryUri(json_data.DeviceStatusData, L2);
  dart.setFieldSignature(json_data.DeviceStatusData, () => ({
    __proto__: dart.getFields(json_data.DeviceStatusData.__proto__),
    device: dart.fieldType(dart.legacy(core.String)),
    createdAt: dart.fieldType(dart.legacy(core.DateTime)),
    openAPS: dart.fieldType(dart.legacy(json_data.LoopData)),
    loop: dart.fieldType(dart.legacy(json_data.LoopData)),
    pump: dart.fieldType(dart.legacy(json_data.PumpData)),
    uploader: dart.fieldType(dart.legacy(json_data.UploaderData)),
    xdripjs: dart.fieldType(dart.legacy(json_data.XDripJSData))
  }));
  var iob$1 = dart.privateName(json_data, "CalcIOBData.iob");
  var activity$0 = dart.privateName(json_data, "CalcIOBData.activity");
  var lastBolus$ = dart.privateName(json_data, "CalcIOBData.lastBolus");
  json_data.CalcIOBData = class CalcIOBData extends core.Object {
    get iob() {
      return this[iob$1];
    }
    set iob(value) {
      this[iob$1] = value;
    }
    get activity() {
      return this[activity$0];
    }
    set activity(value) {
      this[activity$0] = value;
    }
    get lastBolus() {
      return this[lastBolus$];
    }
    set lastBolus(value) {
      this[lastBolus$] = value;
    }
  };
  (json_data.CalcIOBData.new = function(iob, activity, lastBolus) {
    this[iob$1] = iob;
    this[activity$0] = activity;
    this[lastBolus$] = lastBolus;
    ;
  }).prototype = json_data.CalcIOBData.prototype;
  dart.addTypeTests(json_data.CalcIOBData);
  dart.addTypeCaches(json_data.CalcIOBData);
  dart.setLibraryUri(json_data.CalcIOBData, L2);
  dart.setFieldSignature(json_data.CalcIOBData, () => ({
    __proto__: dart.getFields(json_data.CalcIOBData.__proto__),
    iob: dart.fieldType(dart.legacy(core.double)),
    activity: dart.fieldType(dart.legacy(core.double)),
    lastBolus: dart.fieldType(dart.legacy(json_data.TreatmentData))
  }));
  var decayedBy$ = dart.privateName(json_data, "CalcCOBData.decayedBy");
  var isDecaying$ = dart.privateName(json_data, "CalcCOBData.isDecaying");
  var carbs_hr$ = dart.privateName(json_data, "CalcCOBData.carbs_hr");
  var rawCarbImpact$ = dart.privateName(json_data, "CalcCOBData.rawCarbImpact");
  var cob$ = dart.privateName(json_data, "CalcCOBData.cob");
  var lastCarbs$ = dart.privateName(json_data, "CalcCOBData.lastCarbs");
  json_data.CalcCOBData = class CalcCOBData extends core.Object {
    get decayedBy() {
      return this[decayedBy$];
    }
    set decayedBy(value) {
      this[decayedBy$] = value;
    }
    get isDecaying() {
      return this[isDecaying$];
    }
    set isDecaying(value) {
      this[isDecaying$] = value;
    }
    get carbs_hr() {
      return this[carbs_hr$];
    }
    set carbs_hr(value) {
      this[carbs_hr$] = value;
    }
    get rawCarbImpact() {
      return this[rawCarbImpact$];
    }
    set rawCarbImpact(value) {
      this[rawCarbImpact$] = value;
    }
    get cob() {
      return this[cob$];
    }
    set cob(value) {
      this[cob$] = value;
    }
    get lastCarbs() {
      return this[lastCarbs$];
    }
    set lastCarbs(value) {
      this[lastCarbs$] = value;
    }
  };
  (json_data.CalcCOBData.new = function(decayedBy, isDecaying, carbs_hr, rawCarbImpact, cob, lastCarbs) {
    this[decayedBy$] = decayedBy;
    this[isDecaying$] = isDecaying;
    this[carbs_hr$] = carbs_hr;
    this[rawCarbImpact$] = rawCarbImpact;
    this[cob$] = cob;
    this[lastCarbs$] = lastCarbs;
    ;
  }).prototype = json_data.CalcCOBData.prototype;
  dart.addTypeTests(json_data.CalcCOBData);
  dart.addTypeCaches(json_data.CalcCOBData);
  dart.setLibraryUri(json_data.CalcCOBData, L2);
  dart.setFieldSignature(json_data.CalcCOBData, () => ({
    __proto__: dart.getFields(json_data.CalcCOBData.__proto__),
    decayedBy: dart.fieldType(dart.legacy(core.DateTime)),
    isDecaying: dart.fieldType(dart.legacy(core.bool)),
    carbs_hr: dart.fieldType(dart.legacy(core.int)),
    rawCarbImpact: dart.fieldType(dart.legacy(core.double)),
    cob: dart.fieldType(dart.legacy(core.double)),
    lastCarbs: dart.fieldType(dart.legacy(json_data.TreatmentData))
  }));
  var _bloody = dart.privateName(json_data, "_bloody");
  var _profile = dart.privateName(json_data, "_profile");
  var prevDay = dart.privateName(json_data, "DayData.prevDay");
  var date$0 = dart.privateName(json_data, "DayData.date");
  var basalData$ = dart.privateName(json_data, "DayData.basalData");
  var lowCount = dart.privateName(json_data, "DayData.lowCount");
  var lowerCount = dart.privateName(json_data, "DayData.lowerCount");
  var normCount = dart.privateName(json_data, "DayData.normCount");
  var highCount = dart.privateName(json_data, "DayData.highCount");
  var higherCount = dart.privateName(json_data, "DayData.higherCount");
  var stdLowCount = dart.privateName(json_data, "DayData.stdLowCount");
  var stdLowerCount = dart.privateName(json_data, "DayData.stdLowerCount");
  var stdNormCount = dart.privateName(json_data, "DayData.stdNormCount");
  var stdHighCount = dart.privateName(json_data, "DayData.stdHighCount");
  var stdHigherCount = dart.privateName(json_data, "DayData.stdHigherCount");
  var entryCountValid = dart.privateName(json_data, "DayData.entryCountValid");
  var totalCount = dart.privateName(json_data, "DayData.totalCount");
  var entryCountInvalid = dart.privateName(json_data, "DayData.entryCountInvalid");
  var carbCount = dart.privateName(json_data, "DayData.carbCount");
  var carbs$ = dart.privateName(json_data, "DayData.carbs");
  var min = dart.privateName(json_data, "DayData.min");
  var max = dart.privateName(json_data, "DayData.max");
  var mid = dart.privateName(json_data, "DayData.mid");
  var varianz = dart.privateName(json_data, "DayData.varianz");
  var entries = dart.privateName(json_data, "DayData.entries");
  var treatments = dart.privateName(json_data, "DayData.treatments");
  var devicestatusList = dart.privateName(json_data, "DayData.devicestatusList");
  json_data.DayData = class DayData extends core.Object {
    get prevDay() {
      return this[prevDay];
    }
    set prevDay(value) {
      this[prevDay] = value;
    }
    get date() {
      return this[date$0];
    }
    set date(value) {
      this[date$0] = value;
    }
    get basalData() {
      return this[basalData$];
    }
    set basalData(value) {
      this[basalData$] = value;
    }
    get lowCount() {
      return this[lowCount];
    }
    set lowCount(value) {
      this[lowCount] = value;
    }
    get lowerCount() {
      return this[lowerCount];
    }
    set lowerCount(value) {
      this[lowerCount] = value;
    }
    get normCount() {
      return this[normCount];
    }
    set normCount(value) {
      this[normCount] = value;
    }
    get highCount() {
      return this[highCount];
    }
    set highCount(value) {
      this[highCount] = value;
    }
    get higherCount() {
      return this[higherCount];
    }
    set higherCount(value) {
      this[higherCount] = value;
    }
    get stdLowCount() {
      return this[stdLowCount];
    }
    set stdLowCount(value) {
      this[stdLowCount] = value;
    }
    get stdLowerCount() {
      return this[stdLowerCount];
    }
    set stdLowerCount(value) {
      this[stdLowerCount] = value;
    }
    get stdNormCount() {
      return this[stdNormCount];
    }
    set stdNormCount(value) {
      this[stdNormCount] = value;
    }
    get stdHighCount() {
      return this[stdHighCount];
    }
    set stdHighCount(value) {
      this[stdHighCount] = value;
    }
    get stdHigherCount() {
      return this[stdHigherCount];
    }
    set stdHigherCount(value) {
      this[stdHigherCount] = value;
    }
    get entryCountValid() {
      return this[entryCountValid];
    }
    set entryCountValid(value) {
      this[entryCountValid] = value;
    }
    get totalCount() {
      return this[totalCount];
    }
    set totalCount(value) {
      this[totalCount] = value;
    }
    get entryCountInvalid() {
      return this[entryCountInvalid];
    }
    set entryCountInvalid(value) {
      this[entryCountInvalid] = value;
    }
    get carbCount() {
      return this[carbCount];
    }
    set carbCount(value) {
      this[carbCount] = value;
    }
    get carbs() {
      return this[carbs$];
    }
    set carbs(value) {
      this[carbs$] = value;
    }
    get min() {
      return this[min];
    }
    set min(value) {
      this[min] = value;
    }
    get max() {
      return this[max];
    }
    set max(value) {
      this[max] = value;
    }
    get mid() {
      return this[mid];
    }
    set mid(value) {
      this[mid] = value;
    }
    get varianz() {
      return this[varianz];
    }
    set varianz(value) {
      this[varianz] = value;
    }
    get entries() {
      return this[entries];
    }
    set entries(value) {
      this[entries] = value;
    }
    get treatments() {
      return this[treatments];
    }
    set treatments(value) {
      this[treatments] = value;
    }
    get devicestatusList() {
      return this[devicestatusList];
    }
    set devicestatusList(value) {
      this[devicestatusList] = value;
    }
    get minText() {
      return this.min === 10000 ? "" : dart.str(this.min);
    }
    get maxText() {
      return this.max === -10000 ? "" : dart.str(this.max);
    }
    stdAbw(isMGDL) {
      let ret = math.sqrt(this.varianz);
      if (!dart.test(isMGDL)) ret = ret / 18.02;
      return ret;
    }
    get avgGluc() {
      let ret = 0.0;
      let count = 0;
      for (let entry of this.entries) {
        if (!dart.test(entry.isGlucInvalid)) {
          ret = ret + dart.notNull(entry.gluc);
          count = count + 1;
        }
      }
      return count > 0 ? ret / count : 0.0;
    }
    get getSensorActive() {
      let count = 0;
      for (let entry of this.entries) {
        if (!dart.test(entry.isGlucInvalid)) {
          count = count + 1;
        }
      }
      return count > 0 ? count / dart.notNull(this.totalCount) * 100 : 0.0;
    }
    get varK() {
      let t23;
      return (t23 = this.mid, t23 == null ? 0.0 : t23) !== 0 ? dart.notNull(this.stdAbw(true)) / dart.notNull(this.mid) * 100 : 0.0;
    }
    lowerPrz(g) {
      return this.entryCountValid === 0 ? 0.0 : dart.notNull(dart.test(g.ppStandardLimits) ? this.stdLowerCount : this.lowerCount) / dart.notNull(this.entryCountValid) * 100;
    }
    lowPrz(g) {
      return this.entryCountValid === 0 ? 0.0 : dart.notNull(dart.test(g.ppStandardLimits) ? this.stdLowCount : this.lowCount) / dart.notNull(this.entryCountValid) * 100;
    }
    normPrz(g) {
      return this.entryCountValid === 0 ? 0.0 : dart.notNull(dart.test(g.ppStandardLimits) ? this.stdNormCount : this.normCount) / dart.notNull(this.entryCountValid) * 100;
    }
    highPrz(g) {
      return this.entryCountValid === 0 ? 0.0 : dart.notNull(dart.test(g.ppStandardLimits) ? this.stdHighCount : this.highCount) / dart.notNull(this.entryCountValid) * 100;
    }
    higherPrz(g) {
      return this.entryCountValid === 0 ? 0.0 : dart.notNull(dart.test(g.ppStandardLimits) ? this.stdHigherCount : this.higherCount) / dart.notNull(this.entryCountValid) * 100;
    }
    get avgCarbs() {
      return dart.notNull(this.carbCount) > 0 ? dart.notNull(this.carbs) / dart.notNull(this.carbCount) : 0.0;
    }
    isSameDay(time) {
      if (this.date.year != time.year) return false;
      if (this.date.month != time.month) return false;
      return this.date.day == time.day;
    }
    isSameDay_(d1, d2) {
      return d1.year == d2.year && d1.month == d2.month && d1.day == d2.day;
    }
    get ieCorrectionSum() {
      let ret = 0.0;
      for (let entry of this.treatments) {
        if (!dart.test(entry.isCarbBolus) && !dart.test(entry.isSMB)) {
          ret = ret + dart.notNull(entry.bolusInsulin);
        }
      }
      return ret;
    }
    get ieCarbSum() {
      let ret = 0.0;
      for (let entry of this.treatments) {
        if (dart.test(entry.isCarbBolus) && !dart.test(entry.isSMB)) {
          ret = ret + dart.notNull(entry.bolusInsulin);
        }
      }
      return ret;
    }
    get ieSMBSum() {
      let ret = 0.0;
      for (let entry of this.treatments) {
        if (dart.test(entry.isSMB)) ret = ret + dart.notNull(entry.bolusInsulin);
      }
      return ret;
    }
    getBolusSum(isCarbBolus) {
      let ret = 0.0;
      for (let entry of this.treatments) {
        if (dart.equals(entry.isCarbBolus, isCarbBolus)) ret = ret + dart.notNull(entry.bolusInsulin);
      }
      return ret;
    }
    get ieBolusSum() {
      let t23;
      let ret = 0.0;
      for (let entry of this.treatments) {
        ret = ret + dart.notNull((t23 = entry.bolusInsulin, t23 == null ? 0 : t23));
      }
      return ret;
    }
    ieBasalSum(useStore) {
      let t23, t23$;
      if (dart.test(useStore)) {
        return this.basalData.store.ieBasalSum;
      }
      let ret = 0.0;
      for (let entry of this.profile) {
        ret = ret + dart.notNull((t23 = entry.value, t23 == null ? 0.0 : t23)) * dart.notNull((t23$ = entry.duration, t23$ == null ? 0 : t23$)) / 3600.0;
      }
      return ret;
    }
    get basalZeroDuration() {
      let ret = 0;
      for (let entry of this.profile) {
        if (entry.value === 0 && entry.duration != null) ret = ret + dart.notNull(entry.duration);
      }
      return ret;
    }
    get bloody() {
      return this[_bloody];
    }
    get profile() {
      let t23;
      if (this[_profile] != null) return this[_profile];
      this[_profile] = JSArrayOfProfileEntryDataL().of([]);
      if (dart.test(this.basalData.store.listBasal[$isEmpty])) return this[_profile];
      for (let entry of this.basalData.store.listBasal) {
        let temp = new json_data.ProfileEntryData.new(this.basalData.store.timezone, entry.time(this.date, true));
        temp.value = entry.value;
        temp.orgValue = entry.value;
        this[_profile][$add](temp);
      }
      if (dart.notNull(this[_profile][$first].time(this.date, false).hour) > 0) {
        let clone = this[_profile][$first].clone(new core.DateTime.new(this.date.year, this.date.month, this.date.day, 0, 0));
        this[_profile][$insert](0, clone);
      }
      this[_profile][$sort](dart.fn((a, b) => a.time(this.date).compareTo(b.time(this.date)), ProfileEntryDataLAndProfileEntryDataLTointL()));
      let last = this[_profile][$first].copy;
      let lastTime = last.time(this.date);
      for (let t of this.treatments) {
        if (!dart.test(t.isTempBasal)) continue;
        let doAdd = true;
        if (dart.notNull(t.duration) <= 0) {
          if (t.key600[$toLowerCase]()[$startsWith]("resume")) {
            t.duration = 86399 - dart.notNull(t.timeForCalc);
            t[_percent] = 0;
          } else {
            doAdd = false;
          }
        }
        if (doAdd) {
          let entry = json_data.ProfileEntryData.fromTreatment(this.basalData.store.timezone, t);
          entry.value = null;
          this[_profile][$add](entry);
        }
      }
      this[_profile][$sort](dart.fn((a, b) => a.time(this.date).compareTo(b.time(this.date)), ProfileEntryDataLAndProfileEntryDataLTointL()));
      let isInserted = false;
      for (let i = 0; i < dart.notNull(this[_profile][$length]); i = i + 1) {
        let entry = this[_profile][$_get](i);
        entry.orgValue = entry.value;
        if (entry.value == null) {
          entry.orgValue = last.orgValue;
          entry.value = entry.adjustedValue(last.orgValue);
          let endTime = entry.time(this.date).add(new core.Duration.new({seconds: entry.duration}));
          if (i < dart.notNull(this[_profile][$length]) - 1) {
            if (dart.test(endTime.isBefore(this[_profile][$_get](i + 1).time(this.date)))) {
              let temp = new json_data.ProfileEntryData.new(this.basalData.store.timezone, endTime);
              if (i < dart.notNull(this[_profile][$length]) - 2) temp.duration = this[_profile][$_get](i + 2)[_time].difference(endTime).inSeconds;
              temp.value = last.orgValue;
              temp.orgValue = last.orgValue;
              this[_profile][$insert](i + 1, temp);
            }
          } else if (i === dart.notNull(this[_profile][$length]) - 1 && dart.test(endTime.isBefore(new core.DateTime.new(lastTime.year, lastTime.month, lastTime.day, 23, 59, 59)))) {
            let temp = new json_data.ProfileEntryData.new(this.basalData.store.timezone, endTime);
            temp.transferCalcValues(last);
            temp.value = last.orgValue;
            temp.orgValue = last.orgValue;
            this[_profile][$add](temp);
          }
          isInserted = false;
        } else {
          if (dart.test(last.isCalculated) && !isInserted) {
            isInserted = false;
            let endTime = lastTime.add(new core.Duration.new({seconds: last.duration}));
            if (dart.test(endTime.isAfter(entry.time(this.date)))) {
              let duration = endTime.difference(entry.time(this.date)).inSeconds;
              let clone = entry.clone(entry.time(this.date).add(new core.Duration.new({seconds: duration})));
              entry.transferCalcValues(last);
              entry.value = entry.adjustedValue(entry.orgValue);
              let currDuration = entry.duration;
              if (i < dart.notNull(this[_profile][$length]) - 1) {
                currDuration = this[_profile][$_get](i + 1).time(this.date).difference(entry.time(this.date)).inSeconds;
              }
              if (dart.notNull(duration) < dart.notNull(currDuration)) {
                clone.duration = dart.notNull(currDuration) - dart.notNull(duration);
                this[_profile][$insert](i + 1, clone);
                isInserted = true;
              }
              entry.duration = duration;
            }
          }
        }
        last = entry;
        lastTime = last.time(this.date);
      }
      for (let i = 1; i < dart.notNull(this[_profile][$length]); i = i + 1) {
        this[_profile][$_get](i - 1).duration = this[_profile][$_get](i).time(this.date).difference(this[_profile][$_get](i - 1).time(this.date)).inSeconds;
      }
      this[_profile][$last].duration = 86399 - dart.notNull(this[_profile][$last].timeForCalc);
      this[_profile][$removeWhere](dart.fn(p => p.duration === 0, ProfileEntryDataLToboolL()));
      let ret = JSArrayOfProfileEntryDataL().of([]);
      for (let i = 1; i < dart.notNull(this[_profile][$length]); i = i + 1) {
        let prev = this[_profile][$_get](i - 1);
        let curr = this[_profile][$_get](i);
        if (prev.value == curr.value) {
          t23 = curr;
          t23.duration = dart.notNull(t23.duration) + dart.notNull(prev.duration);
          curr[_time] = prev[_time];
        } else {
          ret[$add](prev);
        }
      }
      ret[$add](this[_profile][$last]);
      this[_profile] = ret;
      return this[_profile];
    }
    init(opts) {
      let nextDay = opts && 'nextDay' in opts ? opts.nextDay : null;
      let keepProfile = opts && 'keepProfile' in opts ? opts.keepProfile : false;
      this.min = 10000.0;
      this.max = -10000.0;
      this.mid = 0.0;
      this.entryCountValid = 0;
      this.entryCountInvalid = 0;
      this.normCount = 0;
      this.highCount = 0;
      this.lowCount = 0;
      this.lowerCount = 0;
      this.stdNormCount = 0;
      this.stdHighCount = 0;
      this.stdLowCount = 0;
      this.stdLowerCount = 0;
      this.carbCount = 0;
      this.carbs = 0.0;
      for (let entry of this.entries) {
        if (!dart.test(entry.isGlucInvalid)) {
          this.entryCountValid = dart.notNull(this.entryCountValid) + 1;
          if (dart.notNull(entry.gluc) < dart.notNull(this.basalData.targetLow)) {
            this.lowCount = dart.notNull(this.lowCount) + 1;
            if (dart.notNull(entry.gluc) < dart.notNull(this.basalData.targetLower)) {
              this.lowerCount = dart.notNull(this.lowerCount) + 1;
            }
          } else if (dart.notNull(entry.gluc) > dart.notNull(this.basalData.targetHigh)) {
            this.highCount = dart.notNull(this.highCount) + 1;
            if (dart.notNull(entry.gluc) > dart.notNull(this.basalData.targetHigher)) {
              this.higherCount = dart.notNull(this.higherCount) + 1;
            }
          } else {
            this.normCount = dart.notNull(this.normCount) + 1;
          }
          if (dart.notNull(entry.gluc) < dart.notNull(globals.Globals.stdLow)) {
            this.stdLowCount = dart.notNull(this.stdLowCount) + 1;
            if (dart.notNull(entry.gluc) < dart.notNull(globals.Globals.stdLower)) {
              this.stdLowerCount = dart.notNull(this.stdLowerCount) + 1;
            }
          } else if (dart.notNull(entry.gluc) > dart.notNull(globals.Globals.stdHigh)) {
            this.stdHighCount = dart.notNull(this.stdHighCount) + 1;
            if (dart.notNull(entry.gluc) > dart.notNull(globals.Globals.stdHigher)) {
              this.stdHigherCount = dart.notNull(this.stdHigherCount) + 1;
            }
          } else {
            this.stdNormCount = dart.notNull(this.stdNormCount) + 1;
          }
          this.mid = dart.notNull(this.mid) + dart.notNull(entry.gluc);
          this.min = math.min(doubleL(), this.min, entry.gluc);
          this.max = math.max(doubleL(), this.max, entry.gluc);
        } else {
          this.entryCountInvalid = dart.notNull(this.entryCountInvalid) + 1;
        }
      }
      this.mid = this.entryCountValid === 0 ? 0.0 : dart.notNull(this.mid) / dart.notNull(this.entryCountValid);
      this.varianz = 0.0;
      for (let entry of this.entries) {
        if (!dart.test(entry.isGlucInvalid)) this.varianz = dart.notNull(this.varianz) + math.pow(dart.notNull(entry.gluc) - dart.notNull(this.mid), 2);
      }
      this.varianz = dart.notNull(this.varianz) / dart.notNull(this.entryCountValid);
      for (let t of this.treatments) {
        if (dart.notNull(t.carbs) > 0) {
          this.carbCount = dart.notNull(this.carbCount) + 1;
          this.carbs = dart.notNull(this.carbs) + dart.notNull(t.carbs);
        }
      }
      if (!dart.test(keepProfile)) {
        this[_profile] = null;
      }
    }
    findNearest(eList, tList, check, opts) {
      let glucoseType = opts && 'glucoseType' in opts ? opts.glucoseType : null;
      let maxMinuteDiff = opts && 'maxMinuteDiff' in opts ? opts.maxMinuteDiff : 30;
      eList == null ? eList = JSArrayOfEntryDataL().of([]) : null;
      tList == null ? tList = JSArrayOfTreatmentDataL().of([]) : null;
      if (dart.test(eList[$isEmpty]) && dart.test(tList[$isEmpty])) {
        return null;
      }
      let ret = null;
      let retDiff = 10000;
      for (let entry of eList) {
        if (dart.notNull(entry.gluc) <= 0) continue;
        let time = new core.DateTime.new(check.year, check.month, check.day, entry.time.hour, entry.time.minute);
        if (time._equals(check)) return entry;
        let diff = time.difference(check).inSeconds[$abs]();
        if (diff < retDiff && diff <= dart.notNull(maxMinuteDiff) * 60) {
          ret = entry;
          retDiff = diff;
        }
      }
      let list = tList[$where](dart.fn(t => t.isBloody, TreatmentDataLToboolL()))[$toList]();
      for (let treat of list) {
        let time = new core.DateTime.new(check.year, check.month, check.day, treat.createdAt.hour, treat.createdAt.minute);
        if (time._equals(check)) return treat;
        let diff = time.difference(check).inSeconds[$abs]();
        if (diff < retDiff && diff <= dart.notNull(maxMinuteDiff) * 60) {
          ret = treat;
          retDiff = diff;
        }
      }
      return ret;
    }
    iob(data, time, yesterday) {
      let totalIOB = 0.0;
      let totalActivity = 0.0;
      let lastBolus = null;
      if (time == null) return new json_data.CalcIOBData.new(0.0, 0.0, null);
      let check = dart.notNull(time.millisecondsSinceEpoch) - dart.notNull(data.globals.ppMaxInsulinEffectInMS);
      let profile = data.profile(time);
      let list = JSArrayOfTreatmentDataL().of([]);
      if (yesterday != null) {
        list[$addAll](yesterday.treatments);
      }
      list[$addAll](this.treatments);
      let totalSave = totalIOB;
      for (let t of list) {
        if (dart.notNull(t.createdAt.millisecondsSinceEpoch) < check) {
          continue;
        }
        if (dart.notNull(t.createdAt.millisecondsSinceEpoch) > dart.notNull(time.millisecondsSinceEpoch)) {
          continue;
        }
        let tIOB = t.calcIOB(profile, time);
        if (tIOB != null && tIOB.iob != null) {
          if (tIOB.iob !== 0) lastBolus = t;
          totalIOB = totalIOB + dart.notNull(tIOB.iob);
        }
        if (tIOB != null && tIOB.activity != null) totalActivity = totalActivity + dart.notNull(tIOB.activity);
      }
      if (totalIOB === totalSave) {
      }
      return new json_data.CalcIOBData.new(totalIOB, totalActivity, TreatmentDataL().as(lastBolus));
    }
    calcIobTotal(data, time, yesterday) {
      time == null ? time = new core.DateTime.now() : null;
      return this.iob(data, time, yesterday);
    }
    cob(data, time, yesterday) {
      let t23, t23$, t23$0, t23$1;
      let totalCOB = 0.0;
      let lastCarbs = null;
      let isDecaying = false;
      let lastDecayedBy = null;
      let check = dart.notNull(time.hour) * 3600 + dart.notNull(time.minute) * 60 + dart.notNull(time.second);
      let profile = data.profile(time);
      let list = JSArrayOfTreatmentDataL().of([]);
      if (yesterday != null) {
        let prev = yesterday.cob(data, new core.DateTime.new(yesterday.date.year, yesterday.date.month, yesterday.date.day, 23, 59, 59), null);
        lastCarbs = prev.lastCarbs;
        let t = new json_data.TreatmentData.new();
        t[_carbs] = prev.cob;
        t.isECarb = false;
        t.createdAt = new core.DateTime.new(time.year, time.month, time.day, 0, 0, 0);
        list[$add](t);
      }
      list[$addAll](this.treatments);
      for (let t of list) {
        if (!dart.test(this.isSameDay_(t.createdAt, time)) || dart.notNull(t.timeForCalc) > check) continue;
        if (t.carbs != null && dart.notNull(t.carbs) > 0) {
          let temp = new (IdentityMapOfStringL$ObjectL()).from(["totalCOB", totalCOB, "isDecaying", isDecaying, "lastDecayedBy", lastDecayedBy]);
          t.calcTotalCOB(data, yesterday, temp, profile, time, dart.bind(this, 'iob'));
          totalCOB = doubleL().as(dart.dsend(temp, '_get', ["totalCOB"]));
          isDecaying = boolL().as(dart.dsend(temp, '_get', ["isDecaying"]));
          lastDecayedBy = DateTimeL().as(dart.dsend(temp, '_get', ["lastDecayedBy"]));
          lastCarbs = t;
        }
      }
      let t = new json_data.TreatmentData.new();
      t.createdAt = time;
      let temp = new (IdentityMapOfStringL$ObjectL()).from(["totalCOB", totalCOB, "isDecaying", isDecaying, "lastDecayedBy", lastDecayedBy]);
      t.calcTotalCOB(data, yesterday, temp, profile, time, dart.bind(this, 'iob'));
      totalCOB = doubleL().as(dart.dsend(temp, '_get', ["totalCOB"]));
      isDecaying = boolL().as(dart.dsend(temp, '_get', ["isDecaying"]));
      lastDecayedBy = DateTimeL().as(dart.dsend(temp, '_get', ["lastDecayedBy"]));
      let sens = (t23$ = (t23 = profile.store.listSens[$lastWhere](dart.fn(e => dart.notNull(e.timeForCalc) <= check, ProfileEntryDataLToboolL()), {orElse: dart.fn(() => null, VoidToNullN())}), t23 == null ? null : t23.value), t23$ == null ? 0.0 : t23$);
      let carbRatio = (t23$1 = (t23$0 = profile.store.listCarbratio[$lastWhere](dart.fn(e => dart.notNull(e.timeForCalc) <= check, ProfileEntryDataLToboolL()), {orElse: dart.fn(() => null, VoidToNullN())}), t23$0 == null ? null : t23$0.value), t23$1 == null ? 0.0 : t23$1);
      let rawCarbImpact = (dart.test(isDecaying) ? 1 : 0) * dart.notNull(sens) / dart.notNull(carbRatio) * dart.notNull(profile.store.carbRatioPerHour) / 60;
      return new json_data.CalcCOBData.new(lastDecayedBy, isDecaying, profile.store.carbRatioPerHour, rawCarbImpact, totalCOB, lastCarbs);
    }
  };
  (json_data.DayData.new = function(date, basalData) {
    this[prevDay] = null;
    this[date$0] = null;
    this[lowCount] = 0;
    this[lowerCount] = 0;
    this[normCount] = 0;
    this[highCount] = 0;
    this[higherCount] = 0;
    this[stdLowCount] = 0;
    this[stdLowerCount] = 0;
    this[stdNormCount] = 0;
    this[stdHighCount] = 0;
    this[stdHigherCount] = 0;
    this[entryCountValid] = 0;
    this[totalCount] = 288;
    this[entryCountInvalid] = 0;
    this[carbCount] = 0;
    this[carbs$] = 0.0;
    this[min] = null;
    this[max] = null;
    this[mid] = null;
    this[varianz] = 0.0;
    this[entries] = JSArrayOfEntryDataL().of([]);
    this[_bloody] = JSArrayOfEntryDataL().of([]);
    this[treatments] = JSArrayOfTreatmentDataL().of([]);
    this[devicestatusList] = JSArrayOfDeviceStatusDataL().of([]);
    this[_profile] = null;
    this[basalData$] = basalData;
    if (date == null) {
      this.date = new date$.Date.new(0);
    } else {
      this.date = new date$.Date.new(intL().as(dart.dload(date, 'year')), intL().as(dart.dload(date, 'month')), intL().as(dart.dload(date, 'day')));
    }
    let entry = new json_data.EntryData.new();
    entry.type = "mbg";
    entry.mbg = 123.0;
    entry.time = globals.Globals.now;
  }).prototype = json_data.DayData.prototype;
  dart.addTypeTests(json_data.DayData);
  dart.addTypeCaches(json_data.DayData);
  dart.setMethodSignature(json_data.DayData, () => ({
    __proto__: dart.getMethods(json_data.DayData.__proto__),
    stdAbw: dart.fnType(dart.legacy(core.double), [dart.legacy(core.bool)]),
    lowerPrz: dart.fnType(dart.legacy(core.double), [dart.legacy(globals.Globals)]),
    lowPrz: dart.fnType(dart.legacy(core.double), [dart.legacy(globals.Globals)]),
    normPrz: dart.fnType(dart.legacy(core.double), [dart.legacy(globals.Globals)]),
    highPrz: dart.fnType(dart.legacy(core.double), [dart.legacy(globals.Globals)]),
    higherPrz: dart.fnType(dart.legacy(core.double), [dart.legacy(globals.Globals)]),
    isSameDay: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.DateTime)]),
    isSameDay_: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.DateTime), dart.legacy(core.DateTime)]),
    getBolusSum: dart.fnType(dart.legacy(core.double), [dart.legacy(core.bool)]),
    ieBasalSum: dart.fnType(dart.legacy(core.double), [dart.legacy(core.bool)]),
    init: dart.fnType(dart.void, [], {keepProfile: dart.legacy(core.bool), nextDay: dart.legacy(json_data.DayData)}, {}),
    findNearest: dart.fnType(dart.dynamic, [dart.legacy(core.List$(dart.legacy(json_data.EntryData))), dart.legacy(core.List$(dart.legacy(json_data.TreatmentData))), dart.legacy(core.DateTime)], {glucoseType: dart.legacy(core.String), maxMinuteDiff: dart.legacy(core.int)}, {}),
    iob: dart.fnType(dart.legacy(json_data.CalcIOBData), [dart.legacy(json_data.ReportData), dart.legacy(core.DateTime), dart.legacy(json_data.DayData)]),
    calcIobTotal: dart.fnType(dart.legacy(json_data.CalcIOBData), [dart.legacy(json_data.ReportData), dart.legacy(core.DateTime), dart.legacy(json_data.DayData)]),
    cob: dart.fnType(dart.legacy(json_data.CalcCOBData), [dart.legacy(json_data.ReportData), dart.legacy(core.DateTime), dart.legacy(json_data.DayData)])
  }));
  dart.setGetterSignature(json_data.DayData, () => ({
    __proto__: dart.getGetters(json_data.DayData.__proto__),
    minText: dart.legacy(core.String),
    maxText: dart.legacy(core.String),
    avgGluc: dart.legacy(core.double),
    getSensorActive: dart.legacy(core.double),
    varK: dart.legacy(core.double),
    avgCarbs: dart.legacy(core.double),
    ieCorrectionSum: dart.legacy(core.double),
    ieCarbSum: dart.legacy(core.double),
    ieSMBSum: dart.legacy(core.double),
    ieBolusSum: dart.legacy(core.double),
    basalZeroDuration: dart.legacy(core.int),
    bloody: dart.legacy(core.List$(dart.legacy(json_data.EntryData))),
    profile: dart.legacy(core.List$(dart.legacy(json_data.ProfileEntryData)))
  }));
  dart.setLibraryUri(json_data.DayData, L2);
  dart.setFieldSignature(json_data.DayData, () => ({
    __proto__: dart.getFields(json_data.DayData.__proto__),
    prevDay: dart.fieldType(dart.dynamic),
    date: dart.fieldType(dart.legacy(date$.Date)),
    basalData: dart.fieldType(dart.legacy(json_data.ProfileGlucData)),
    lowCount: dart.fieldType(dart.legacy(core.int)),
    lowerCount: dart.fieldType(dart.legacy(core.int)),
    normCount: dart.fieldType(dart.legacy(core.int)),
    highCount: dart.fieldType(dart.legacy(core.int)),
    higherCount: dart.fieldType(dart.legacy(core.int)),
    stdLowCount: dart.fieldType(dart.legacy(core.int)),
    stdLowerCount: dart.fieldType(dart.legacy(core.int)),
    stdNormCount: dart.fieldType(dart.legacy(core.int)),
    stdHighCount: dart.fieldType(dart.legacy(core.int)),
    stdHigherCount: dart.fieldType(dart.legacy(core.int)),
    entryCountValid: dart.fieldType(dart.legacy(core.int)),
    totalCount: dart.fieldType(dart.legacy(core.int)),
    entryCountInvalid: dart.fieldType(dart.legacy(core.int)),
    carbCount: dart.fieldType(dart.legacy(core.int)),
    carbs: dart.fieldType(dart.legacy(core.double)),
    min: dart.fieldType(dart.legacy(core.double)),
    max: dart.fieldType(dart.legacy(core.double)),
    mid: dart.fieldType(dart.legacy(core.double)),
    varianz: dart.fieldType(dart.legacy(core.double)),
    entries: dart.fieldType(dart.legacy(core.List$(dart.legacy(json_data.EntryData)))),
    [_bloody]: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(json_data.EntryData)))),
    treatments: dart.fieldType(dart.legacy(core.List$(dart.legacy(json_data.TreatmentData)))),
    devicestatusList: dart.fieldType(dart.legacy(core.List$(dart.legacy(json_data.DeviceStatusData)))),
    [_profile]: dart.fieldType(dart.legacy(core.List$(dart.legacy(json_data.ProfileEntryData))))
  }));
  var min$ = dart.privateName(json_data, "StatisticData.min");
  var max$ = dart.privateName(json_data, "StatisticData.max");
  var values = dart.privateName(json_data, "StatisticData.values");
  var entries$ = dart.privateName(json_data, "StatisticData.entries");
  var sum = dart.privateName(json_data, "StatisticData.sum");
  var varianz$ = dart.privateName(json_data, "StatisticData.varianz");
  var median = dart.privateName(json_data, "StatisticData.median");
  json_data.StatisticData = class StatisticData extends core.Object {
    get min() {
      return this[min$];
    }
    set min(value) {
      this[min$] = value;
    }
    get max() {
      return this[max$];
    }
    set max(value) {
      this[max$] = value;
    }
    get values() {
      return this[values];
    }
    set values(value) {
      this[values] = value;
    }
    get entries() {
      return this[entries$];
    }
    set entries(value) {
      this[entries$] = value;
    }
    get sum() {
      return this[sum];
    }
    set sum(value) {
      this[sum] = value;
    }
    get varianz() {
      return this[varianz$];
    }
    set varianz(value) {
      this[varianz$] = value;
    }
    get median() {
      return this[median];
    }
    set median(value) {
      this[median] = value;
    }
    get mid() {
      return dart.test(this.values[$isEmpty]) ? 0.0 : dart.notNull(this.sum) / dart.notNull(this.values[$length]);
    }
    get stdAbw() {
      return math.sqrt(this.varianz);
    }
    add(entry, value) {
      this.values[$add](value);
      this.entries[$add](entry);
      this.sum = dart.notNull(this.sum) + dart.notNull(value);
    }
  };
  (json_data.StatisticData.new = function(min, max) {
    this[values] = JSArrayOfdoubleL().of([]);
    this[entries$] = JSArrayOfEntryDataL().of([]);
    this[sum] = 0.0;
    this[varianz$] = 0.0;
    this[median] = null;
    this[min$] = min;
    this[max$] = max;
    ;
  }).prototype = json_data.StatisticData.prototype;
  dart.addTypeTests(json_data.StatisticData);
  dart.addTypeCaches(json_data.StatisticData);
  dart.setMethodSignature(json_data.StatisticData, () => ({
    __proto__: dart.getMethods(json_data.StatisticData.__proto__),
    add: dart.fnType(dart.void, [dart.legacy(json_data.EntryData), dart.legacy(core.double)])
  }));
  dart.setGetterSignature(json_data.StatisticData, () => ({
    __proto__: dart.getGetters(json_data.StatisticData.__proto__),
    mid: dart.legacy(core.double),
    stdAbw: dart.legacy(core.double)
  }));
  dart.setLibraryUri(json_data.StatisticData, L2);
  dart.setFieldSignature(json_data.StatisticData, () => ({
    __proto__: dart.getFields(json_data.StatisticData.__proto__),
    min: dart.fieldType(dart.legacy(core.double)),
    max: dart.fieldType(dart.legacy(core.double)),
    values: dart.fieldType(dart.legacy(core.List$(dart.legacy(core.double)))),
    entries: dart.fieldType(dart.legacy(core.List$(dart.legacy(json_data.EntryData)))),
    sum: dart.fieldType(dart.legacy(core.double)),
    varianz: dart.fieldType(dart.legacy(core.double)),
    median: dart.fieldType(dart.legacy(core.double))
  }));
  var days = dart.privateName(json_data, "ListData.days");
  var entries$0 = dart.privateName(json_data, "ListData.entries");
  var bloody = dart.privateName(json_data, "ListData.bloody");
  var remaining = dart.privateName(json_data, "ListData.remaining");
  var treatments$ = dart.privateName(json_data, "ListData.treatments");
  var devicestatusList$ = dart.privateName(json_data, "ListData.devicestatusList");
  var catheterCount = dart.privateName(json_data, "ListData.catheterCount");
  var ampulleCount = dart.privateName(json_data, "ListData.ampulleCount");
  var sensorCount = dart.privateName(json_data, "ListData.sensorCount");
  var khCount = dart.privateName(json_data, "ListData.khCount");
  var khAdjust = dart.privateName(json_data, "ListData.khAdjust");
  var khAdjustCount = dart.privateName(json_data, "ListData.khAdjustCount");
  var stat = dart.privateName(json_data, "ListData.stat");
  var ieBolusSum = dart.privateName(json_data, "ListData.ieBolusSum");
  var ieBasalSumDaily = dart.privateName(json_data, "ListData.ieBasalSumDaily");
  var ieBasalSumStore = dart.privateName(json_data, "ListData.ieBasalSumStore");
  var ieMicroBolusSum = dart.privateName(json_data, "ListData.ieMicroBolusSum");
  var gvi = dart.privateName(json_data, "ListData.gvi");
  var gviIdeal = dart.privateName(json_data, "ListData.gviIdeal");
  var gviTotal = dart.privateName(json_data, "ListData.gviTotal");
  var rms = dart.privateName(json_data, "ListData.rms");
  var pgs = dart.privateName(json_data, "ListData.pgs");
  var min$0 = dart.privateName(json_data, "ListData.min");
  var max$0 = dart.privateName(json_data, "ListData.max");
  var validCount = dart.privateName(json_data, "ListData.validCount");
  var addList = dart.privateName(json_data, "ListData.addList");
  json_data.ListData = class ListData extends core.Object {
    get days() {
      return this[days];
    }
    set days(value) {
      this[days] = value;
    }
    get entries() {
      return this[entries$0];
    }
    set entries(value) {
      this[entries$0] = value;
    }
    get bloody() {
      return this[bloody];
    }
    set bloody(value) {
      this[bloody] = value;
    }
    get remaining() {
      return this[remaining];
    }
    set remaining(value) {
      this[remaining] = value;
    }
    get treatments() {
      return this[treatments$];
    }
    set treatments(value) {
      this[treatments$] = value;
    }
    get devicestatusList() {
      return this[devicestatusList$];
    }
    set devicestatusList(value) {
      this[devicestatusList$] = value;
    }
    get catheterCount() {
      return this[catheterCount];
    }
    set catheterCount(value) {
      this[catheterCount] = value;
    }
    get ampulleCount() {
      return this[ampulleCount];
    }
    set ampulleCount(value) {
      this[ampulleCount] = value;
    }
    get sensorCount() {
      return this[sensorCount];
    }
    set sensorCount(value) {
      this[sensorCount] = value;
    }
    get khCount() {
      return this[khCount];
    }
    set khCount(value) {
      this[khCount] = value;
    }
    get khAdjust() {
      return this[khAdjust];
    }
    set khAdjust(value) {
      this[khAdjust] = value;
    }
    get khAdjustCount() {
      return this[khAdjustCount];
    }
    set khAdjustCount(value) {
      this[khAdjustCount] = value;
    }
    get stat() {
      return this[stat];
    }
    set stat(value) {
      this[stat] = value;
    }
    get ieBolusSum() {
      return this[ieBolusSum];
    }
    set ieBolusSum(value) {
      this[ieBolusSum] = value;
    }
    get ieBasalSumDaily() {
      return this[ieBasalSumDaily];
    }
    set ieBasalSumDaily(value) {
      this[ieBasalSumDaily] = value;
    }
    get ieBasalSumStore() {
      return this[ieBasalSumStore];
    }
    set ieBasalSumStore(value) {
      this[ieBasalSumStore] = value;
    }
    get ieMicroBolusSum() {
      return this[ieMicroBolusSum];
    }
    set ieMicroBolusSum(value) {
      this[ieMicroBolusSum] = value;
    }
    get gvi() {
      return this[gvi];
    }
    set gvi(value) {
      this[gvi] = value;
    }
    get gviIdeal() {
      return this[gviIdeal];
    }
    set gviIdeal(value) {
      this[gviIdeal] = value;
    }
    get gviTotal() {
      return this[gviTotal];
    }
    set gviTotal(value) {
      this[gviTotal] = value;
    }
    get rms() {
      return this[rms];
    }
    set rms(value) {
      this[rms] = value;
    }
    get pgs() {
      return this[pgs];
    }
    set pgs(value) {
      this[pgs] = value;
    }
    get min() {
      return this[min$0];
    }
    set min(value) {
      this[min$0] = value;
    }
    get max() {
      return this[max$0];
    }
    set max(value) {
      this[max$0] = value;
    }
    get validCount() {
      return this[validCount];
    }
    set validCount(value) {
      this[validCount] = value;
    }
    get addList() {
      return this[addList];
    }
    set addList(value) {
      this[addList] = value;
    }
    ieBasalSum(fromStore) {
      return dart.test(fromStore) ? this.ieBasalSumStore : this.ieBasalSumDaily;
    }
    TDD(fromStore) {
      return dart.notNull(this.ieBolusSum) + dart.notNull(this.ieBasalSum(fromStore));
    }
    ieBolusPrz(fromStore) {
      return dart.notNull(this.TDD(fromStore)) > 0 ? dart.notNull(this.ieBolusSum) / dart.notNull(this.TDD(fromStore)) * 100 : 0.0;
    }
    ieBasalPrz(fromStore) {
      return dart.notNull(this.TDD(fromStore)) > 0 ? dart.notNull(this.ieBasalSum(fromStore)) / dart.notNull(this.TDD(fromStore)) * 100 : 0.0;
    }
    ieMicroBolusPrz(fromStore) {
      return dart.notNull(this.TDD(fromStore)) > 0 ? dart.notNull(this.ieMicroBolusSum) / dart.notNull(this.TDD(fromStore)) * 100 : 0.0;
    }
    get countValid() {
      return this.entries[$where](dart.fn(entry => !dart.test(entry.isGlucInvalid), EntryDataLToboolL()))[$length];
    }
    get countInvalid() {
      return this.entries[$where](dart.fn(entry => entry.isGlucInvalid, EntryDataLToboolL()))[$length];
    }
    entriesIn(min, max) {
      return this.entries[$where](dart.fn(entry => !dart.test(entry.isGlucInvalid) && dart.notNull(entry.gluc) >= dart.notNull(min) && dart.notNull(entry.gluc) <= dart.notNull(max), EntryDataLToboolL()))[$length];
    }
    entriesBelow(min) {
      return this.entries[$where](dart.fn(entry => !dart.test(entry.isGlucInvalid) && dart.notNull(entry.gluc) < dart.notNull(min), EntryDataLToboolL()))[$length];
    }
    entriesAbove(min) {
      return this.entries[$where](dart.fn(entry => !dart.test(entry.isGlucInvalid) && dart.notNull(entry.gluc) > dart.notNull(min), EntryDataLToboolL()))[$length];
    }
    get avgGluc() {
      let ret = 0.0;
      let count = 0;
      for (let entry of this.entries) {
        if (!dart.test(entry.isGlucInvalid)) {
          ret = ret + dart.notNull(entry.gluc);
          count = count + 1;
        }
      }
      return count > 0 ? ret / count : 0.0;
    }
    extractData(data, lastTempBasal) {
      let t23, t23$, t23$0, t23$1, t23$2;
      this.stat[$_get]("norm").values[$clear]();
      this.stat[$_get]("high").values[$clear]();
      this.stat[$_get]("low").values[$clear]();
      this.min = 999999.0;
      this.max = -1.0;
      let lastDay = null;
      let allEntries = JSArrayOfEntryDataL().of([]);
      allEntries[$addAll](this.entries);
      allEntries[$addAll](this.bloody);
      allEntries[$addAll](this.remaining);
      allEntries[$sort](dart.fn((a, b) => a.time.compareTo(b.time), EntryDataLAndEntryDataLTointL()));
      let last = null;
      let glucTotal = 0.0;
      let rmsTotal = 0.0;
      let firstGluc = null;
      let lastGluc = null;
      let usedRecords = 0;
      this.validCount = 0;
      if (dart.test(allEntries[$isEmpty])) return;
      for (let entry of allEntries) {
        if (dart.test(entry.isInvalidOrGluc0)) continue;
        let glucData = data.profile(entry.time);
        this.stat[$_get]("low").max = glucData.targetLow;
        this.stat[$_get]("norm").min = glucData.targetLow;
        this.stat[$_get]("norm").max = glucData.targetHigh;
        this.stat[$_get]("high").min = glucData.targetHigh;
        this.stat[$_get]("high").max = 9999.9999;
        if (lastDay == null || !core.identical(entry.time.day, dart.dload(lastDay, 'day'))) {
          this.days[$add](new json_data.DayData.new(entry.time, glucData));
          lastDay = entry.time;
        }
        if (entry.type === "mbg") {
          this.days[$last].bloody[$add](entry);
        } else {
          this.days[$last].entries[$add](entry);
          if (glucData != null) {
            let gluc = entry.gluc;
            if (dart.notNull(gluc) > 0 && dart.notNull(this.days[$length]) > 1) {
              for (let key of this.stat[$keys]) {
                if (dart.notNull(gluc) >= dart.notNull(this.stat[$_get](key).min) && dart.notNull(gluc) < dart.notNull(this.stat[$_get](key).max)) this.stat[$_get](key).add(entry, gluc);
              }
              this.validCount = dart.notNull(this.validCount) + 1;
              if (dart.notNull(gluc) < dart.notNull(this.min)) this.min = entry.gluc;
              if (dart.notNull(gluc) > dart.notNull(this.max)) this.max = entry.gluc;
            }
          }
        }
        if (dart.test(data.isInPeriod(entry.time))) {
          firstGluc == null ? firstGluc = entry.gluc : null;
          lastGluc = entry.gluc;
          if (last == null) {
            glucTotal = glucTotal + dart.notNull(entry.gluc);
          } else {
            let timeDelta = entry.time.difference(core.DateTime.as(dart.dload(last, 'time'))).inMilliseconds;
            if (dart.notNull(timeDelta) <= 6 * 60000 && dart.notNull(entry.gluc) > 0 && dart.dtest(dart.dsend(dart.dload(last, 'gluc'), '>', [0]))) {
              usedRecords = usedRecords + 1;
              let delta = dart.notNull(entry.gluc) - dart.notNull(core.num.as(dart.dload(last, 'gluc')));
              this.gviTotal = dart.notNull(this.gviTotal) + math.sqrt(25 + math.pow(delta, 2));
              glucTotal = glucTotal + dart.notNull(entry.gluc);
              if (dart.notNull(entry.gluc) < dart.notNull(glucData.targetLow)) rmsTotal = rmsTotal + math.pow(dart.notNull(glucData.targetLow) - dart.notNull(entry.gluc), 2);
              if (dart.notNull(entry.gluc) > dart.notNull(glucData.targetHigh)) rmsTotal = rmsTotal + math.pow(dart.notNull(entry.gluc) - dart.notNull(glucData.targetHigh), 2);
            }
          }
        }
        last = entry;
      }
      let check = new core.DateTime.new(this.days[$first].date.year, this.days[$first].date.month, dart.notNull(this.days[$first].date.day) + 1);
      this.entries[$removeWhere](dart.fn(e => e.time.isBefore(check), EntryDataLToboolL()));
      this.bloody[$removeWhere](dart.fn(e => e.time.isBefore(check), EntryDataLToboolL()));
      this.remaining[$removeWhere](dart.fn(e => e.time.isBefore(check), EntryDataLToboolL()));
      let gviDelta = doubleL().as(dart.dsend(lastGluc, '-', [firstGluc]));
      this.gviIdeal = math.sqrt(math.pow(usedRecords * 5, 2) + math.pow(gviDelta, 2));
      this.gvi = this.gviIdeal !== 0 ? dart.notNull(this.gviTotal) / dart.notNull(this.gviIdeal) : 0.0;
      this.rms = math.sqrt(rmsTotal / usedRecords);
      let tirMultiplier = this.validCount === 0 ? 0.0 : dart.notNull(this.stat[$_get]("stdNorm").values[$length]) / dart.notNull(this.validCount);
      this.pgs = dart.notNull(this.gvi) * (glucTotal / usedRecords) * (1.0 - tirMultiplier);
      for (let key of this.stat[$keys]) {
        this.stat[$_get](key).varianz = 0.0;
        for (let v of this.stat[$_get](key).values) {
          t23 = this.stat[$_get](key);
          t23.varianz = dart.notNull(t23.varianz) + math.pow(dart.notNull(v) - dart.notNull(this.stat[$_get](key).mid), 2);
        }
        t23$ = this.stat[$_get](key);
        t23$.varianz = dart.notNull(t23$.varianz) / dart.notNull(this.stat[$_get](key).values[$length]);
      }
      this.khCount = 0.0;
      this.ieBolusSum = 0.0;
      this.catheterCount = 0;
      this.ampulleCount = 0;
      this.sensorCount = 0;
      let eCarbs = 0.0;
      let delay = 0;
      this.treatments[$sort](dart.fn((a, b) => a.createdAt.compareTo(b.createdAt), TreatmentDataLAndTreatmentDataLTointL()));
      if (dart.test(this.addList[$isEmpty])) {
        let lastIdx = -1;
        for (let i = 0; i < dart.notNull(this.treatments[$length]); i = i + 1) {
          let t1 = this.treatments[$_get](i);
          if (!dart.test(t1.isTempBasal)) continue;
          let t = lastIdx === -1 ? lastTempBasal : this.treatments[$_get](lastIdx);
          if (t == null) continue;
          lastIdx = i;
          let duration = t1.createdAt.difference(t.createdAt).inSeconds;
          if (dart.notNull(duration) < dart.notNull(t.duration)) t.duration = duration;
          let date = t.createdAt.add(new core.Duration.new({days: 1}));
          if (date.day == t1.createdAt.day && date.month == t1.createdAt.month && date.year == t1.createdAt.year) {
            let newTreat = t.copy;
            newTreat.createdAt = new core.DateTime.new(date.year, date.month, date.day, 0, 0);
            let duration = 86399 - dart.notNull(t.timeForCalc);
            t23$0 = newTreat;
            t23$0.duration = dart.notNull(t23$0.duration) - duration;
            if (dart.notNull(newTreat.duration) > 0) {
              t.duration = duration;
              this.addList[$add](newTreat);
            }
          }
        }
        if (dart.test(this.addList[$isNotEmpty])) {
          this.treatments[$addAll](this.addList);
          this.treatments[$sort](dart.fn((a, b) => a.createdAt.compareTo(b.createdAt), TreatmentDataLAndTreatmentDataLTointL()));
        }
      }
      for (let i = 0; i < dart.notNull(this.treatments[$length]); i = i + 1) {
        let t = this.treatments[$_get](i);
        let type = t.eventType[$toLowerCase]();
        if (dart.test(t.isSiteChange)) this.catheterCount = dart.notNull(this.catheterCount) + 1;
        if (dart.test(t.isInsulinChange)) this.ampulleCount = dart.notNull(this.ampulleCount) + 1;
        if (dart.test(t.isSensorChange)) this.sensorCount = dart.notNull(this.sensorCount) + 1;
        if (type === "note" && t.notes[$toLowerCase]()[$startsWith]("ecarb")) {
          let rex = core.RegExp.new("[^0-9\\-]*(-*\\d*)[^0-9\\-]*(-*\\d*)[^0-9\\-]*(-*\\d*).*");
          let match = rex.firstMatch(t.notes);
          if (match != null && match.groupCount === 3) {
            eCarbs = (t23$1 = core.double.tryParse(match.group(1)), t23$1 == null ? 0.0 : t23$1);
            delay = dart.asNullableInt((t23$2 = core.double.tryParse(match.group(3)), t23$2 == null ? 0 : t23$2));
            if (dart.notNull(delay) < 0) {
              for (let j = i - 1; j >= 0 && dart.notNull(eCarbs) > 0.0; j = j - 1) {
                let t1 = this.treatments[$_get](j);
                if (dart.test(t1.isMealBolus) && dart.notNull(t1.carbs) < 10.0) {
                  eCarbs = dart.notNull(eCarbs) - dart.notNull(t1.carbs);
                  t1.isECarb = true;
                }
              }
            }
          }
        }
        if (dart.test(t.isMealBolus) && eCarbs != null && dart.notNull(eCarbs) > 0.0 && dart.notNull(t.carbs) < 10.0) {
          eCarbs = dart.notNull(eCarbs) - dart.notNull(t.carbs);
          t.isECarb = true;
        }
        let idx = this.days[$indexWhere](dart.fn(d => d.isSameDay(t.createdAt.toLocal()), DayDataLToboolL()));
        if (dart.notNull(idx) >= 0) this.days[$_get](idx).treatments[$add](t);
        if (!dart.test(data.isInPeriod(t.createdAt))) continue;
        this.khCount = dart.notNull(this.khCount) + dart.notNull(t.carbs);
        this.ieBolusSum = dart.notNull(this.ieBolusSum) + dart.notNull(t.bolusInsulin);
        this.ieMicroBolusSum = dart.notNull(this.ieMicroBolusSum) + dart.notNull(t.microbolus);
      }
      this.ieBasalSumDaily = 0.0;
      this.ieBasalSumStore = 0.0;
      for (let i = 1; i < dart.notNull(this.days[$length]); i = i + 1) {
        let day = this.days[$_get](i);
        day.prevDay = i > 0 ? this.days[$_get](i - 1) : null;
        day.init({nextDay: i < dart.notNull(this.days[$length]) - 1 ? this.days[$_get](i + 1) : null});
        this.ieBasalSumStore = dart.notNull(this.ieBasalSumStore) + dart.notNull(day.ieBasalSum(true));
        this.ieBasalSumDaily = dart.notNull(this.ieBasalSumDaily) + dart.notNull(day.ieBasalSum(false));
        day.devicestatusList[$clear]();
        day.devicestatusList[$addAll](this.devicestatusList[$where](dart.fn(ds => day.isSameDay(ds.createdAt.toLocal()), DeviceStatusDataLToboolL())));
      }
      if (dart.test(this.days[$isNotEmpty]) && dart.test(this.days[$_get](0).date.isBefore(data.begDate))) this.days[$removeAt](0);
    }
  };
  (json_data.ListData.new = function() {
    this[days] = JSArrayOfDayDataL().of([]);
    this[entries$0] = JSArrayOfEntryDataL().of([]);
    this[bloody] = JSArrayOfEntryDataL().of([]);
    this[remaining] = JSArrayOfEntryDataL().of([]);
    this[treatments$] = JSArrayOfTreatmentDataL().of([]);
    this[devicestatusList$] = JSArrayOfDeviceStatusDataL().of([]);
    this[catheterCount] = 0;
    this[ampulleCount] = 0;
    this[sensorCount] = 0;
    this[khCount] = 0.0;
    this[khAdjust] = 0.0;
    this[khAdjustCount] = 0;
    this[stat] = new (IdentityMapOfStringL$StatisticDataL()).from(["low", new json_data.StatisticData.new(0.0, 0.0), "norm", new json_data.StatisticData.new(0.0, 0.0), "high", new json_data.StatisticData.new(0.0, 0.0), "stdLow", new json_data.StatisticData.new(1.0, 70.0), "stdNorm", new json_data.StatisticData.new(70.0, 180.0), "stdHigh", new json_data.StatisticData.new(180.0, 9999.0), "stdVeryHigh", new json_data.StatisticData.new(250.0, 9999.0), "stdNormHigh", new json_data.StatisticData.new(180.0, 250.0), "stdNormLow", new json_data.StatisticData.new(54.0, 70.0), "stdVeryLow", new json_data.StatisticData.new(0.0, 54.0)]);
    this[ieBolusSum] = 0.0;
    this[ieBasalSumDaily] = 0.0;
    this[ieBasalSumStore] = 0.0;
    this[ieMicroBolusSum] = 0.0;
    this[gvi] = 0.0;
    this[gviIdeal] = 0.0;
    this[gviTotal] = 0.0;
    this[rms] = 0.0;
    this[pgs] = 0.0;
    this[min$0] = null;
    this[max$0] = null;
    this[validCount] = null;
    this[addList] = JSArrayOfTreatmentDataL().of([]);
    ;
  }).prototype = json_data.ListData.prototype;
  dart.addTypeTests(json_data.ListData);
  dart.addTypeCaches(json_data.ListData);
  dart.setMethodSignature(json_data.ListData, () => ({
    __proto__: dart.getMethods(json_data.ListData.__proto__),
    ieBasalSum: dart.fnType(dart.legacy(core.double), [dart.legacy(core.bool)]),
    TDD: dart.fnType(dart.legacy(core.double), [dart.legacy(core.bool)]),
    ieBolusPrz: dart.fnType(dart.legacy(core.double), [dart.legacy(core.bool)]),
    ieBasalPrz: dart.fnType(dart.legacy(core.double), [dart.legacy(core.bool)]),
    ieMicroBolusPrz: dart.fnType(dart.legacy(core.double), [dart.legacy(core.bool)]),
    entriesIn: dart.fnType(dart.legacy(core.int), [dart.legacy(core.int), dart.legacy(core.int)]),
    entriesBelow: dart.fnType(dart.legacy(core.int), [dart.legacy(core.int)]),
    entriesAbove: dart.fnType(dart.legacy(core.int), [dart.legacy(core.int)]),
    extractData: dart.fnType(dart.void, [dart.legacy(json_data.ReportData), dart.legacy(json_data.TreatmentData)])
  }));
  dart.setGetterSignature(json_data.ListData, () => ({
    __proto__: dart.getGetters(json_data.ListData.__proto__),
    countValid: dart.legacy(core.int),
    countInvalid: dart.legacy(core.int),
    avgGluc: dart.legacy(core.double)
  }));
  dart.setLibraryUri(json_data.ListData, L2);
  dart.setFieldSignature(json_data.ListData, () => ({
    __proto__: dart.getFields(json_data.ListData.__proto__),
    days: dart.fieldType(dart.legacy(core.List$(dart.legacy(json_data.DayData)))),
    entries: dart.fieldType(dart.legacy(core.List$(dart.legacy(json_data.EntryData)))),
    bloody: dart.fieldType(dart.legacy(core.List$(dart.legacy(json_data.EntryData)))),
    remaining: dart.fieldType(dart.legacy(core.List$(dart.legacy(json_data.EntryData)))),
    treatments: dart.fieldType(dart.legacy(core.List$(dart.legacy(json_data.TreatmentData)))),
    devicestatusList: dart.fieldType(dart.legacy(core.List$(dart.legacy(json_data.DeviceStatusData)))),
    catheterCount: dart.fieldType(dart.legacy(core.int)),
    ampulleCount: dart.fieldType(dart.legacy(core.int)),
    sensorCount: dart.fieldType(dart.legacy(core.int)),
    khCount: dart.fieldType(dart.legacy(core.double)),
    khAdjust: dart.fieldType(dart.legacy(core.double)),
    khAdjustCount: dart.fieldType(dart.legacy(core.int)),
    stat: dart.fieldType(dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(json_data.StatisticData)))),
    ieBolusSum: dart.fieldType(dart.legacy(core.double)),
    ieBasalSumDaily: dart.fieldType(dart.legacy(core.double)),
    ieBasalSumStore: dart.fieldType(dart.legacy(core.double)),
    ieMicroBolusSum: dart.fieldType(dart.legacy(core.double)),
    gvi: dart.fieldType(dart.legacy(core.double)),
    gviIdeal: dart.fieldType(dart.legacy(core.double)),
    gviTotal: dart.fieldType(dart.legacy(core.double)),
    rms: dart.fieldType(dart.legacy(core.double)),
    pgs: dart.fieldType(dart.legacy(core.double)),
    min: dart.fieldType(dart.legacy(core.double)),
    max: dart.fieldType(dart.legacy(core.double)),
    validCount: dart.fieldType(dart.legacy(core.int)),
    addList: dart.fieldType(dart.legacy(core.List$(dart.legacy(json_data.TreatmentData))))
  }));
  var error = dart.privateName(json_data, "ReportData.error");
  var begDate$ = dart.privateName(json_data, "ReportData.begDate");
  var endDate$ = dart.privateName(json_data, "ReportData.endDate");
  var dayCount = dart.privateName(json_data, "ReportData.dayCount");
  var profiles = dart.privateName(json_data, "ReportData.profiles");
  var user = dart.privateName(json_data, "ReportData.user");
  var ns = dart.privateName(json_data, "ReportData.ns");
  var calc = dart.privateName(json_data, "ReportData.calc");
  var status$2 = dart.privateName(json_data, "ReportData.status");
  var globals$ = dart.privateName(json_data, "ReportData.globals");
  var isForThumbs = dart.privateName(json_data, "ReportData.isForThumbs");
  json_data.ReportData = class ReportData extends core.Object {
    get error() {
      return this[error];
    }
    set error(value) {
      this[error] = value;
    }
    get begDate() {
      return this[begDate$];
    }
    set begDate(value) {
      this[begDate$] = value;
    }
    get endDate() {
      return this[endDate$];
    }
    set endDate(value) {
      this[endDate$] = value;
    }
    get dayCount() {
      return this[dayCount];
    }
    set dayCount(value) {
      this[dayCount] = value;
    }
    get profiles() {
      return this[profiles];
    }
    set profiles(value) {
      this[profiles] = value;
    }
    get user() {
      return this[user];
    }
    set user(value) {
      this[user] = value;
    }
    get ns() {
      return this[ns];
    }
    set ns(value) {
      this[ns] = value;
    }
    get calc() {
      return this[calc];
    }
    set calc(value) {
      this[calc] = value;
    }
    get status() {
      return this[status$2];
    }
    set status(value) {
      this[status$2] = value;
    }
    get globals() {
      return this[globals$];
    }
    set globals(value) {
      this[globals$] = value;
    }
    get isForThumbs() {
      return this[isForThumbs];
    }
    set isForThumbs(value) {
      this[isForThumbs] = value;
    }
    get data() {
      return this.globals == null ? this.calc : dart.test(this.globals.isDataSmoothing) ? this.calc : this.ns;
    }
    isInPeriod(check) {
      if (dart.test(check.isBefore(new core.DateTime.new(this.begDate.year, this.begDate.month, this.begDate.day)))) return false;
      return check.isBefore(new core.DateTime.new(this.endDate.year, this.endDate.month, dart.notNull(this.endDate.day) + 1));
    }
    profile(time, treatments = null, doMix = true) {
      let ret = new json_data.ProfileGlucData.new(new json_data.ProfileStoreData.new(dart.str(time.toIso8601String())));
      let profile = null;
      let idx = -1;
      for (let i = 0; i < dart.notNull(this.profiles[$length]); i = i + 1) {
        if (dart.notNull(this.profiles[$_get](i).startDate.difference(time).inSeconds) <= 0) idx = i;
      }
      if (idx >= 0) {
        profile = this.profiles[$_get](idx).copy;
        idx = idx + 1;
        while (idx < dart.notNull(this.profiles[$length]) && dart.test(doMix)) {
          let d = this.profiles[$_get](idx).startDate;
          if (d.year == time.year && d.month == time.month && d.day == time.day) profile.mixWith(this.profiles[$_get](idx));
          idx = idx + 1;
        }
        if (treatments != null) {
          for (let t of treatments) {
            if (t.createdAt.year == time.year && t.createdAt.month == time.month && t.createdAt.day == time.day) {
              profile.includeTreatment(t);
            }
          }
        }
      } else {
        ret.targetHigh = 180.0;
        ret.targetLow = 70.0;
      }
      if (profile != null) {
        let date = new date$.Date.new(time.year, time.month, time.day);
        ret = new json_data.ProfileGlucData.new(profile.current);
        ret.basal = ret.find(date, time, ret.store.listBasal);
        ret.carbRatio = ret.find(date, time, ret.store.listCarbratio);
        ret.sens = ret.find(date, time, ret.store.listSens);
        ret.targetHigh = this.status.settings.thresholds.bgTargetTop[$toDouble]();
        ret.targetLow = this.status.settings.thresholds.bgTargetBottom[$toDouble]();
        for (let data of profile.store[$values]) {
          data.adjustDurations();
        }
      }
      return ret;
    }
    targetValue(time) {
      let profile = this.profile(time);
      let date = new date$.Date.new(time.year, time.month, time.day);
      let high = 180.0;
      if (dart.test(profile.store.listTargetHigh[$isNotEmpty])) {
        for (let i = dart.notNull(profile.store.listTargetHigh[$length]) - 1; i >= 0; i = i - 1) {
          let tgt = profile.store.listTargetHigh[$_get](i);
          if (dart.notNull(tgt.time(date).millisecondsSinceEpoch) < dart.notNull(time.millisecondsSinceEpoch)) {
            high = tgt.value;
            break;
          }
        }
      }
      let low = 70.0;
      if (dart.test(profile.store.listTargetLow[$isNotEmpty])) {
        for (let i = dart.notNull(profile.store.listTargetLow[$length]) - 1; i >= 0; i = i - 1) {
          let tgt = profile.store.listTargetLow[$_get](i);
          if (dart.notNull(tgt.time(date).millisecondsSinceEpoch) < dart.notNull(time.millisecondsSinceEpoch)) {
            low = tgt.value;
            break;
          }
        }
      }
      return (dart.notNull(high) + dart.notNull(low)) / 2;
    }
  };
  (json_data.ReportData.new = function(globals, begDate, endDate) {
    this[error] = null;
    this[dayCount] = -1;
    this[profiles] = JSArrayOfProfileDataL().of([]);
    this[user] = null;
    this[ns] = new json_data.ListData.new();
    this[calc] = new json_data.ListData.new();
    this[status$2] = null;
    this[isForThumbs] = false;
    this[globals$] = globals;
    this[begDate$] = begDate;
    this[endDate$] = endDate;
    ;
  }).prototype = json_data.ReportData.prototype;
  dart.addTypeTests(json_data.ReportData);
  dart.addTypeCaches(json_data.ReportData);
  dart.setMethodSignature(json_data.ReportData, () => ({
    __proto__: dart.getMethods(json_data.ReportData.__proto__),
    isInPeriod: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.DateTime)]),
    profile: dart.fnType(dart.legacy(json_data.ProfileGlucData), [dart.legacy(core.DateTime)], [dart.legacy(core.List$(dart.legacy(json_data.TreatmentData))), dart.legacy(core.bool)]),
    targetValue: dart.fnType(dart.legacy(core.double), [dart.legacy(core.DateTime)])
  }));
  dart.setGetterSignature(json_data.ReportData, () => ({
    __proto__: dart.getGetters(json_data.ReportData.__proto__),
    data: dart.legacy(json_data.ListData)
  }));
  dart.setLibraryUri(json_data.ReportData, L2);
  dart.setFieldSignature(json_data.ReportData, () => ({
    __proto__: dart.getFields(json_data.ReportData.__proto__),
    error: dart.fieldType(dart.legacy(core.Error)),
    begDate: dart.fieldType(dart.legacy(date$.Date)),
    endDate: dart.fieldType(dart.legacy(date$.Date)),
    dayCount: dart.fieldType(dart.legacy(core.int)),
    profiles: dart.fieldType(dart.legacy(core.List$(dart.legacy(json_data.ProfileData)))),
    user: dart.fieldType(dart.legacy(globals.UserData)),
    ns: dart.fieldType(dart.legacy(json_data.ListData)),
    calc: dart.fieldType(dart.legacy(json_data.ListData)),
    status: dart.fieldType(dart.legacy(json_data.StatusData)),
    globals: dart.fieldType(dart.legacy(globals.Globals)),
    isForThumbs: dart.fieldType(dart.legacy(core.bool))
  }));
  var colWidth = dart.privateName(base_print, "GridData.colWidth");
  var lineHeight = dart.privateName(base_print, "GridData.lineHeight");
  var glucScale = dart.privateName(base_print, "GridData.glucScale");
  var gridLines = dart.privateName(base_print, "GridData.gridLines");
  base_print.GridData = class GridData extends core.Object {
    get colWidth() {
      return this[colWidth];
    }
    set colWidth(value) {
      this[colWidth] = value;
    }
    get lineHeight() {
      return this[lineHeight];
    }
    set lineHeight(value) {
      this[lineHeight] = value;
    }
    get glucScale() {
      return this[glucScale];
    }
    set glucScale(value) {
      this[glucScale] = value;
    }
    get gridLines() {
      return this[gridLines];
    }
    set gridLines(value) {
      this[gridLines] = value;
    }
  };
  (base_print.GridData.new = function() {
    this[colWidth] = null;
    this[lineHeight] = null;
    this[glucScale] = null;
    this[gridLines] = null;
    ;
  }).prototype = base_print.GridData.prototype;
  dart.addTypeTests(base_print.GridData);
  dart.addTypeCaches(base_print.GridData);
  dart.setLibraryUri(base_print.GridData, L3);
  dart.setFieldSignature(base_print.GridData, () => ({
    __proto__: dart.getFields(base_print.GridData.__proto__),
    colWidth: dart.fieldType(dart.legacy(core.double)),
    lineHeight: dart.fieldType(dart.legacy(core.double)),
    glucScale: dart.fieldType(dart.legacy(core.double)),
    gridLines: dart.fieldType(dart.legacy(core.int))
  }));
  var columns = dart.privateName(base_print, "LegendData.columns");
  var x$ = dart.privateName(base_print, "LegendData.x");
  var y$ = dart.privateName(base_print, "LegendData.y");
  var colWidth$ = dart.privateName(base_print, "LegendData.colWidth");
  var maxLines$ = dart.privateName(base_print, "LegendData.maxLines");
  base_print.LegendData = class LegendData extends core.Object {
    get columns() {
      return this[columns];
    }
    set columns(value) {
      this[columns] = value;
    }
    get x() {
      return this[x$];
    }
    set x(value) {
      this[x$] = value;
    }
    get y() {
      return this[y$];
    }
    set y(value) {
      this[y$] = value;
    }
    get colWidth() {
      return this[colWidth$];
    }
    set colWidth(value) {
      this[colWidth$] = value;
    }
    get maxLines() {
      return this[maxLines$];
    }
    set maxLines(value) {
      this[maxLines$] = value;
    }
    current(forceNew) {
      if (dart.test(this.columns[$isEmpty]) || dart.notNull(ListL().as(dart.dsend(this.columns[$last], '_get', ["stack"]))[$length]) >= dart.notNull(this.maxLines) || dart.test(forceNew)) {
        this.x = dart.notNull(this.x) + dart.notNull(dart.test(this.columns[$isNotEmpty]) ? this.colWidth : 0.0);
        this.columns[$add](new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.x, "y", this.y]), "stack", []]));
      }
      return ListL().as(dart.dsend(this.columns[$last], '_get', ["stack"]));
    }
    get asOutput() {
      return dart.notNull(this.columns[$length]) > 0 ? new (IdentityMapOfStringL$ListL()).from(["stack", this.columns]) : null;
    }
  };
  (base_print.LegendData.new = function(x, y, colWidth, maxLines) {
    this[columns] = [];
    this[x$] = x;
    this[y$] = y;
    this[colWidth$] = colWidth;
    this[maxLines$] = maxLines;
    ;
  }).prototype = base_print.LegendData.prototype;
  dart.addTypeTests(base_print.LegendData);
  dart.addTypeCaches(base_print.LegendData);
  dart.setMethodSignature(base_print.LegendData, () => ({
    __proto__: dart.getMethods(base_print.LegendData.__proto__),
    current: dart.fnType(dart.legacy(core.List), [dart.legacy(core.bool)])
  }));
  dart.setGetterSignature(base_print.LegendData, () => ({
    __proto__: dart.getGetters(base_print.LegendData.__proto__),
    asOutput: dart.dynamic
  }));
  dart.setLibraryUri(base_print.LegendData, L3);
  dart.setFieldSignature(base_print.LegendData, () => ({
    __proto__: dart.getFields(base_print.LegendData.__proto__),
    columns: dart.fieldType(dart.legacy(core.List)),
    x: dart.fieldType(dart.legacy(core.double)),
    y: dart.fieldType(dart.legacy(core.double)),
    colWidth: dart.fieldType(dart.legacy(core.double)),
    maxLines: dart.fieldType(dart.legacy(core.int))
  }));
  var min$1 = dart.privateName(base_print, "StepData.min");
  var step$ = dart.privateName(base_print, "StepData.step");
  base_print.StepData = class StepData extends core.Object {
    get min() {
      return this[min$1];
    }
    set min(value) {
      this[min$1] = value;
    }
    get step() {
      return this[step$];
    }
    set step(value) {
      this[step$] = value;
    }
  };
  (base_print.StepData.new = function(min, step) {
    this[min$1] = min;
    this[step$] = step;
    ;
  }).prototype = base_print.StepData.prototype;
  dart.addTypeTests(base_print.StepData);
  dart.addTypeCaches(base_print.StepData);
  dart.setLibraryUri(base_print.StepData, L3);
  dart.setFieldSignature(base_print.StepData, () => ({
    __proto__: dart.getFields(base_print.StepData.__proto__),
    min: dart.fieldType(dart.legacy(core.double)),
    step: dart.fieldType(dart.legacy(core.double))
  }));
  var _name$0 = dart.privateName(base_print, "_name");
  var C8;
  var C9;
  var C10;
  var C11;
  var C12;
  var C13;
  base_print.ParamType = class ParamType extends core.Object {
    toString() {
      return this[_name$0];
    }
  };
  (base_print.ParamType.new = function(index, _name) {
    this.index = index;
    this[_name$0] = _name;
    ;
  }).prototype = base_print.ParamType.prototype;
  dart.addTypeTests(base_print.ParamType);
  dart.addTypeCaches(base_print.ParamType);
  dart.setMethodSignature(base_print.ParamType, () => ({
    __proto__: dart.getMethods(base_print.ParamType.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(base_print.ParamType, L3);
  dart.setFieldSignature(base_print.ParamType, () => ({
    __proto__: dart.getFields(base_print.ParamType.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$0]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(base_print.ParamType, ['toString']);
  base_print.ParamType.none = C8 || CT.C8;
  base_print.ParamType.bool = C9 || CT.C9;
  base_print.ParamType.string = C10 || CT.C10;
  base_print.ParamType.int = C11 || CT.C11;
  base_print.ParamType.list = C12 || CT.C12;
  base_print.ParamType.values = C13 || CT.C13;
  var _boolValue = dart.privateName(base_print, "_boolValue");
  var _stringValue = dart.privateName(base_print, "_stringValue");
  var _intValue = dart.privateName(base_print, "_intValue");
  var type$0 = dart.privateName(base_print, "ParamInfo.type");
  var title$0 = dart.privateName(base_print, "ParamInfo.title");
  var isForThumbs$ = dart.privateName(base_print, "ParamInfo.isForThumbs");
  var checkValue = dart.privateName(base_print, "ParamInfo.checkValue");
  var thumbValue$ = dart.privateName(base_print, "ParamInfo.thumbValue");
  var isDeprecated$ = dart.privateName(base_print, "ParamInfo.isDeprecated");
  var isLoopValue$ = dart.privateName(base_print, "ParamInfo.isLoopValue");
  var isDisabled = dart.privateName(base_print, "ParamInfo.isDisabled");
  var list$ = dart.privateName(base_print, "ParamInfo.list");
  var subParams$ = dart.privateName(base_print, "ParamInfo.subParams");
  var min$2 = dart.privateName(base_print, "ParamInfo.min");
  var max$1 = dart.privateName(base_print, "ParamInfo.max");
  var sort$ = dart.privateName(base_print, "ParamInfo.sort");
  base_print.ParamInfo = class ParamInfo extends core.Object {
    get type() {
      return this[type$0];
    }
    set type(value) {
      this[type$0] = value;
    }
    get title() {
      return this[title$0];
    }
    set title(value) {
      this[title$0] = value;
    }
    get isForThumbs() {
      return this[isForThumbs$];
    }
    set isForThumbs(value) {
      this[isForThumbs$] = value;
    }
    get checkValue() {
      return this[checkValue];
    }
    set checkValue(value) {
      this[checkValue] = value;
    }
    get thumbValue() {
      return this[thumbValue$];
    }
    set thumbValue(value) {
      this[thumbValue$] = value;
    }
    get isDeprecated() {
      return this[isDeprecated$];
    }
    set isDeprecated(value) {
      this[isDeprecated$] = value;
    }
    get isLoopValue() {
      return this[isLoopValue$];
    }
    set isLoopValue(value) {
      this[isLoopValue$] = value;
    }
    get isDisabled() {
      return this[isDisabled];
    }
    set isDisabled(value) {
      this[isDisabled] = value;
    }
    get list() {
      return this[list$];
    }
    set list(value) {
      this[list$] = value;
    }
    get subParams() {
      return this[subParams$];
    }
    set subParams(value) {
      this[subParams$] = value;
    }
    get min() {
      return this[min$2];
    }
    set min(value) {
      this[min$2] = value;
    }
    get max() {
      return this[max$1];
    }
    set max(value) {
      this[max$1] = value;
    }
    get sort() {
      return this[sort$];
    }
    set sort(value) {
      this[sort$] = value;
    }
    get boolValue() {
      return boolL().as(dart.test(this.isForThumbs) ? this.thumbValue : dart.test(this.isLoopValue) && dart.test(globals.Globals.new().hideLoopData) ? false : this[_boolValue]);
    }
    get stringValue() {
      return StringL().as(dart.test(this.isForThumbs) ? this.thumbValue : this[_stringValue]);
    }
    get intValue() {
      return intL().as(dart.test(this.isForThumbs) ? this.thumbValue : this[_intValue]);
    }
    handleValueChange(value) {
      let t23;
      if (this.checkValue != null) {
        t23 = value;
        dart.dsend(this, 'checkValue', [this, t23]);
      }
    }
    set boolValue(value) {
      this[_boolValue] = boolL().as(value);
      this.handleValueChange(value);
    }
    set intValue(value) {
      this[_intValue] = intL().as(value);
      this.handleValueChange(value);
    }
    set stringValue(value) {
      this[_stringValue] = StringL().as(value);
      this.handleValueChange(value);
    }
    get sliderValue() {
      return dart.notNull(this.intValue) >= dart.notNull(this.min) && dart.notNull(this.intValue) <= dart.notNull(this.max) ? this.intValue : this.min;
    }
    set sliderValue(value) {
      this[_intValue] = value;
      this.handleValueChange(value);
    }
    get listValue() {
      if (this.list == null || dart.test(this.list[$isEmpty])) return "";
      if (this.intValue == null || dart.notNull(this.intValue) < 0 || dart.notNull(this.intValue) >= dart.notNull(this.list[$length])) {
        return this.list[$_get](0);
      }
      return this.list[$_get](this.intValue);
    }
    get asJson() {
      let sp = [];
      if (this.subParams != null) {
        for (let p of this.subParams)
          sp[$add](p.asJson);
      }
      return new (IdentityMapOfStringL$ObjectL()).from(["b", this.boolValue, "s", this.stringValue, "i", this.intValue, "sp", sp]);
    }
    fill(src, checkValue) {
      this[_boolValue] = src.boolValue;
      this[_stringValue] = src.stringValue;
      this[_intValue] = src.intValue;
      this.subParams = src.subParams;
      if (checkValue != null) {
        dart.dcall(checkValue, [this, null]);
      }
      this.checkValue = checkValue;
    }
    fillFromJson(value, checkValue) {
      let t23, t23$, t23$0;
      try {
        switch (this.type) {
          case C9 || CT.C9:
          {
            this[_boolValue] = boolL().as((t23 = dart.dsend(value, '_get', ["b"]), t23 == null ? false : t23));
            if (checkValue != null) {
              dart.dcall(checkValue, [this, this[_boolValue]]);
            }
            break;
          }
          case C10 || CT.C10:
          {
            this[_stringValue] = StringL().as((t23$ = dart.dsend(value, '_get', ["s"]), t23$ == null ? "" : t23$));
            if (checkValue != null) {
              dart.dcall(checkValue, [this, this[_stringValue]]);
            }
            break;
          }
          case C11 || CT.C11:
          case C12 || CT.C12:
          {
            this[_intValue] = intL().as((t23$0 = dart.dsend(value, '_get', ["i"]), t23$0 == null ? 0 : t23$0));
            if (checkValue != null) {
              dart.dcall(checkValue, [this, this[_intValue]]);
            }
            break;
          }
          default:
          {
            break;
          }
        }
        if (this.subParams != null) {
          for (let i = 0; i < dart.notNull(this.subParams[$length]); i = i + 1) {
            if (i < dart.notNull(core.num.as(dart.dload(dart.dsend(value, '_get', ["sp"]), 'length')))) {
              this.subParams[$_get](i).fillFromJson(dart.dsend(dart.dsend(value, '_get', ["sp"]), '_get', [i]), checkValue);
            }
          }
        }
      } catch (e) {
        let ex = dart.getThrown(e);
      }
      this.checkValue = checkValue;
    }
  };
  (base_print.ParamInfo.new = function(sort, title, opts) {
    let boolValue = opts && 'boolValue' in opts ? opts.boolValue : null;
    let stringValue = opts && 'stringValue' in opts ? opts.stringValue : null;
    let intValue = opts && 'intValue' in opts ? opts.intValue : null;
    let min = opts && 'min' in opts ? opts.min : null;
    let max = opts && 'max' in opts ? opts.max : null;
    let list = opts && 'list' in opts ? opts.list : null;
    let subParams = opts && 'subParams' in opts ? opts.subParams : null;
    let isDeprecated = opts && 'isDeprecated' in opts ? opts.isDeprecated : false;
    let isLoopValue = opts && 'isLoopValue' in opts ? opts.isLoopValue : false;
    let thumbValue = opts && 'thumbValue' in opts ? opts.thumbValue : null;
    this[type$0] = base_print.ParamType.none;
    this[_boolValue] = null;
    this[_stringValue] = null;
    this[_intValue] = null;
    this[isForThumbs$] = false;
    this[checkValue] = null;
    this[isDisabled] = false;
    this[sort$] = sort;
    this[title$0] = title;
    this[min$2] = min;
    this[max$1] = max;
    this[list$] = list;
    this[subParams$] = subParams;
    this[isDeprecated$] = isDeprecated;
    this[isLoopValue$] = isLoopValue;
    this[thumbValue$] = thumbValue;
    this[_boolValue] = boolValue;
    this[_intValue] = intValue;
    this[_stringValue] = stringValue;
    if (boolValue != null) {
      this.type = base_print.ParamType.bool;
      this.thumbValue == null ? this.thumbValue = boolValue : null;
    }
    if (stringValue != null) {
      this.type = base_print.ParamType.string;
      this.thumbValue == null ? this.thumbValue = stringValue : null;
    }
    if (intValue != null) {
      this.type = base_print.ParamType.int;
      this.thumbValue == null ? this.thumbValue = intValue : null;
    }
    if (this.list != null) {
      this.type = base_print.ParamType.list;
      this.thumbValue == null ? this.thumbValue = 0 : null;
    }
  }).prototype = base_print.ParamInfo.prototype;
  dart.addTypeTests(base_print.ParamInfo);
  dart.addTypeCaches(base_print.ParamInfo);
  dart.setMethodSignature(base_print.ParamInfo, () => ({
    __proto__: dart.getMethods(base_print.ParamInfo.__proto__),
    handleValueChange: dart.fnType(dart.void, [dart.dynamic]),
    fill: dart.fnType(dart.dynamic, [dart.legacy(base_print.ParamInfo), dart.legacy(core.Function)]),
    fillFromJson: dart.fnType(dart.void, [dart.dynamic, dart.legacy(core.Function)])
  }));
  dart.setGetterSignature(base_print.ParamInfo, () => ({
    __proto__: dart.getGetters(base_print.ParamInfo.__proto__),
    boolValue: dart.legacy(core.bool),
    stringValue: dart.legacy(core.String),
    intValue: dart.legacy(core.int),
    sliderValue: dart.legacy(core.int),
    listValue: dart.legacy(core.String),
    asJson: dart.dynamic
  }));
  dart.setSetterSignature(base_print.ParamInfo, () => ({
    __proto__: dart.getSetters(base_print.ParamInfo.__proto__),
    boolValue: dart.dynamic,
    intValue: dart.dynamic,
    stringValue: dart.dynamic,
    sliderValue: dart.legacy(core.int)
  }));
  dart.setLibraryUri(base_print.ParamInfo, L3);
  dart.setFieldSignature(base_print.ParamInfo, () => ({
    __proto__: dart.getFields(base_print.ParamInfo.__proto__),
    type: dart.fieldType(dart.legacy(base_print.ParamType)),
    title: dart.fieldType(dart.legacy(core.String)),
    [_boolValue]: dart.fieldType(dart.legacy(core.bool)),
    [_stringValue]: dart.fieldType(dart.legacy(core.String)),
    [_intValue]: dart.fieldType(dart.legacy(core.int)),
    isForThumbs: dart.fieldType(dart.legacy(core.bool)),
    checkValue: dart.fieldType(dart.legacy(core.Function)),
    thumbValue: dart.fieldType(dart.dynamic),
    isDeprecated: dart.fieldType(dart.legacy(core.bool)),
    isLoopValue: dart.fieldType(dart.legacy(core.bool)),
    isDisabled: dart.fieldType(dart.legacy(core.bool)),
    list: dart.fieldType(dart.legacy(core.List$(dart.legacy(core.String)))),
    subParams: dart.fieldType(dart.legacy(core.List$(dart.legacy(base_print.ParamInfo)))),
    min: dart.fieldType(dart.legacy(core.int)),
    max: dart.fieldType(dart.legacy(core.int)),
    sort: dart.fieldType(dart.legacy(core.int))
  }));
  var _checked$ = dart.privateName(base_print, "_checked");
  var opened = dart.privateName(base_print, "FormConfig.opened");
  var form$ = dart.privateName(base_print, "FormConfig.form");
  base_print.FormConfig = class FormConfig extends core.Object {
    get opened() {
      return this[opened];
    }
    set opened(value) {
      this[opened] = value;
    }
    get form() {
      return this[form$];
    }
    set form(value) {
      this[form$] = value;
    }
    get id() {
      return this.form.id;
    }
    get idx() {
      return this.form.idx;
    }
    get checked() {
      return this[_checked$];
    }
    set checked(value) {
      this[_checked$] = boolL().as(value);
    }
    get asJson() {
      let ret = new (IdentityMapOfStringL$ObjectL()).from(["c", this.checked, "p", []]);
      if (this.form.params != null) {
        for (let entry of this.form.params)
          dart.dsend(dart.dsend(ret, '_get', ["p"]), 'add', [entry.asJson]);
      }
      return ret;
    }
    get asString() {
      return convert.json.encode(this.asJson);
    }
    fill(src) {
      for (let i = 0; i < dart.notNull(src.form.params[$length]); i = i + 1) {
        if (i >= dart.notNull(this.form.params[$length])) this.form.params[$add](src.form.params[$_get](i));
        this.form.params[$_get](i).fill(src.form.params[$_get](i), dart.bind(this.form, 'checkValue'));
      }
      this.form.extractParams();
    }
    fillFromJson(value) {
      try {
        this.checked = dart.dsend(value, '_get', ["c"]);
        for (let i = 0; i < dart.notNull(core.num.as(dart.dload(dart.dsend(value, '_get', ["p"]), 'length'))) && i < dart.notNull(this.form.params[$length]); i = i + 1) {
          this.form.params[$_get](i).fillFromJson(dart.dsend(dart.dsend(value, '_get', ["p"]), '_get', [i]), dart.bind(this.form, 'checkValue'));
        }
      } catch (e) {
        let ex = dart.getThrown(e);
      }
      this.form.extractParams();
    }
    fillFromString(value) {
      if (value != null) {
        if (StringL().is(value)) {
          this.fillFromJson(convert.json.decode(value));
        } else {
          this.fillFromJson(value);
        }
      }
    }
  };
  (base_print.FormConfig.new = function(form, _checked) {
    this[_checked$] = true;
    this[opened] = false;
    this[form$] = form;
    this[_checked$] = _checked;
  }).prototype = base_print.FormConfig.prototype;
  dart.addTypeTests(base_print.FormConfig);
  dart.addTypeCaches(base_print.FormConfig);
  dart.setMethodSignature(base_print.FormConfig, () => ({
    __proto__: dart.getMethods(base_print.FormConfig.__proto__),
    fill: dart.fnType(dart.void, [dart.legacy(base_print.FormConfig)]),
    fillFromJson: dart.fnType(dart.void, [dart.dynamic]),
    fillFromString: dart.fnType(dart.void, [dart.dynamic])
  }));
  dart.setGetterSignature(base_print.FormConfig, () => ({
    __proto__: dart.getGetters(base_print.FormConfig.__proto__),
    id: dart.legacy(core.String),
    idx: dart.legacy(core.String),
    checked: dart.legacy(core.bool),
    asJson: dart.dynamic,
    asString: dart.legacy(core.String)
  }));
  dart.setSetterSignature(base_print.FormConfig, () => ({
    __proto__: dart.getSetters(base_print.FormConfig.__proto__),
    checked: dart.dynamic
  }));
  dart.setLibraryUri(base_print.FormConfig, L3);
  dart.setFieldSignature(base_print.FormConfig, () => ({
    __proto__: dart.getFields(base_print.FormConfig.__proto__),
    [_checked$]: dart.fieldType(dart.legacy(core.bool)),
    opened: dart.fieldType(dart.legacy(core.bool)),
    form: dart.fieldType(dart.legacy(base_print.BasePrint))
  }));
  var isPortrait$ = dart.privateName(base_print, "Page.isPortrait");
  var x = dart.privateName(base_print, "Page.x");
  var y = dart.privateName(base_print, "Page.y");
  var content$ = dart.privateName(base_print, "Page.content");
  base_print.Page = class Page extends core.Object {
    get isPortrait() {
      return this[isPortrait$];
    }
    set isPortrait(value) {
      this[isPortrait$] = value;
    }
    get x() {
      return this[x];
    }
    set x(value) {
      this[x] = value;
    }
    get y() {
      return this[y];
    }
    set y(value) {
      this[y] = value;
    }
    get content() {
      return this[content$];
    }
    set content(value) {
      this[content$] = value;
    }
    get width() {
      return dart.test(this.isPortrait) ? 21.0 : 29.7;
    }
    get height() {
      return dart.test(this.isPortrait) ? 29.7 : 21.0;
    }
    offset(x, y) {
      this.x = x;
      this.y = y;
    }
    get asElement() {
      return new (IdentityMapOfStringL$ObjectL()).from(["absolutePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.x, "y", this.y]), "stack", this.content]);
    }
  };
  (base_print.Page.new = function(isPortrait, content) {
    this[isPortrait$] = false;
    this[x] = 0.0;
    this[y] = 0.0;
    this[content$] = [];
    this[isPortrait$] = isPortrait;
    this[content$] = content;
    ;
  }).prototype = base_print.Page.prototype;
  dart.addTypeTests(base_print.Page);
  dart.addTypeCaches(base_print.Page);
  dart.setMethodSignature(base_print.Page, () => ({
    __proto__: dart.getMethods(base_print.Page.__proto__),
    offset: dart.fnType(dart.void, [dart.legacy(core.double), dart.legacy(core.double)])
  }));
  dart.setGetterSignature(base_print.Page, () => ({
    __proto__: dart.getGetters(base_print.Page.__proto__),
    width: dart.legacy(core.double),
    height: dart.legacy(core.double),
    asElement: dart.dynamic
  }));
  dart.setLibraryUri(base_print.Page, L3);
  dart.setFieldSignature(base_print.Page, () => ({
    __proto__: dart.getFields(base_print.Page.__proto__),
    isPortrait: dart.fieldType(dart.legacy(core.bool)),
    x: dart.fieldType(dart.legacy(core.double)),
    y: dart.fieldType(dart.legacy(core.double)),
    content: dart.fieldType(dart.legacy(core.List))
  }));
  var current$ = dart.privateName(base_print, "SubNeeded.current");
  var anybody$ = dart.privateName(base_print, "SubNeeded.anybody");
  base_print.SubNeeded = class SubNeeded extends core.Object {
    get current() {
      return this[current$];
    }
    set current(value) {
      this[current$] = value;
    }
    get anybody() {
      return this[anybody$];
    }
    set anybody(value) {
      this[anybody$] = value;
    }
    get needed() {
      return dart.test(this.current) || dart.test(this.anybody);
    }
    mix(src) {
      this.current = !!(dart.notNull(this.current) | dart.test(src.current));
      this.anybody = !!(dart.notNull(this.anybody) | dart.test(src.anybody));
    }
  };
  (base_print.SubNeeded.new = function(current, anybody) {
    this[current$] = false;
    this[anybody$] = false;
    this[current$] = current;
    this[anybody$] = anybody;
    ;
  }).prototype = base_print.SubNeeded.prototype;
  dart.addTypeTests(base_print.SubNeeded);
  dart.addTypeCaches(base_print.SubNeeded);
  dart.setMethodSignature(base_print.SubNeeded, () => ({
    __proto__: dart.getMethods(base_print.SubNeeded.__proto__),
    mix: dart.fnType(dart.void, [dart.legacy(base_print.SubNeeded)])
  }));
  dart.setGetterSignature(base_print.SubNeeded, () => ({
    __proto__: dart.getGetters(base_print.SubNeeded.__proto__),
    needed: dart.legacy(core.bool)
  }));
  dart.setLibraryUri(base_print.SubNeeded, L3);
  dart.setFieldSignature(base_print.SubNeeded, () => ({
    __proto__: dart.getFields(base_print.SubNeeded.__proto__),
    current: dart.fieldType(dart.legacy(core.bool)),
    anybody: dart.fieldType(dart.legacy(core.bool))
  }));
  var status$3 = dart.privateName(base_print, "DataNeeded.status");
  var data = dart.privateName(base_print, "DataNeeded.data");
  base_print.DataNeeded = class DataNeeded extends core.Object {
    get status() {
      return this[status$3];
    }
    set status(value) {
      this[status$3] = value;
    }
    get data() {
      return this[data];
    }
    set data(value) {
      this[data] = value;
    }
    get needsStatus() {
      return this.status.needed;
    }
    get needsData() {
      return this.data.needed;
    }
    mix(src) {
      this.status.mix(src.status);
      this.data.mix(src.data);
    }
  };
  (base_print.DataNeeded.new = function(opts) {
    let statusCurr = opts && 'statusCurr' in opts ? opts.statusCurr : false;
    let statusAny = opts && 'statusAny' in opts ? opts.statusAny : false;
    let dataCurr = opts && 'dataCurr' in opts ? opts.dataCurr : true;
    let dataAny = opts && 'dataAny' in opts ? opts.dataAny : false;
    this[status$3] = new base_print.SubNeeded.new(false, false);
    this[data] = new base_print.SubNeeded.new(true, false);
    this.status.current = boolL().as(statusCurr);
    this.status.anybody = boolL().as(statusAny);
    this.data.current = boolL().as(dataCurr);
    this.data.anybody = boolL().as(dataAny);
  }).prototype = base_print.DataNeeded.prototype;
  dart.addTypeTests(base_print.DataNeeded);
  dart.addTypeCaches(base_print.DataNeeded);
  dart.setMethodSignature(base_print.DataNeeded, () => ({
    __proto__: dart.getMethods(base_print.DataNeeded.__proto__),
    mix: dart.fnType(dart.void, [dart.legacy(base_print.DataNeeded)])
  }));
  dart.setGetterSignature(base_print.DataNeeded, () => ({
    __proto__: dart.getGetters(base_print.DataNeeded.__proto__),
    needsStatus: dart.legacy(core.bool),
    needsData: dart.legacy(core.bool)
  }));
  dart.setLibraryUri(base_print.DataNeeded, L3);
  dart.setFieldSignature(base_print.DataNeeded, () => ({
    __proto__: dart.getFields(base_print.DataNeeded.__proto__),
    status: dart.fieldType(dart.legacy(base_print.SubNeeded)),
    data: dart.fieldType(dart.legacy(base_print.SubNeeded))
  }));
  var text$ = dart.privateName(base_print, "HelpItem.text");
  var type$1 = dart.privateName(base_print, "HelpItem.type");
  var cfg = dart.privateName(base_print, "HelpItem.cfg");
  base_print.HelpItem = class HelpItem extends core.Object {
    get text() {
      return this[text$];
    }
    set text(value) {
      this[text$] = value;
    }
    get type() {
      return this[type$1];
    }
    set type(value) {
      this[type$1] = value;
    }
    get cfg() {
      return this[cfg];
    }
    set cfg(value) {
      this[cfg] = value;
    }
  };
  (base_print.HelpItem.new = function() {
    this[text$] = null;
    this[type$1] = null;
    this[cfg] = null;
    ;
  }).prototype = base_print.HelpItem.prototype;
  dart.addTypeTests(base_print.HelpItem);
  dart.addTypeCaches(base_print.HelpItem);
  dart.setLibraryUri(base_print.HelpItem, L3);
  dart.setFieldSignature(base_print.HelpItem, () => ({
    __proto__: dart.getFields(base_print.HelpItem.__proto__),
    text: dart.fieldType(dart.legacy(core.String)),
    type: dart.fieldType(dart.legacy(core.String)),
    cfg: dart.fieldType(dart.legacy(base_print.FormConfig))
  }));
  var _pages = dart.privateName(base_print, "_pages");
  var _fileSize = dart.privateName(base_print, "_fileSize");
  var _msgPageCountEst = dart.privateName(base_print, "_msgPageCountEst");
  var _msgPageCount = dart.privateName(base_print, "_msgPageCount");
  var _getFooterImage = dart.privateName(base_print, "_getFooterImage");
  var _addPageBreak = dart.privateName(base_print, "_addPageBreak");
  var g$2 = dart.privateName(base_print, "BasePrint.g");
  var id$1 = dart.privateName(base_print, "BasePrint.id");
  var idx = dart.privateName(base_print, "BasePrint.idx");
  var title$1 = dart.privateName(base_print, "BasePrint.title");
  var subtitle = dart.privateName(base_print, "BasePrint.subtitle");
  var needed = dart.privateName(base_print, "BasePrint.needed");
  var help = dart.privateName(base_print, "BasePrint.help");
  var titleInfo = dart.privateName(base_print, "BasePrint.titleInfo");
  var titleInfoSub = dart.privateName(base_print, "BasePrint.titleInfoSub");
  var footerTextAboveLine = dart.privateName(base_print, "BasePrint.footerTextAboveLine");
  var pagesPerSheet = dart.privateName(base_print, "BasePrint.pagesPerSheet");
  var params = dart.privateName(base_print, "BasePrint.params");
  var colText = dart.privateName(base_print, "BasePrint.colText");
  var colInfo = dart.privateName(base_print, "BasePrint.colInfo");
  var colSubTitle = dart.privateName(base_print, "BasePrint.colSubTitle");
  var colLine = dart.privateName(base_print, "BasePrint.colLine");
  var colValue = dart.privateName(base_print, "BasePrint.colValue");
  var colBasalProfile = dart.privateName(base_print, "BasePrint.colBasalProfile");
  var colBasalFont = dart.privateName(base_print, "BasePrint.colBasalFont");
  var colProfileSwitch = dart.privateName(base_print, "BasePrint.colProfileSwitch");
  var colBolus = dart.privateName(base_print, "BasePrint.colBolus");
  var colBolusExt = dart.privateName(base_print, "BasePrint.colBolusExt");
  var colCarbBolus = dart.privateName(base_print, "BasePrint.colCarbBolus");
  var colLow = dart.privateName(base_print, "BasePrint.colLow");
  var colNormLow = dart.privateName(base_print, "BasePrint.colNormLow");
  var colNorm = dart.privateName(base_print, "BasePrint.colNorm");
  var colNormHigh = dart.privateName(base_print, "BasePrint.colNormHigh");
  var colHigh = dart.privateName(base_print, "BasePrint.colHigh");
  var colTargetArea = dart.privateName(base_print, "BasePrint.colTargetArea");
  var colTargetValue = dart.privateName(base_print, "BasePrint.colTargetValue");
  var colCarbs = dart.privateName(base_print, "BasePrint.colCarbs");
  var colCarbsText = dart.privateName(base_print, "BasePrint.colCarbsText");
  var colDurationNotes = dart.privateName(base_print, "BasePrint.colDurationNotes");
  var colDurationNotesLine = dart.privateName(base_print, "BasePrint.colDurationNotesLine");
  var colNotes = dart.privateName(base_print, "BasePrint.colNotes");
  var colNotesLine = dart.privateName(base_print, "BasePrint.colNotesLine");
  var colGlucValues = dart.privateName(base_print, "BasePrint.colGlucValues");
  var colBloodValues = dart.privateName(base_print, "BasePrint.colBloodValues");
  var colHbA1c = dart.privateName(base_print, "BasePrint.colHbA1c");
  var colWeekDays = dart.privateName(base_print, "BasePrint.colWeekDays");
  var colWeekDaysText = dart.privateName(base_print, "BasePrint.colWeekDaysText");
  var colExercises = dart.privateName(base_print, "BasePrint.colExercises");
  var colExerciseText = dart.privateName(base_print, "BasePrint.colExerciseText");
  var colCGPLine = dart.privateName(base_print, "BasePrint.colCGPLine");
  var colCGPHealthyLine = dart.privateName(base_print, "BasePrint.colCGPHealthyLine");
  var colCGPHealthyFill = dart.privateName(base_print, "BasePrint.colCGPHealthyFill");
  var colCGPPatientLine = dart.privateName(base_print, "BasePrint.colCGPPatientLine");
  var colCGPPatientFill = dart.privateName(base_print, "BasePrint.colCGPPatientFill");
  var colIOBFill = dart.privateName(base_print, "BasePrint.colIOBFill");
  var colIOBLine = dart.privateName(base_print, "BasePrint.colIOBLine");
  var colCOBFill = dart.privateName(base_print, "BasePrint.colCOBFill");
  var colCOBLine = dart.privateName(base_print, "BasePrint.colCOBLine");
  var colTrendCrit = dart.privateName(base_print, "BasePrint.colTrendCrit");
  var colTrendWarn = dart.privateName(base_print, "BasePrint.colTrendWarn");
  var colTrendNorm = dart.privateName(base_print, "BasePrint.colTrendNorm");
  var colCOBDaily = dart.privateName(base_print, "BasePrint.colCOBDaily");
  var colIOBDaily = dart.privateName(base_print, "BasePrint.colIOBDaily");
  var xorg = dart.privateName(base_print, "BasePrint.xorg");
  var yorg = dart.privateName(base_print, "BasePrint.yorg");
  var xframe = dart.privateName(base_print, "BasePrint.xframe");
  var lw = dart.privateName(base_print, "BasePrint.lw");
  var lc = dart.privateName(base_print, "BasePrint.lc");
  var lcFrame = dart.privateName(base_print, "BasePrint.lcFrame");
  var isPortraitParam = dart.privateName(base_print, "BasePrint.isPortraitParam");
  var tableHeadFilled = dart.privateName(base_print, "BasePrint.tableHeadFilled");
  var tableHeadLine = dart.privateName(base_print, "BasePrint.tableHeadLine");
  var tableWidths = dart.privateName(base_print, "BasePrint.tableWidths");
  var m0 = dart.privateName(base_print, "BasePrint.m0");
  var images = dart.privateName(base_print, "BasePrint.images");
  var repData = dart.privateName(base_print, "BasePrint.repData");
  var scale$ = dart.privateName(base_print, "BasePrint.scale");
  var offsetX = dart.privateName(base_print, "BasePrint.offsetX");
  var offsetY = dart.privateName(base_print, "BasePrint.offsetY");
  base_print.BasePrint = class BasePrint extends core.Object {
    get g() {
      return this[g$2];
    }
    set g(value) {
      this[g$2] = value;
    }
    get id() {
      return this[id$1];
    }
    set id(value) {
      this[id$1] = value;
    }
    get idx() {
      return this[idx];
    }
    set idx(value) {
      this[idx] = value;
    }
    get title() {
      return this[title$1];
    }
    set title(value) {
      this[title$1] = value;
    }
    get subtitle() {
      return this[subtitle];
    }
    set subtitle(value) {
      this[subtitle] = value;
    }
    get needed() {
      return this[needed];
    }
    set needed(value) {
      this[needed] = value;
    }
    get help() {
      return this[help];
    }
    set help(value) {
      this[help] = value;
    }
    get titleInfo() {
      return this[titleInfo];
    }
    set titleInfo(value) {
      this[titleInfo] = value;
    }
    get titleInfoSub() {
      return this[titleInfoSub];
    }
    set titleInfoSub(value) {
      this[titleInfoSub] = value;
    }
    get footerTextAboveLine() {
      return this[footerTextAboveLine];
    }
    set footerTextAboveLine(value) {
      this[footerTextAboveLine] = value;
    }
    get pagesPerSheet() {
      return this[pagesPerSheet];
    }
    set pagesPerSheet(value) {
      this[pagesPerSheet] = value;
    }
    get params() {
      return this[params];
    }
    set params(value) {
      this[params] = value;
    }
    get colText() {
      return this[colText];
    }
    set colText(value) {
      this[colText] = value;
    }
    get colInfo() {
      return this[colInfo];
    }
    set colInfo(value) {
      this[colInfo] = value;
    }
    get colSubTitle() {
      return this[colSubTitle];
    }
    set colSubTitle(value) {
      this[colSubTitle] = value;
    }
    get colLine() {
      return this[colLine];
    }
    set colLine(value) {
      this[colLine] = value;
    }
    get colValue() {
      return this[colValue];
    }
    set colValue(value) {
      this[colValue] = value;
    }
    get colBasalProfile() {
      return this[colBasalProfile];
    }
    set colBasalProfile(value) {
      this[colBasalProfile] = value;
    }
    get colBasalFont() {
      return this[colBasalFont];
    }
    set colBasalFont(value) {
      this[colBasalFont] = value;
    }
    get colProfileSwitch() {
      return this[colProfileSwitch];
    }
    set colProfileSwitch(value) {
      this[colProfileSwitch] = value;
    }
    get colBolus() {
      return this[colBolus];
    }
    set colBolus(value) {
      this[colBolus] = value;
    }
    get colBolusExt() {
      return this[colBolusExt];
    }
    set colBolusExt(value) {
      this[colBolusExt] = value;
    }
    get colCarbBolus() {
      return this[colCarbBolus];
    }
    set colCarbBolus(value) {
      this[colCarbBolus] = value;
    }
    get colLow() {
      return this[colLow];
    }
    set colLow(value) {
      this[colLow] = value;
    }
    get colNormLow() {
      return this[colNormLow];
    }
    set colNormLow(value) {
      this[colNormLow] = value;
    }
    get colNorm() {
      return this[colNorm];
    }
    set colNorm(value) {
      this[colNorm] = value;
    }
    get colNormHigh() {
      return this[colNormHigh];
    }
    set colNormHigh(value) {
      this[colNormHigh] = value;
    }
    get colHigh() {
      return this[colHigh];
    }
    set colHigh(value) {
      this[colHigh] = value;
    }
    get colTargetArea() {
      return this[colTargetArea];
    }
    set colTargetArea(value) {
      this[colTargetArea] = value;
    }
    get colTargetValue() {
      return this[colTargetValue];
    }
    set colTargetValue(value) {
      this[colTargetValue] = value;
    }
    get colCarbs() {
      return this[colCarbs];
    }
    set colCarbs(value) {
      this[colCarbs] = value;
    }
    get colCarbsText() {
      return this[colCarbsText];
    }
    set colCarbsText(value) {
      this[colCarbsText] = value;
    }
    get colDurationNotes() {
      return this[colDurationNotes];
    }
    set colDurationNotes(value) {
      this[colDurationNotes] = value;
    }
    get colDurationNotesLine() {
      return this[colDurationNotesLine];
    }
    set colDurationNotesLine(value) {
      this[colDurationNotesLine] = value;
    }
    get colNotes() {
      return this[colNotes];
    }
    set colNotes(value) {
      this[colNotes] = value;
    }
    get colNotesLine() {
      return this[colNotesLine];
    }
    set colNotesLine(value) {
      this[colNotesLine] = value;
    }
    get colGlucValues() {
      return this[colGlucValues];
    }
    set colGlucValues(value) {
      this[colGlucValues] = value;
    }
    get colBloodValues() {
      return this[colBloodValues];
    }
    set colBloodValues(value) {
      this[colBloodValues] = value;
    }
    get colHbA1c() {
      return this[colHbA1c];
    }
    set colHbA1c(value) {
      this[colHbA1c] = value;
    }
    get colWeekDays() {
      return this[colWeekDays];
    }
    set colWeekDays(value) {
      this[colWeekDays] = value;
    }
    get colWeekDaysText() {
      return this[colWeekDaysText];
    }
    set colWeekDaysText(value) {
      this[colWeekDaysText] = value;
    }
    get colExercises() {
      return this[colExercises];
    }
    set colExercises(value) {
      this[colExercises] = value;
    }
    get colExerciseText() {
      return this[colExerciseText];
    }
    set colExerciseText(value) {
      this[colExerciseText] = value;
    }
    get colCGPLine() {
      return this[colCGPLine];
    }
    set colCGPLine(value) {
      this[colCGPLine] = value;
    }
    get colCGPHealthyLine() {
      return this[colCGPHealthyLine];
    }
    set colCGPHealthyLine(value) {
      this[colCGPHealthyLine] = value;
    }
    get colCGPHealthyFill() {
      return this[colCGPHealthyFill];
    }
    set colCGPHealthyFill(value) {
      this[colCGPHealthyFill] = value;
    }
    get colCGPPatientLine() {
      return this[colCGPPatientLine];
    }
    set colCGPPatientLine(value) {
      this[colCGPPatientLine] = value;
    }
    get colCGPPatientFill() {
      return this[colCGPPatientFill];
    }
    set colCGPPatientFill(value) {
      this[colCGPPatientFill] = value;
    }
    get colIOBFill() {
      return this[colIOBFill];
    }
    set colIOBFill(value) {
      this[colIOBFill] = value;
    }
    get colIOBLine() {
      return this[colIOBLine];
    }
    set colIOBLine(value) {
      this[colIOBLine] = value;
    }
    get colCOBFill() {
      return this[colCOBFill];
    }
    set colCOBFill(value) {
      this[colCOBFill] = value;
    }
    get colCOBLine() {
      return this[colCOBLine];
    }
    set colCOBLine(value) {
      this[colCOBLine] = value;
    }
    get colTrendCrit() {
      return this[colTrendCrit];
    }
    set colTrendCrit(value) {
      this[colTrendCrit] = value;
    }
    get colTrendWarn() {
      return this[colTrendWarn];
    }
    set colTrendWarn(value) {
      this[colTrendWarn] = value;
    }
    get colTrendNorm() {
      return this[colTrendNorm];
    }
    set colTrendNorm(value) {
      this[colTrendNorm] = value;
    }
    get colCOBDaily() {
      return this[colCOBDaily];
    }
    set colCOBDaily(value) {
      this[colCOBDaily] = value;
    }
    get colIOBDaily() {
      return this[colIOBDaily];
    }
    set colIOBDaily(value) {
      this[colIOBDaily] = value;
    }
    get xorg() {
      return this[xorg];
    }
    set xorg(value) {
      this[xorg] = value;
    }
    get yorg() {
      return this[yorg];
    }
    set yorg(value) {
      this[yorg] = value;
    }
    get xframe() {
      return this[xframe];
    }
    set xframe(value) {
      this[xframe] = value;
    }
    get lw() {
      return this[lw];
    }
    set lw(value) {
      this[lw] = value;
    }
    get lc() {
      return this[lc];
    }
    set lc(value) {
      this[lc] = value;
    }
    get lcFrame() {
      return this[lcFrame];
    }
    set lcFrame(value) {
      this[lcFrame] = value;
    }
    get isPortraitParam() {
      return this[isPortraitParam];
    }
    set isPortraitParam(value) {
      this[isPortraitParam] = value;
    }
    get tableHeadFilled() {
      return this[tableHeadFilled];
    }
    set tableHeadFilled(value) {
      this[tableHeadFilled] = value;
    }
    get tableHeadLine() {
      return this[tableHeadLine];
    }
    set tableHeadLine(value) {
      this[tableHeadLine] = value;
    }
    get tableWidths() {
      return this[tableWidths];
    }
    set tableWidths(value) {
      this[tableWidths] = value;
    }
    get m0() {
      return this[m0];
    }
    set m0(value) {
      this[m0] = value;
    }
    get images() {
      return this[images];
    }
    set images(value) {
      this[images] = value;
    }
    get repData() {
      return this[repData];
    }
    set repData(value) {
      this[repData] = value;
    }
    get scale() {
      return this[scale$];
    }
    set scale(value) {
      this[scale$] = value;
    }
    get offsetX() {
      return this[offsetX];
    }
    set offsetX(value) {
      this[offsetX] = value;
    }
    get offsetY() {
      return this[offsetY];
    }
    set offsetY(value) {
      this[offsetY] = value;
    }
    get helpHtml() {
      if (this.help == null) return null;
      let ret = this.help[$replaceAll]("\n", "µ");
      ret = ret[$replaceAll]("µµ", "<br><br>");
      ret = ret[$replaceAll]("µ", " ");
      let list = core.RegExp.new("@([^@]*)@").allMatches(ret);
      let links = JSArrayOfStringL().of([]);
      for (let match of list) {
        let part = match.group(1);
        let cfg = this.g.listConfig[$firstWhere](dart.fn(cfg => cfg.idx == part, FormConfigLToboolL()), {orElse: dart.fn(() => null, VoidToNullN())});
        if (cfg != null) {
          links[$add]("</span><material-button (trigger)=\"g.show('Oleole')\">" + dart.str(cfg.form.title) + "</material-button><span>");
        }
      }
      ret = ret + dart.notNull(links[$toString]());
      return ret;
    }
    get helpStrings() {
      let t25, t25$, t25$0, t25$1, t25$2;
      let ret = JSArrayOfHelpItemL().of([]);
      let text = (t25$ = (t25 = this.help, t25 == null ? null : t25[$replaceAll]("\n", "µ")), t25$ == null ? "" : t25$);
      text = text[$replaceAll]("µµ", "<br><br>");
      text = text[$replaceAll]("µ", " ");
      let pos = text[$indexOf]("@");
      while (pos >= 0) {
        if (pos > 0) {
          ret[$add]((t25$0 = new base_print.HelpItem.new(), (() => {
            t25$0.type = "text";
            t25$0.text = text[$substring](0, pos);
            return t25$0;
          })()));
          text = text[$substring](pos);
          pos = 0;
        }
        text = text[$substring](1);
        pos = text[$indexOf]("@");
        if (pos >= 0) {
          let id = text[$substring](0, pos);
          let cfg = this.g.listConfig[$firstWhere](dart.fn(cfg => cfg.idx === id, FormConfigLToboolL()), {orElse: dart.fn(() => null, VoidToNullN())});
          if (cfg != null) {
            ret[$add]((t25$1 = new base_print.HelpItem.new(), (() => {
              t25$1.type = "btn";
              t25$1.cfg = cfg;
              t25$1.text = cfg.form.title;
              return t25$1;
            })()));
          }
          text = text[$substring](pos + 1);
        }
        pos = text[$indexOf]("@");
      }
      if (text[$isNotEmpty]) {
        ret[$add]((t25$2 = new base_print.HelpItem.new(), (() => {
          t25$2.type = "text";
          t25$2.text = text;
          return t25$2;
        })()));
      }
      return ret;
    }
    get display() {
      let ret = this.title;
      if (dart.test(this.isLocalOnly)) ret = dart.str(ret) + " (local)";
      return ret;
    }
    get backsuffix() {
      return "";
    }
    get backimage() {
      this.extractParams();
      return "packages/nightscout_reporter/assets/img/thumbs/" + dart.str(this.g.language.img) + "/" + dart.str(this.id) + (this.backsuffix === "" ? "" : "-" + dart.str(this.backsuffix)) + ".png";
    }
    get sortedParams() {
      let ret = JSArrayOfParamInfoL().of([]);
      ret[$addAll](this.params[$where](dart.fn(p => !dart.test(p.isDeprecated), ParamInfoLToboolL())));
      ret[$sort](dart.fn((a, b) => a.sort[$compareTo](b.sort), ParamInfoLAndParamInfoLTointL()));
      return ret;
    }
    get isLocalOnly() {
      return false;
    }
    get isDebugOnly() {
      return false;
    }
    get isBetaOrLocal() {
      return false;
    }
    hba1c(avgGluc) {
      return avgGluc == null ? "" : this.g.fmtNumber(this.hba1cValue(avgGluc), 1);
    }
    hba1cValue(avgGluc) {
      return avgGluc == null ? null : (dart.notNull(avgGluc) + 46.7) / 28.7;
    }
    get colBasalDay() {
      return this.blendColor(this.colBasalProfile, "#ffffff", 0.5);
    }
    get isPortrait() {
      return true;
    }
    get width() {
      return dart.test(this.isPortrait) ? 21.0 : 29.7;
    }
    get height() {
      return dart.test(this.isPortrait) ? 29.7 : 21.0;
    }
    pageCountDisplay(forceEstimate) {
      let t25, t25$, t25$0;
      let ret = new (IdentityMapOfStringL$ObjectL()).from(["count", (t25$0 = (t25$ = (t25 = this.g, t25 == null ? null : t25.period), t25$ == null ? null : t25$.dayCount), t25$0 == null ? 0 : t25$0), "isEstimated", true]);
      if (!dart.dtest(forceEstimate) && this[_pages] != null && dart.notNull(this[_pages][$length]) > 0) {
        dart.dsend(ret, '_set', ["count", this[_pages][$length]]);
        dart.dsend(ret, '_set', ["isEstimated", false]);
      } else {
        this.extractParams();
        ret = this.estimatePageCount;
      }
      dart.dsend(ret, '_set', ["count", dart.dsend(dart.dsend(dart.dsend(ret, '_get', ["count"]), '/', [this.pagesPerSheet]), 'ceil', [])]);
      return StringL().as(this.msgPageCount(dart.dsend(ret, '_get', ["count"]), dart.dsend(ret, '_get', ["isEstimated"])));
    }
    [_msgPageCountEst](count) {
      return intl.Intl.plural(intL().as(count), {zero: "", one: "1 Seite oder mehr", other: dart.str(count) + " Seiten oder mehr", args: JSArrayOfObjectL().of([count]), name: "_msgPageCountEst"});
    }
    [_msgPageCount](count) {
      return intl.Intl.plural(intL().as(count), {zero: "", one: "1 Seite", other: dart.str(count) + " Seiten", args: JSArrayOfObjectL().of([count]), name: "_msgPageCount"});
    }
    msgPageCount(count, isEstimated) {
      return dart.dtest(isEstimated) ? this[_msgPageCountEst](count) : this[_msgPageCount](count);
    }
    msgValidRange(begDate, endDate) {
      return intl.Intl.message("gültig von " + dart.str(begDate) + " bis " + dart.str(endDate), {args: JSArrayOfObjectL().of([begDate, endDate]), name: "msgValidRange"});
    }
    msgValidFrom(begDate) {
      return intl.Intl.message("gültig ab " + dart.str(begDate), {args: JSArrayOfObjectL().of([begDate]), name: "msgValidFrom"});
    }
    msgValidTo(endDate) {
      return intl.Intl.message("gültig bis " + dart.str(endDate), {args: JSArrayOfObjectL().of([endDate]), name: "msgValidTo"});
    }
    get msgInsulinUnit() {
      return intl.Intl.message("IE");
    }
    get msgMedian() {
      return intl.Intl.message("Median");
    }
    get msgUntil() {
      return intl.Intl.message("bis");
    }
    msgDuration(hours, minutes) {
      return intl.Intl.message(dart.str(hours) + " Std " + dart.str(minutes) + " Min", {args: JSArrayOfObjectL().of([hours, minutes]), name: "msgDuration"});
    }
    msgTargetArea(min, max, units) {
      return intl.Intl.message("Zielbereich (" + dart.str(min) + " - " + dart.str(max) + " " + dart.str(units) + ")", {args: JSArrayOfObjectL().of([min, max, units]), name: "msgTargetArea"});
    }
    msgTargetValue(value) {
      return intl.Intl.message("Zielwert", {args: JSArrayOfObjectL().of([value]), name: "msgTargetValue"});
    }
    get msgGlucosekurve() {
      return intl.Intl.message("Glukosekurve");
    }
    msgCarbs(value) {
      return intl.Intl.message("Kohlenhydrate (" + dart.str(value) + "g)", {args: JSArrayOfObjectL().of([value]), name: "msgCarbs"});
    }
    msgBolusInsulin(value) {
      return intl.Intl.message("Bolus Insulin (" + dart.str(value) + ")", {args: JSArrayOfObjectL().of([value]), name: "msgBolusInsulin"});
    }
    get msgMealBolus() {
      return intl.Intl.message("Mahlzeitenbolus", {meaning: "bolus to handle a meal"});
    }
    get msgBolusWizard() {
      return intl.Intl.message("Bolus Rechner", {meaning: "bolus calculated by the bolus wizard"});
    }
    get msgBolusExtInsulin() {
      return intl.Intl.message("Verzögerter Bolus");
    }
    msgCorrectBolusInsulin(value) {
      return intl.Intl.message("Korrektur Bolus (" + dart.str(value) + ")", {args: JSArrayOfObjectL().of([value]), name: "msgCorrectBolusInsulin"});
    }
    msgCarbBolusInsulin(value) {
      return intl.Intl.message("Mahlzeiten Bolus (" + dart.str(value) + ")", {args: JSArrayOfObjectL().of([value]), name: "msgCarbBolusInsulin"});
    }
    msgSMBInsulin(value) {
      return intl.Intl.message("SMB (" + dart.str(value) + ")", {args: JSArrayOfObjectL().of([value]), name: "msgSMBInsulin"});
    }
    get msgBasalrate() {
      return intl.Intl.message("Basalrate");
    }
    msgBasalrateDay(value) {
      return intl.Intl.message("Basalrate für den Tag (" + dart.str(value) + ")", {args: JSArrayOfObjectL().of([value]), name: "msgBasalrateDay"});
    }
    msgBasalrateProfile(value) {
      return intl.Intl.message("Basalrate aus dem Profil (" + dart.str(value) + ")", {args: JSArrayOfObjectL().of([value]), name: "msgBasalrateProfile"});
    }
    msgLegendTDD(value) {
      return intl.Intl.message("Gesamtinsulin (" + dart.str(value) + ")", {args: JSArrayOfObjectL().of([value]), name: "msgLegendTDD"});
    }
    get msgTDD() {
      return intl.Intl.message("TDD");
    }
    get msgMissingData() {
      return intl.Intl.message("Es sind keine Daten für den Ausdruck vorhanden");
    }
    get msgServerNotReachable() {
      return this.g.msgUrlFailure("")[$replaceAll]("<br>", "\n");
    }
    get msgCatheterChange() {
      return intl.Intl.message("Katheterwechsel");
    }
    get msgSensorChange() {
      return intl.Intl.message("Sensorwechsel");
    }
    get msgAmpulleChange() {
      return intl.Intl.message("Reservoirwechsel");
    }
    get msgCollectedValues() {
      return intl.Intl.message("Aufsummierte Werte");
    }
    get msgCarbIE() {
      return intl.Intl.message("Berechnete IE für Kohlenhydrate");
    }
    get msgKHTitle() {
      return intl.Intl.message("KH");
    }
    msgKH(value) {
      return intl.Intl.message(dart.str(value) + "g", {args: JSArrayOfObjectL().of([value]), name: "msgKH"});
    }
    msgReadingsPerDay(howMany, fmt) {
      return intl.Intl.plural(intL().as(howMany), {zero: "Keine Messwerte vorhanden", one: "1 Messung am Tag", other: dart.str(fmt) + " Messungen am Tag", args: JSArrayOfObjectL().of([howMany, fmt]), name: "msgReadingsPerDay"});
    }
    msgReadingsPerHour(howMany, fmt) {
      return intl.Intl.plural(intL().as(howMany), {zero: "Keine Messwerte vorhanden", one: "1 Messung pro Stunde", other: dart.str(fmt) + " Messungen pro Stunde", args: JSArrayOfObjectL().of([howMany, fmt]), name: "msgReadingsPerHour"});
    }
    msgReadingsInMinutes(howMany, fmt) {
      return intl.Intl.plural(intL().as(howMany), {zero: "Keine Messwerte vorhanden", one: "1 Messung pro Minute", other: "Messung alle " + dart.str(fmt) + " Minuten", args: JSArrayOfObjectL().of([howMany, fmt]), name: "msgReadingsInMinutes"});
    }
    msgValuesIn(low, high) {
      return intl.Intl.message("Werte zwischen " + dart.str(low) + " und " + dart.str(high), {args: JSArrayOfObjectL().of([low, high]), name: "msgValuesIn"});
    }
    msgValuesBelow(low) {
      return intl.Intl.message("Werte unter " + dart.str(low), {args: JSArrayOfObjectL().of([low]), name: "msgValuesBelow"});
    }
    msgValuesAbove(high) {
      return intl.Intl.message("Werte über " + dart.str(high), {args: JSArrayOfObjectL().of([high]), name: "msgValuesAbove"});
    }
    msgValuesVeryHigh(value) {
      return intl.Intl.message("Sehr hohe Werte ( > " + dart.str(value) + ")", {args: JSArrayOfObjectL().of([value]), name: "msgValuesVeryHigh"});
    }
    msgValuesNormHigh(value) {
      return intl.Intl.message("Hohe Werte (" + dart.str(value) + ")", {args: JSArrayOfObjectL().of([value]), name: "msgValuesNormHigh"});
    }
    msgValuesNorm(low, high) {
      return intl.Intl.message("Zielbereich (" + dart.str(low) + " - " + dart.str(high) + ")", {args: JSArrayOfObjectL().of([low, high]), name: "msgValuesNorm"});
    }
    msgValuesNormLow(value) {
      return intl.Intl.message("Niedrige Werte (" + dart.str(value) + ")", {args: JSArrayOfObjectL().of([value]), name: "msgValuesNormLow"});
    }
    msgValuesVeryLow(value) {
      return intl.Intl.message("Sehr niedrige Werte (< " + dart.str(value) + ")", {args: JSArrayOfObjectL().of([value]), name: "msgValuesVeryLow"});
    }
    msgKHBE(value) {
      return intl.Intl.message("g KH (" + dart.str(value) + " BE)", {args: JSArrayOfObjectL().of([value]), name: "msgKHBE", meaning: "gram Carbohydrates displayed at analysis page"});
    }
    msgReservoirDays(count, txt) {
      return intl.Intl.plural(intL().as(count), {one: "(" + dart.str(txt) + " Tag pro Ampulle)", zero: "", other: "(" + dart.str(txt) + " Tage pro Ampulle)", args: JSArrayOfObjectL().of([count, txt]), name: "msgReservoirDays"});
    }
    msgCatheterDays(count, txt) {
      return intl.Intl.plural(intL().as(count), {one: "(" + dart.str(txt) + " Tag pro Katheter)", zero: "", other: "(" + dart.str(txt) + " Tage pro Katheter)", args: JSArrayOfObjectL().of([count, txt]), name: "msgCatheterDays"});
    }
    msgSensorDays(count, txt) {
      return intl.Intl.plural(intL().as(count), {one: "(" + dart.str(txt) + " Tag pro Sensor)", zero: "", other: "(" + dart.str(txt) + " Tage pro Sensor)", args: JSArrayOfObjectL().of([count, txt]), name: "msgSensorDays"});
    }
    get msgBirthday() {
      return intl.Intl.message("Geburtstag");
    }
    get msgDiabSince() {
      return intl.Intl.message("Diabetes seit");
    }
    get msgInsulin() {
      return intl.Intl.message("Insulin");
    }
    get msgDays() {
      return intl.Intl.message("Ausgewertete Tage");
    }
    get msgReadingsCount() {
      return intl.Intl.message("Anzahl Messungen");
    }
    get msgReservoirCount() {
      return intl.Intl.message("Anzahl Ampullenwechsel");
    }
    get msgCatheterCount() {
      return intl.Intl.message("Anzahl Katheterwechsel");
    }
    get msgSensorCount() {
      return intl.Intl.message("Anzahl Sensorenwechsel");
    }
    get msgHbA1C() {
      return intl.Intl.message("gesch. HbA1c");
    }
    get msgHbA1CLong() {
      return intl.Intl.message("Geschätzter HbA1c");
    }
    get msgLowestValue() {
      return intl.Intl.message("Niedrigster Wert im Zeitraum");
    }
    get msgHighestValue() {
      return intl.Intl.message("Höchster Wert im Zeitraum");
    }
    get msgGlucoseValue() {
      return intl.Intl.message("Ø Zuckerwert");
    }
    get msgGVIFull() {
      return intl.Intl.message("Glykämischer Variabilitäts Index (GVI)");
    }
    get msgPGSFull() {
      return intl.Intl.message("Patient Glykämischer Status (PGS)");
    }
    get msgKHPerDay() {
      return intl.Intl.message("Ø KH pro Tag");
    }
    get msgKHPerMeal() {
      return intl.Intl.message("Ø KH pro Mahlzeit");
    }
    get msgInsulinPerDay() {
      return intl.Intl.message("Ø Insulin pro Tag");
    }
    get msgBolusPerDay() {
      return intl.Intl.message("Ø Bolus pro Tag");
    }
    get msgBasalPerDay() {
      return intl.Intl.message("Ø Basal pro Tag");
    }
    get msgMicroBolusPerDay() {
      return intl.Intl.message("Ø Microbolus pro Tag");
    }
    get msgInsulinRatio() {
      return intl.Intl.message("Ø Insulinverhältnis");
    }
    get msgBolus() {
      return intl.Intl.message("Bolus");
    }
    get msgBasal() {
      return intl.Intl.message("Basal");
    }
    get msgBasalProfile() {
      return intl.Intl.message("Basalrate\nIE / Stunde");
    }
    get msgNone() {
      return intl.Intl.message("Keine");
    }
    get msgOwnLimits() {
      return intl.Intl.message("Eigene Grenzwerte");
    }
    get msgStandardLimits() {
      return intl.Intl.message("Standardgrenzwerte");
    }
    get msgTreatments() {
      return intl.Intl.message("Behandlungen");
    }
    get msgPeriod() {
      return intl.Intl.message("Zeitraum");
    }
    get msgTotal() {
      return intl.Intl.message("Ges.");
    }
    get msgTimeShort() {
      return intl.Intl.message("Uhr-\nzeit");
    }
    get msgTime() {
      return intl.Intl.message("Uhrzeit");
    }
    get msgIEHr() {
      return intl.Intl.message("IE/std");
    }
    get msgSum() {
      return intl.Intl.message("Summe");
    }
    get msgTrend() {
      return intl.Intl.message("Trend");
    }
    static get msgOutput() {
      return intl.Intl.message("Ausgabe");
    }
    static get msgGraphic() {
      return intl.Intl.message("Grafik");
    }
    static get msgTable() {
      return intl.Intl.message("Tabelle");
    }
    static get msgAll() {
      return intl.Intl.message("Alles");
    }
    static get titleGPD() {
      return intl.Intl.message("Glukose Perzentil Diagramm");
    }
    static get titleGPDShort() {
      return intl.Intl.message("GPD");
    }
    static get msgHourlyStats() {
      return intl.Intl.message("Stündliche Statistik");
    }
    static get msgUseDailyBasalrate() {
      return intl.Intl.message("Tagesbasalrate verwenden");
    }
    get msgNote() {
      return intl.Intl.message("Notiz");
    }
    get msgAdjustment() {
      return intl.Intl.message("Anpas-\nsung");
    }
    get msgGlucLow() {
      return intl.Intl.message("Glukose zu niedrig");
    }
    static get msgGraphsPerPage() {
      return intl.Intl.message("Grafiken pro Seite");
    }
    get msgGlucNorm() {
      return intl.Intl.message("Glukose im Zielbereich");
    }
    get msgSource() {
      return intl.Intl.message("Quelle: Vigersky, R. A., Shin, J., Jiang, B., Siegmund, T., McMahon, C., & Thomas, A. (2018). " + "The Comprehensive Glucose Pentagon: A Glucose-Centric Composite Metric for Assessing Glycemic " + "Control in Persons With Diabetes. Journal of Diabetes Science and Technology, 12(1), 114–123. " + "(https://doi.org/10.1177/1932296817718561)");
    }
    get msgGlucHigh() {
      return intl.Intl.message("Glukose zu hoch");
    }
    msgLow(value) {
      value = "\n<" + dart.str(this.g.glucFromData(value));
      return intl.Intl.message("Tief" + dart.str(value), {args: JSArrayOfObjectL().of([value]), name: "msgLow"});
    }
    msgCount(value) {
      return intl.Intl.plural(value, {zero: "Kein Wert", one: "1 Wert", other: dart.str(value) + " Werte", args: JSArrayOfObjectL().of([value]), name: "msgCount"});
    }
    msgStdAbw(value) {
      value = this.g.fmtNumber(numL().as(value), 1, 0, "0.0");
      return intl.Intl.message("(StdAbw " + dart.str(value) + ")", {args: JSArrayOfObjectL().of([value]), name: "msgStdAbw"});
    }
    static msgTimeOfDay24(time) {
      return intl.Intl.message(dart.str(time) + " Uhr", {args: JSArrayOfObjectL().of([time]), name: "msgTimeOfDay24"});
    }
    static msgTimeOfDayAM(time) {
      return intl.Intl.message(dart.str(time) + " am", {args: JSArrayOfObjectL().of([time]), name: "msgTimeOfDayAM"});
    }
    static msgTimeOfDayPM(time) {
      return intl.Intl.message(dart.str(time) + " pm", {args: JSArrayOfObjectL().of([time]), name: "msgTimeOfDayPM"});
    }
    get msgNormal() {
      return dart.str(intl.Intl.message("Normal")) + "\n" + dart.str(dart.dsend(this.g.getGlucInfo(), '_get', ["unit"]));
    }
    msgHigh(value) {
      value = "\n>=" + dart.str(this.g.glucFromData(value));
      return intl.Intl.message("Hoch" + dart.str(value), {args: JSArrayOfObjectL().of([value]), name: "msgHigh"});
    }
    get msgPercentile1090() {
      return intl.Intl.message("10% - 90% der Werte");
    }
    get msgPercentile2575() {
      return intl.Intl.message("25% - 75% der Werte");
    }
    get msgICRTitle() {
      return intl.Intl.message("Insulin Kohlenhydrate Verhältnis (ICR)");
    }
    get msgISFTitle() {
      return intl.Intl.message("Insulin Sensitivitäts Faktoren (ISF)");
    }
    get msgBasalTitle() {
      return intl.Intl.message("Basalrate");
    }
    get msgBasalSum() {
      return intl.Intl.message("Gesamt");
    }
    get msgTargetTitle() {
      return intl.Intl.message("Zielbereich");
    }
    get msgICRSum() {
      return intl.Intl.message("Ø ICR/Stunde");
    }
    get msgISFSum() {
      return intl.Intl.message("Ø ISF/Stunde");
    }
    get msgICR() {
      return intl.Intl.message("Insulin Kohlenhydrate Verhältnis (ICR)\nX g Kohlenhydrate für 1 IE");
    }
    msgISF(unit) {
      return intl.Intl.message("Insulin Sensitivitäts Faktoren (ISF)\n1 IE senkt BG um X " + dart.str(unit), {args: JSArrayOfObjectL().of([unit]), name: "msgISF"});
    }
    msgTarget(unit) {
      return intl.Intl.message("Glukose-Zielbereich\n" + dart.str(unit), {args: JSArrayOfObjectL().of([unit]), name: "msgTarget"});
    }
    msgFactorEntry(beg, end) {
      return intl.Intl.message(dart.str(beg) + " - " + dart.str(end), {args: JSArrayOfObjectL().of([beg, end]), name: "msgFactorEntry"});
    }
    static get msgOrientation() {
      return intl.Intl.message("Ausrichtung");
    }
    get msgProfile() {
      return intl.Intl.message("Profileinstellungen");
    }
    get msgDIA() {
      return intl.Intl.message("Dauer der Insulinaktivität (DIA)");
    }
    get msgDIAUnit() {
      return intl.Intl.message("Stunden");
    }
    get msgKHA() {
      return intl.Intl.message("Dauer der Kohlenhydrataktivität");
    }
    get msgTimezone() {
      return intl.Intl.message("Zeitzone");
    }
    get msgKHAUnit() {
      return intl.Intl.message("g / Stunde");
    }
    get msgDate() {
      return intl.Intl.message("Datum");
    }
    get msgDistribution() {
      return intl.Intl.message("Verteilung");
    }
    get msgValues() {
      return intl.Intl.message("Mess-\nwerte");
    }
    get msgSensorAV() {
      return intl.Intl.message("Sensor Av");
    }
    get msgMin() {
      return intl.Intl.message("Min");
    }
    get msgMax() {
      return intl.Intl.message("Max");
    }
    get msgAverage() {
      return intl.Intl.message("Mittel-\nwert");
    }
    get msgDeviation() {
      return intl.Intl.message("Std.\nAbw.");
    }
    get msgVarK() {
      return intl.Intl.message("VarK\nin %");
    }
    get msg10() {
      return intl.Intl.message("10%");
    }
    get msg25() {
      return intl.Intl.message("25%");
    }
    get msg75() {
      return intl.Intl.message("75%");
    }
    get msg90() {
      return intl.Intl.message("90%");
    }
    msgDaySum(value) {
      return intl.Intl.message(dart.str(value) + " Tage", {args: JSArrayOfObjectL().of([value]), name: "msgDaySum"});
    }
    get msgStandardDeviation() {
      return intl.Intl.message("Standardabweichung");
    }
    static msgCalibration(scale, intercept, slope) {
      return intl.Intl.message("Kalibrierung (scale " + dart.str(scale) + " / intercept " + dart.str(intercept) + " / slope " + dart.str(slope) + ")", {args: JSArrayOfObjectL().of([scale, intercept, slope]), name: "msgCalibration"});
    }
    static get msgChange() {
      return intl.Intl.message("Wechsel");
    }
    targets(repData) {
      let ret = new (IdentityMapOfStringL$intL()).from(["low", globals.Globals.stdLow, "high", globals.Globals.stdHigh]);
      if (!dart.test(this.g.ppStandardLimits)) {
        dart.dsend(ret, '_set', ["low", repData.status.settings.thresholds.bgTargetBottom]);
        dart.dsend(ret, '_set', ["high", repData.status.settings.thresholds.bgTargetTop]);
      }
      return ret;
    }
    msgGVINone(min) {
      min = this.g.fmtNumber(numL().as(min), 1);
      return intl.Intl.message("nicht vorhanden (kleiner " + dart.str(min) + ")", {args: JSArrayOfObjectL().of([min]), name: "msgGVINone"});
    }
    msgGVIVeryGood(min, max) {
      min = this.g.fmtNumber(numL().as(min), 1);
      max = this.g.fmtNumber(numL().as(max), 1);
      return intl.Intl.message("sehr gut (" + dart.str(min) + " bis " + dart.str(max) + ")", {args: JSArrayOfObjectL().of([min, max]), name: "msgGVIVeryGood"});
    }
    msgGVIGood(min, max) {
      min = this.g.fmtNumber(numL().as(min), 1);
      max = this.g.fmtNumber(numL().as(max), 1);
      return intl.Intl.message("gut (" + dart.str(min) + " bis " + dart.str(max) + ")", {args: JSArrayOfObjectL().of([min, max]), name: "msgGVIGood"});
    }
    msgGVIBad(max) {
      max = this.g.fmtNumber(numL().as(max), 1);
      return intl.Intl.message("schlecht (grösser " + dart.str(max) + ")", {args: JSArrayOfObjectL().of([max]), name: "msgGVIBad"});
    }
    gviQuality(gvi) {
      if (dart.dtest(dart.dsend(gvi, '<', [1.0]))) {
        return this.msgGVINone(1.0);
      } else if (dart.dtest(dart.dsend(gvi, '<=', [1.2]))) {
        return this.msgGVIVeryGood(1.0, 1.2);
      } else if (dart.dtest(dart.dsend(gvi, '<=', [1.5]))) {
        return this.msgGVIGood(1.2, 1.5);
      }
      return this.msgGVIBad(1.5);
    }
    msgPGSVeryGood(min) {
      min = this.g.fmtNumber(numL().as(min));
      return intl.Intl.message("exzellent (kleiner " + dart.str(min) + ")", {args: JSArrayOfObjectL().of([min]), name: "msgPGSVeryGood"});
    }
    msgPGSGood(min, max) {
      min = this.g.fmtNumber(numL().as(min));
      max = this.g.fmtNumber(numL().as(max));
      return intl.Intl.message("gut (" + dart.str(min) + " bis " + dart.str(max) + ")", {args: JSArrayOfObjectL().of([min, max]), name: "msgPGSGood"});
    }
    msgPGSBad(min, max) {
      min = this.g.fmtNumber(numL().as(min));
      max = this.g.fmtNumber(numL().as(max));
      return intl.Intl.message("schlecht (" + dart.str(min) + " bis " + dart.str(max) + ")", {args: JSArrayOfObjectL().of([min, max]), name: "msgPGSBad"});
    }
    msgPGSVeryBad(max) {
      max = this.g.fmtNumber(numL().as(max));
      return intl.Intl.message("sehr schlecht (grösser " + dart.str(max) + ")", {args: JSArrayOfObjectL().of([max]), name: "msgPGSVeryBad"});
    }
    pgsQuality(pgs) {
      if (dart.dtest(dart.dsend(pgs, '<', [35.0]))) {
        return this.msgPGSVeryGood(35);
      } else if (dart.dtest(dart.dsend(pgs, '<=', [100.0]))) {
        return this.msgPGSGood(35, 100);
      } else if (dart.dtest(dart.dsend(pgs, '<=', [150.0]))) {
        return this.msgPGSBad(100, 150);
      }
      return this.msgPGSVeryBad(150);
    }
    msgHistorical(value) {
      return intl.Intl.message("Historisch " + dart.str(value), {args: JSArrayOfObjectL().of([value]), name: "msgHistorical"});
    }
    titleInfoForDates(startDate, endDate) {
      let ret = null;
      if (endDate == null) {
        ret = this.msgValidFrom(this.fmtDate(startDate));
      } else if (startDate.year === 1970) {
        ret = this.msgValidTo(this.fmtDate(endDate));
      } else {
        ret = this.msgValidRange(this.fmtDate(startDate), this.fmtDate(endDate));
      }
      return ret;
    }
    get footerText() {
      return null;
    }
    static get msgDay() {
      return intl.Intl.message("Tag (08:00 - 17:59)");
    }
    static get msgDawn() {
      return intl.Intl.message("Dämmerung (06:00 - 07:59, 18:00 - 20:59)");
    }
    static get msgNight() {
      return intl.Intl.message("Nacht (21:00 - 05:59)");
    }
    get footerTextDayTimes() {
      return JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$ObjectL()).from(["table", new (IdentityMapOfStringL$ListLOfObjectL()).from(["widths", JSArrayOfdoubleL().of([this.cm(6.0)]), "body", JSArrayOfListLOfMapLOfStringL$StringL().of([JSArrayOfMapLOfStringL$StringL().of([new (IdentityMapOfStringL$StringL()).from(["text", base_print.BasePrint.msgDay, "style", "timeDay", "alignment", "center"])]), JSArrayOfMapLOfStringL$StringL().of([new (IdentityMapOfStringL$StringL()).from(["text", base_print.BasePrint.msgDawn, "style", "timeLate", "alignment", "center"])]), JSArrayOfMapLOfStringL$StringL().of([new (IdentityMapOfStringL$StringL()).from(["text", base_print.BasePrint.msgNight, "style", "timeNight", "alignment", "center"])])])]), "fontSize", this.fs(7.0), "layout", "noBorders"])]);
    }
    headerFooter(opts) {
      let skipFooter = opts && 'skipFooter' in opts ? opts.skipFooter : false;
      let date = opts && 'date' in opts ? opts.date : null;
      let isInput = false;
      let stack = [];
      let ret = new (IdentityMapOfStringL$ObjectL()).from(["stack", stack, "pageBreak", ""]);
      if (dart.test(this.isPortrait)) {
        if (isInput) {
          stack[$add](new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(0), "y", this.cm(0)]), "canvas", JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$ObjectL()).from(["type", "rect", "x", this.cm(0.0), "y", this.cm(0), "w", this.cm(1.6), "h", this.cm(0.55), "color", "#d69a2e"]), new (IdentityMapOfStringL$ObjectL()).from(["type", "rect", "x", this.cm(1.6), "y", this.cm(0), "w", this.cm(1.6), "h", this.cm(0.55), "color", "#2e4736"]), new (IdentityMapOfStringL$ObjectL()).from(["type", "rect", "x", this.cm(3.2), "y", this.cm(0), "w", this.cm(1.6), "h", this.cm(0.55), "color", "#662c40"]), new (IdentityMapOfStringL$ObjectL()).from(["type", "rect", "x", this.cm(4.8), "y", this.cm(0), "w", this.cm(1.6), "h", this.cm(0.55), "color", "#343a49"]), new (IdentityMapOfStringL$ObjectL()).from(["type", "rect", "x", this.cm(6.4), "y", this.cm(0), "w", this.cm(1.6), "h", this.cm(0.55), "color", "#528c8e"]), new (IdentityMapOfStringL$ObjectL()).from(["type", "rect", "x", this.cm(8.0), "y", this.cm(0), "w", this.cm(1.6), "h", this.cm(0.55), "color", "#362946"]), new (IdentityMapOfStringL$ObjectL()).from(["type", "rect", "x", this.cm(9.6), "y", this.cm(0), "w", this.cm(1.6), "h", this.cm(0.55), "color", "#6b8133"]), new (IdentityMapOfStringL$ObjectL()).from(["type", "rect", "x", this.cm(11.2), "y", this.cm(0), "w", this.cm(1.6), "h", this.cm(0.55), "color", "#2a3b56"]), new (IdentityMapOfStringL$ObjectL()).from(["type", "rect", "x", this.cm(12.8), "y", this.cm(0), "w", this.cm(1.6), "h", this.cm(0.55), "color", "#862d2e"]), new (IdentityMapOfStringL$ObjectL()).from(["type", "rect", "x", this.cm(14.4), "y", this.cm(0), "w", this.cm(1.6), "h", this.cm(0.55), "color", "#607f6e"]), new (IdentityMapOfStringL$ObjectL()).from(["type", "rect", "x", this.cm(16.0), "y", this.cm(0), "w", this.cm(1.6), "h", this.cm(0.55), "color", "#273d3f"]), new (IdentityMapOfStringL$ObjectL()).from(["type", "rect", "x", this.cm(17.6), "y", this.cm(0), "w", this.cm(1.6), "h", this.cm(0.55), "color", "#a5916d"])])]));
        }
      } else {
        if (isInput) {
          stack[$add](new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(0), "y", this.cm(0)]), "canvas", JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$ObjectL()).from(["type", "rect", "x", this.cm(0.0), "y", this.cm(0), "w", this.cm(2.2), "h", this.cm(0.55), "color", "#d69a2e"]), new (IdentityMapOfStringL$ObjectL()).from(["type", "rect", "x", this.cm(2.2), "y", this.cm(0), "w", this.cm(2.3), "h", this.cm(0.55), "color", "#2e4736"]), new (IdentityMapOfStringL$ObjectL()).from(["type", "rect", "x", this.cm(4.5), "y", this.cm(0), "w", this.cm(2.3), "h", this.cm(0.55), "color", "#662c40"]), new (IdentityMapOfStringL$ObjectL()).from(["type", "rect", "x", this.cm(6.8), "y", this.cm(0), "w", this.cm(2.25), "h", this.cm(0.55), "color", "#343a49"]), new (IdentityMapOfStringL$ObjectL()).from(["type", "rect", "x", this.cm(9.05), "y", this.cm(0), "w", this.cm(2.3), "h", this.cm(0.55), "color", "#528c8e"]), new (IdentityMapOfStringL$ObjectL()).from(["type", "rect", "x", this.cm(11.35), "y", this.cm(0), "w", this.cm(2.25), "h", this.cm(0.55), "color", "#362946"]), new (IdentityMapOfStringL$ObjectL()).from(["type", "rect", "x", this.cm(13.6), "y", this.cm(0), "w", this.cm(2.3), "h", this.cm(0.55), "color", "#6b8133"]), new (IdentityMapOfStringL$ObjectL()).from(["type", "rect", "x", this.cm(15.9), "y", this.cm(0), "w", this.cm(2.25), "h", this.cm(0.55), "color", "#2a3b56"]), new (IdentityMapOfStringL$ObjectL()).from(["type", "rect", "x", this.cm(18.15), "y", this.cm(0), "w", this.cm(2.3), "h", this.cm(0.55), "color", "#862d2e"]), new (IdentityMapOfStringL$ObjectL()).from(["type", "rect", "x", this.cm(20.45), "y", this.cm(0), "w", this.cm(2.3), "h", this.cm(0.55), "color", "#607f6e"]), new (IdentityMapOfStringL$ObjectL()).from(["type", "rect", "x", this.cm(22.75), "y", this.cm(0), "w", this.cm(2.3), "h", this.cm(0.55), "color", "#273d3f"]), new (IdentityMapOfStringL$ObjectL()).from(["type", "rect", "x", this.cm(25.05), "y", this.cm(0), "w", this.cm(2.3), "h", this.cm(0.55), "color", "#a5916d"])])]));
        }
      }
      stack[$add](new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(this.xframe), "y", this.cm(1.0)]), "columns", JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$ObjectL()).from(["width", "auto", "text", this.title, "fontSize", this.fs(36.0), "color", this.colText, "bold", true]), new (IdentityMapOfStringL$ObjectL()).from(["width", "auto", "text", this.subtitle, "fontSize", this.fs(12.0), "color", this.colSubTitle, "bold", true, "margin", JSArrayOfnumL().of([this.cm(0.5), this.cm(0.78), 0, 0])])])]));
      if (!dart.test(this.g.ppHideNightscoutInPDF)) stack[$add](new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(this.xframe), "y", this.cm(2.5)]), "text", "nightscout reporter " + dart.str(this.g.version), "fontSize", this.fs(8.0), "color", this.colSubTitle]));
      let y = this.titleInfoSub === "" ? 2.4 : 2.0;
      if (this.g.currPeriodShift.months !== 0) {
        stack[$add](new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(this.xframe), "y", this.cm(y - 0.5)]), "columns", JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$ObjectL()).from(["width", this.cm(dart.notNull(this.width) - 4.4), "text", this.msgHistorical(this.g.currPeriodShift.title), "fontSize", this.fs(10.0), "color", this.colInfo, "bold", true, "alignment", "right"])])]));
      }
      stack[$add](new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(this.xframe), "y", this.cm(y)]), "columns", JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$ObjectL()).from(["width", this.cm(dart.notNull(this.width) - 4.4), "text", this.titleInfo, "fontSize", this.fs(10.0), "color", this.colInfo, "bold", true, "alignment", "right"])])]));
      if (this.titleInfoSub !== "") {
        stack[$add](new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(this.xframe), "y", this.cm(2.4)]), "columns", JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$ObjectL()).from(["width", this.cm(dart.notNull(this.width) - 4.4), "text", this.titleInfoSub, "fontSize", this.fs(8.0), "color", this.colInfo, "bold", true, "alignment", "right"])])]));
      }
      stack[$add](new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(this.xframe), "y", this.cm(2.95)]), "canvas", JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$ObjectL()).from(["type", "line", "x1", this.cm(0), "y1", this.cm(0), "x2", this.cm(dart.notNull(this.width) - 4.4), "y2", this.cm(0), "lineWidth", this.cm(0.2), "lineColor", this.colText])])]));
      if (dart.dtest(skipFooter)) return ret;
      let rightText = "";
      if (this.repData.user.name[$isEmpty]) {
        if (!this.repData.user.birthDate[$isEmpty]) rightText = "*" + dart.str(this.repData.user.birthDate);
      } else {
        if (!this.repData.user.birthDate[$isEmpty])
          rightText = dart.str(this.repData.user.name) + ", *" + dart.str(this.repData.user.birthDate);
        else
          rightText = this.repData.user.name;
      }
      stack[$addAll]([new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(this.xframe), "y", this.cm(dart.notNull(this.height) - 2.0)]), "canvas", JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$ObjectL()).from(["type", "line", "x1", this.cm(0), "y1", this.cm(0), "x2", this.cm(dart.notNull(this.width) - 4.4), "y2", this.cm(0), "lineWidth", this.cm(0.05), "lineColor", this.colText])])]), dart.equals(this.footerTextAboveLine[$_get]("text"), "") ? null : new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(dart.notNull(this.xframe) + dart.notNull(core.num.as(this.footerTextAboveLine[$_get]("x")))), "y", this.cm(dart.notNull(this.height) - 2.0 - dart.notNull(core.num.as(this.footerTextAboveLine[$_get]("y"))))]), "columns", JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$ObjectL()).from(["width", this.cm(dart.notNull(this.width) - 2 * dart.notNull(this.xframe)), "text", this.footerTextAboveLine[$_get]("text"), "fontSize", this.fs(doubleL().as(this.footerTextAboveLine[$_get]("fs")))])])]), dart.test(this.g.ppHideNightscoutInPDF) ? null : this[_getFooterImage]("nightscout", {x: this.xframe, y: dart.notNull(this.height) - 1.7, width: 0.7}), dart.test(this.g.ppHideNightscoutInPDF) ? null : new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(3.1), "y", this.cm(dart.notNull(this.height) - 1.7)]), "text", "http://www.nightscout.info", "color", this.colInfo, "fontSize", this.fs(10.0)]), this.footerText == null ? null : new (IdentityMapOfStringL$dynamic()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(dart.test(this.g.ppHideNightscoutInPDF) ? this.xframe : 7.5), "y", this.cm(dart.notNull(this.height) - 1.7)]), "stack", this.footerText, "fontSize", this.fs(10.0)]), isInput ? this[_getFooterImage]("input", {x: dart.notNull(this.width) - 5.6, y: dart.notNull(this.height) - 3.3, width: 4.0}) : new _js_helper.LinkedMap.new(), new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(this.xframe), "y", this.cm(dart.notNull(this.height) - 1.7)]), "columns", JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$ObjectL()).from(["width", this.cm(dart.notNull(this.width) - 2 * dart.notNull(this.xframe)), "stack", JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$ObjectL()).from(["text", rightText, "color", this.colInfo, "fontSize", this.fs(10.0)]), !dart.test(this.g.ppShowUrlInPDF) ? null : new (IdentityMapOfStringL$ObjectL()).from(["text", this.g.user.urlDataFor(DateL().as(date)).url, "color", this.colInfo, "fontSize", this.fs(8.0)])]), "alignment", "right"])])])]);
      return ret;
    }
    addTableRow(check, width, dst, head, content) {
      if (!dart.test(check)) return;
      if (!dart.test(this.tableHeadFilled)) {
        dart.dsend(this.tableHeadLine, 'add', [head]);
        dart.dsend(this.tableWidths, 'add', [width]);
      }
      dart.dsend(dst, 'add', [content]);
    }
    getTable(widths, body) {
      let ret = new (IdentityMapOfStringL$ObjectL()).from(["columns", JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$ObjectL()).from(["margin", JSArrayOfdoubleL().of([this.cm(2.2), this.cmy(this.yorg), this.cm(2.2), this.cmy(0.0)]), "width", this.cm(this.width), "fontSize", this.fs(10.0), "table", new (IdentityMapOfStringL$dynamic()).from(["widths", widths, "body", body])])]), "pageBreak", ""]);
      return ret;
    }
    get imgList() {
      return JSArrayOfStringL().of(["nightscout-pale", "nightscout"]);
    }
    init() {
      this.isPortraitParam = this.isPortrait;
    }
    getBase64Image(id) {
      return async.async(StringL(), function* getBase64Image() {
        let response = (yield html.HttpRequest.request("packages/nightscout_reporter/assets/img/" + dart.str(id) + ".png", {responseType: "arraybuffer"}));
        if (ByteBufferL().is(response[$response])) {
          let ret = convert.base64.encode(ByteBufferL().as(response[$response])[$asUint8List]());
          return "data:image/png;base64," + dart.str(ret);
        }
        return "";
      });
    }
    titleInfoBegEnd() {
      return this.titleInfoDateRange(this.repData.begDate, this.repData.endDate);
    }
    titleInfoDateRange(begDate, endDate, opts) {
      let withTime = opts && 'withTime' in opts ? opts.withTime : false;
      this.titleInfoSub = this.g.period.dowActiveText;
      if (dart.equals(begDate, endDate)) return this.fmtDate(begDate);
      return dart.str(this.fmtDate(begDate)) + " " + dart.str(this.msgUntil) + " " + dart.str(this.fmtDate(endDate));
    }
    titleInfoTimeRange(begDate, endDate) {
      let beg = dart.str(this.fmtDate(begDate)) + ", " + dart.str(this.fmtTime(begDate, {withUnit: true}));
      let end = dart.str(this.fmtDate(endDate)) + ", " + dart.str(this.fmtTime(endDate, {withUnit: true}));
      if (endDate == null) return this.msgValidFrom(beg);
      return this.msgValidRange(beg, end);
    }
    extractParams() {
    }
    [_getFooterImage](id, opts) {
      let x = opts && 'x' in opts ? opts.x : null;
      let y = opts && 'y' in opts ? opts.y : null;
      let width = opts && 'width' in opts ? opts.width : null;
      let height = opts && 'height' in opts ? opts.height : 0;
      let ret = new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(x), "y", this.cm(y)]), "image", id]);
      if (this.images[$_get](id) != null) {
        if (width !== 0 && height !== 0) {
          ret[$_set]("fit", JSArrayOfdoubleL().of([this.cm(width), this.cm(height)]));
        } else if (width !== 0) {
          ret[$_set]("width", this.cm(width));
        } else if (height !== 0) ret[$_set]("height", this.cm(height));
      } else {
        ret = new (IdentityMapOfStringL$ObjectL()).from(["stack", JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(x), "y", this.cm(y)]), "canvas", JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$ObjectL()).from(["type", "rect", "x", this.cm(0), "y", this.cm(0), "w", this.cm(math.max(doubleL(), width, 0.01)), "h", this.cm(math.max(doubleL(), height, 0.01)), "lineWidth", this.cm(0.01), "lineColor", "#f00"])])]), new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(x), "y", this.cm(y)]), "text", "bild\n" + dart.str(id) + "\nfehlt", "color", "#f00"])])]);
      }
      return ret;
    }
    hasData(src) {
      return dart.notNull(src.dayCount) > 0 && dart.notNull(src.data.countValid) > 0 || dart.test(this.needed.needsStatus);
    }
    getEmptyForm(isPortrait, status, opts) {
      let skipFooter = opts && 'skipFooter' in opts ? opts.skipFooter : false;
      return new base_print.Page.new(isPortrait, [this.headerFooter({skipFooter: skipFooter}), new (IdentityMapOfStringL$ObjectL()).from(["margin", JSArrayOfdoubleL().of([this.cm(2), this.cm(3.5), this.cm(2), this.cm(0)]), "text", status === "401" ? this.msgServerNotReachable : this.msgMissingData, "color", "red", "fontSize", this.fs(10.0), "alignment", "justify"])]);
    }
    countObjects(src) {
      let ret = 1;
      if (MapL().is(src)) {
        for (let key of src[$keys]) {
          ret = ret + dart.notNull(this.countObjects(src[$_get](key)));
        }
      } else if (ListL().is(src)) {
        for (let entry of src) {
          ret = ret + dart.notNull(this.countObjects(entry));
        }
      }
      return ret;
    }
    [_addPageBreak](page) {
      if (dart.equals(dart.dsend(page.content[$last], '_get', ["pageBreak"]), "-")) return;
      dart.dsend(page.content[$last], '_set', ["pageBreak", "after"]);
      let text = convert.json.encode(page.content);
      this[_fileSize] = dart.notNull(this[_fileSize]) + text.length;
      if (this.g.pdfCreationMaxSize !== 4000000 && dart.notNull(this[_fileSize]) > dart.notNull(this.g.pdfCreationMaxSize)) {
        dart.dsend(page.content[$last], '_set', ["pageBreak", "newFile"]);
        this[_fileSize] = 0;
      }
    }
    getFormPages(data, currentSize) {
      return async.async(ListLOfPageL(), (function* getFormPages() {
        this.repData = data;
        this.m0 = JSArrayOfdoubleL().of([this.cm(0), this.cm(0), this.cm(0), this.cm(0)]);
        for (let id of this.imgList) {
          try {
            this.images[$_set](id, yield this.getBase64Image(id));
          } catch (e) {
            let ex = dart.getThrown(e);
            this.images[$_set](id, yield this.getBase64Image("nightscout"));
          }
        }
        if (!dart.test(this.hasData(data))) {
          return JSArrayOfPageL().of([this.getEmptyForm(this.isPortrait, data.status.status)]);
        }
        let ret = JSArrayOfPageL().of([]);
        for (let param of this.params) {
          param.isForThumbs = data.isForThumbs;
        }
        this.extractParams();
        for (let param of this.params) {
          param.isForThumbs = false;
        }
        this[_pages][$clear]();
        this[_fileSize] = currentSize;
        try {
          this.scale = 1.0;
          let colCount = 1;
          let rowCount = 1;
          switch (this.pagesPerSheet) {
            case 2:
            {
              this.scale = 21 / 29.7;
              colCount = 1;
              rowCount = 2;
              break;
            }
            case 4:
            {
              this.scale = 0.5;
              colCount = 2;
              rowCount = 2;
              break;
            }
            case 8:
            {
              this.scale = 21 / 29.7 / 2;
              colCount = 2;
              rowCount = 4;
              break;
            }
            case 16:
            {
              this.scale = 0.25;
              colCount = 4;
              rowCount = 4;
              break;
            }
            case 32:
            {
              this.scale = 21 / 29.7 / 4;
              colCount = 4;
              rowCount = 8;
              break;
            }
          }
          this.offsetX = 0.0;
          this.offsetY = 0.0;
          yield this.fillPages(this[_pages]);
          let column = 0;
          let row = 0;
          for (let i = 0; i < dart.notNull(this[_pages][$length]); i = i + 1) {
            let page = this[_pages][$_get](i);
            switch (this.pagesPerSheet) {
              case 2:
              case 8:
              case 32:
              {
                page.isPortrait = !dart.test(page.isPortrait);
                break;
              }
            }
            this.offsetX = column * dart.notNull(this.width);
            this.offsetY = row * dart.notNull(this.height);
            page.offset(this.cmx(0), this.cmy(0));
            if (column === 0 && row === 0) {
              ret[$add](page);
            } else {
              ret[$last].content[$add](page.asElement);
            }
            column = column + 1;
            if (column >= colCount) {
              column = 0;
              row = row + 1;
              if (row >= rowCount && i < dart.notNull(this[_pages][$length]) - 1) {
                row = 0;
                this[_addPageBreak](page);
              }
            }
          }
        } catch (e$) {
          let ex = dart.getThrown(e$);
          let s = dart.stackTrace(e$);
          this.offsetX = 0.0;
          this.offsetY = 0.0;
          ret = JSArrayOfPageL().of([new base_print.Page.new(this.isPortrait, [new (IdentityMapOfStringL$ObjectL()).from(["margin", JSArrayOfdoubleL().of([this.cmx(1.0), this.cmy(0.5), this.cmx(1.0), this.cmy(0)]), "text", "Fehler bei Erstellung von \"" + dart.str(this.title) + "\"", "fontSize", this.fs(20.0), "alignment", "center", "color", "red"]), new (IdentityMapOfStringL$ObjectL()).from(["margin", JSArrayOfdoubleL().of([this.cmx(1.0), this.cmy(0.0), this.cmx(1.0), this.cmy(0)]), "text", "\n" + dart.str(ex), "fontSize", this.fs(10.0), "alignment", "left"]), new (IdentityMapOfStringL$ObjectL()).from(["margin", JSArrayOfdoubleL().of([this.cmx(1.0), this.cmy(0.5), this.cmx(1.0), this.cmy(0)]), "text", "\n" + dart.str(s), "fontSize", this.fs(10.0), "alignment", "left"])])]);
        }
        return ret;
      }).bind(this));
    }
    mm(pt) {
      return doubleL().as(dart.dsend(pt, '/', [0.35277]));
    }
    cm(pt) {
      return doubleL().as(dart.dtest(dart.dload(pt, 'isNaN')) ? 0.0 : dart.dsend(dart.dsend(pt, '/', [0.035277]), '*', [this.scale]));
    }
    cmx(pt) {
      return this.cm(dart.notNull(this.offsetX) + dart.notNull(core.num.as(pt)));
    }
    cmy(pt) {
      return this.cm(dart.notNull(this.offsetY) + dart.notNull(core.num.as(pt)));
    }
    fs(size) {
      return dart.notNull(size) * dart.notNull(this.scale);
    }
    fmtTime(date, opts) {
      let def = opts && 'def' in opts ? opts.def : null;
      let withUnit = opts && 'withUnit' in opts ? opts.withUnit : false;
      let withMinutes = opts && 'withMinutes' in opts ? opts.withMinutes : true;
      let withSeconds = opts && 'withSeconds' in opts ? opts.withSeconds : false;
      def == null ? def = "" : null;
      if (date == null) return def;
      if (dart.test(withSeconds)) withMinutes = true;
      if (DateTimeL().is(date)) {
        let hour = date.hour;
        if (!dart.test(this.g.language.is24HourFormat)) hour = dart.notNull(hour) > 12 ? dart.notNull(hour) - 12 : hour;
        let m = dart.test(withMinutes) ? ":" + (dart.notNull(date.minute) < 10 ? "0" : "") + dart.str(date.minute) : "";
        if (dart.test(withSeconds)) {
          m = m + ":" + (dart.notNull(date.second) < 10 ? "0" : "") + dart.str(date.second);
        }
        let ret = (dart.notNull(hour) < 10 ? "0" : "") + dart.str(hour) + m;
        if (dart.test(withUnit)) {
          if (dart.test(this.g.language.is24HourFormat)) {
            ret = base_print.BasePrint.msgTimeOfDay24(ret);
          } else {
            ret = dart.notNull(date.hour) > 12 ? base_print.BasePrint.msgTimeOfDayPM(ret) : base_print.BasePrint.msgTimeOfDayAM(ret);
          }
        }
        return ret;
      }
      if (intL().is(date)) {
        let m = dart.test(withMinutes) ? ":00" : "";
        if (dart.test(this.g.language.is24HourFormat)) return dart.str(this.g.fmtNumber(date, 0)) + m;
        m = dart.test(withMinutes) ? " " : "";
        if (dart.notNull(date) < 12) {
          return dart.str(this.g.fmtNumber(date, 0)) + m + "am";
        } else if (date === 12) {
          return dart.str(this.g.fmtNumber(date, 0)) + m + "pm";
        } else {
          return dart.str(this.g.fmtNumber(dart.notNull(date) - 12, 0)) + m + "pm";
        }
      }
      return StringL().as(date);
    }
    fmtDateTime(date, def = null, withSeconds = false) {
      def == null ? def = "" : null;
      if (date == null) return StringL().as(def);
      if (DateTimeL().is(date)) {
        let ret = (dart.notNull(date.day) < 10 ? "0" : "") + dart.str(date.day) + "." + (dart.notNull(date.month) < 10 ? "0" : "") + dart.str(date.month) + "." + dart.str(date.year) + ", " + (dart.notNull(date.hour) < 10 ? "0" : "") + dart.str(date.hour) + ":" + (dart.notNull(date.minute) < 10 ? "0" : "") + dart.str(date.minute);
        if (dart.test(withSeconds)) {
          ret = ret + ":" + (dart.notNull(date.second) < 10 ? "0" : "") + dart.str(date.second);
        }
        return base_print.BasePrint.msgTimeOfDay24(ret);
      }
      return StringL().as(date);
    }
    fmtDate(date, def = null, withShortWeekday = false, withLongWeekday = false) {
      let t27, t27$, t27$0;
      def == null ? def = "" : null;
      if (date == null) return StringL().as(def);
      let dt = null;
      try {
        if (DateL().is(date)) {
          dt = new core.DateTime.new(date.year, date.month, date.day);
        } else if (DateTimeL().is(date)) {
          dt = date;
        } else if (StringL().is(date) && date.length >= 8) {
          let y = (t27 = core.int.tryParse(date[$substring](6, 8)), t27 == null ? 0 : t27);
          let m = (t27$ = core.int.tryParse(date[$substring](4, 6)), t27$ == null ? 1 : t27$);
          let d = (t27$0 = core.int.tryParse(date[$substring](0, 4)), t27$0 == null ? 1 : t27$0);
          dt = new core.DateTime.new(y, m, d);
        }
      } catch (e) {
        let ex = dart.getThrown(e);
      }
      if (dt == null) return StringL().as(date);
      let df = new intl.DateFormat.new(this.g.language.dateformat);
      let ret = df.format(dt);
      if (dart.test(withShortWeekday)) ret = dart.str(datepicker_component.DatepickerPeriod.dowShortName(new date$.Date.new(dt.year, dt.month, dt.day))) + ", " + dart.str(ret);
      if (dart.test(withLongWeekday)) ret = dart.str(datepicker_component.DatepickerPeriod.dowName(new date$.Date.new(dt.year, dt.month, dt.day))) + ", " + dart.str(ret);
      return ret;
    }
    blendColor(from, to, factor) {
      let t28, t28$, t28$0, t28$1, t28$2, t28$3;
      if (from.length === 7) from = from[$substring](1);
      if (to.length === 7) to = to[$substring](1);
      let rf = core.int.tryParse(core.String.as((t28 = from[$substring](0, 2), t28 === null ? 0 : t28)), {radix: 16});
      let gf = core.int.tryParse(core.String.as((t28$ = from[$substring](2, 4), t28$ === null ? 0 : t28$)), {radix: 16});
      let bf = core.int.tryParse(core.String.as((t28$0 = from[$substring](4, 6), t28$0 === null ? 0 : t28$0)), {radix: 16});
      let rt = core.int.tryParse(core.String.as((t28$1 = to[$substring](0, 2), t28$1 === null ? 0 : t28$1)), {radix: 16});
      let gt = core.int.tryParse(core.String.as((t28$2 = to[$substring](2, 4), t28$2 === null ? 0 : t28$2)), {radix: 16});
      let bt = core.int.tryParse(core.String.as((t28$3 = to[$substring](4, 6), t28$3 === null ? 0 : t28$3)), {radix: 16});
      let r = (dart.notNull(rf) + (dart.notNull(rt) - dart.notNull(rf)) * dart.notNull(factor))[$floor]();
      let g = (dart.notNull(gf) + (dart.notNull(gt) - dart.notNull(gf)) * dart.notNull(factor))[$floor]();
      let b = (dart.notNull(bf) + (dart.notNull(bt) - dart.notNull(bf)) * dart.notNull(factor))[$floor]();
      return "#" + dart.str(this.radixString(r)) + dart.str(this.radixString(g)) + dart.str(this.radixString(b));
    }
    radixString(value) {
      let ret = value[$toRadixString](16);
      while (ret.length < 2)
        ret = "0" + ret;
      return ret;
    }
    fmtGluc(value) {
      return this.g.fmtNumber(value, dart.test(this.g.glucMGDL) ? 0 : 1);
    }
    styleForTime(time) {
      if (dart.notNull(time.hour) < 6 || dart.notNull(time.hour) > 20) return "timeNight";
      if (dart.notNull(time.hour) < 8 || dart.notNull(time.hour) > 17) return "timeLate";
      return "timeDay";
    }
    colForGluc(day, gluc) {
      if (gluc == null) return "";
      if (dart.notNull(gluc) < dart.notNull(core.num.as(dart.dsend(this.targets(this.repData), '_get', ["low"]))))
        return this.colLow;
      else if (dart.notNull(gluc) > dart.notNull(core.num.as(dart.dsend(this.targets(this.repData), '_get', ["high"])))) return this.colHigh;
      return this.colNorm;
    }
    carbFromData(carb, precision = 0) {
      return this.g.fmtNumber(numL().as(carb), numL().as(precision));
    }
    drawGraphicGrid(glucMax, graphHeight, graphWidth, vertCvs, horzCvs, horzStack, vertStack, opts) {
      let glucScale = opts && 'glucScale' in opts ? opts.glucScale : 0;
      let graphBottom = opts && 'graphBottom' in opts ? opts.graphBottom : 0;
      let horzfs = opts && 'horzfs' in opts ? opts.horzfs : null;
      let vertfs = opts && 'vertfs' in opts ? opts.vertfs : null;
      if (horzfs == null) horzfs = this.fs(8.0);
      if (vertfs == null) vertfs = this.fs(8.0);
      let ret = new base_print.GridData.new();
      if (graphBottom === 0.0) graphBottom = graphHeight;
      ret.glucScale = glucScale === 0.0 ? dart.test(this.g.glucMGDL) ? 50.0 : 18.02 * 1 : glucScale;
      ret.gridLines = (dart.notNull(glucMax) / dart.notNull(ret.glucScale))[$ceil]();
      ret.lineHeight = ret.gridLines === 0 ? 0.0 : dart.notNull(graphHeight) / dart.notNull(ret.gridLines);
      ret.colWidth = dart.notNull(graphWidth) / 24;
      for (let i = 0; i < 25; i = i + 1) {
        vertCvs[$add](new (IdentityMapOfStringL$ObjectL()).from(["type", "line", "x1", this.cm(i * dart.notNull(ret.colWidth)), "y1", this.cm(0), "x2", this.cm(i * dart.notNull(ret.colWidth)), "y2", this.cm(dart.notNull(graphBottom) - dart.notNull(this.lw) / 2), "lineWidth", this.cm(this.lw), "lineColor", i > 0 && i < 24 ? this.lc : this.lcFrame]));
        if (i < 24) horzStack[$add](new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(dart.notNull(this.xorg) + i * dart.notNull(ret.colWidth)), "y", this.cm(dart.notNull(this.yorg) + dart.notNull(graphBottom) + 0.05)]), "text", this.fmtTime(i), "fontSize", horzfs]));
      }
      if (ret.lineHeight === 0) return ret;
      let lastY = null;
      for (let i = 0; i <= dart.notNull(ret.gridLines); i = i + 1) {
        let y = (dart.notNull(ret.gridLines) - i) * dart.notNull(ret.lineHeight) - dart.notNull(this.lw) / 2;
        if (lastY != null && dart.notNull(lastY) - y < 0.5) continue;
        lastY = y;
        horzCvs[$add](new (IdentityMapOfStringL$ObjectL()).from(["type", "line", "x1", this.cm(i > 0 ? -0.2 : 0.0), "y1", this.cm(y), "x2", this.cm(24 * dart.notNull(ret.colWidth) + (i > 0 ? 0.2 : 0.0)), "y2", this.cm(y), "lineWidth", this.cm(this.lw), "lineColor", i > 0 ? this.lc : this.lcFrame]));
        if (i > 0) {
          let text = dart.str(this.g.glucFromData(this.g.fmtNumber(i * dart.notNull(ret.glucScale), 0)));
          vertStack[$add](new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(dart.notNull(this.xorg) - 1.5), "y", this.cm(dart.notNull(this.yorg) + (dart.notNull(ret.gridLines) - i) * dart.notNull(ret.lineHeight) - 0.2)]), "columns", JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$ObjectL()).from(["width", this.cm(1.2), "text", text, "fontSize", this.fs(8.0), "alignment", "right"])])]));
          vertStack[$add](new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(dart.notNull(this.xorg) + 24 * dart.notNull(ret.colWidth) + 0.3), "y", this.cm(dart.notNull(this.yorg) + (dart.notNull(ret.gridLines) - i) * dart.notNull(ret.lineHeight) - 0.2)]), "text", text, "fontSize", vertfs]));
        } else {
          let text = dart.str(dart.dsend(this.g.getGlucInfo(), '_get', ["unit"]));
          vertStack[$add](new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(dart.notNull(this.xorg) - 1.5), "y", this.cm(dart.notNull(this.yorg) + (dart.notNull(ret.gridLines) - i) * dart.notNull(ret.lineHeight) - 0.2)]), "columns", JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$ObjectL()).from(["width", this.cm(1.2), "text", text, "fontSize", vertfs, "alignment", "right"])])]));
          vertStack[$add](new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(dart.notNull(this.xorg) + 24 * dart.notNull(ret.colWidth) + 0.3), "y", this.cm(dart.notNull(this.yorg) + (dart.notNull(ret.gridLines) - i) * dart.notNull(ret.lineHeight) - 0.2)]), "text", text, "fontSize", vertfs]));
        }
      }
      return ret;
    }
    getCGPPage(dayList) {
      let cgpPage = new print_cgp.PrintCGP.new();
      cgpPage.repData = this.repData;
      cgpPage.scale = this.scale;
      this.title = cgpPage.title;
      this.subtitle = cgpPage.subtitle;
      let cgpSrc = cgpPage.calcCGP(dayList, 1.0, 0.0, 0.3);
      let cgp = PentagonDataL().as(dart.dsend(cgpSrc, '_get', ["cgp"]));
      this.footerTextAboveLine = cgpPage.footerTextAboveLine;
      this.footerTextAboveLine[$_set]("y", 0.9);
      let x = dart.notNull(this.xorg) + 2 * dart.notNull(cgp.axisLength) / dart.notNull(cgp.scale) + 1.2;
      let y = dart.notNull(this.yorg) + 2.0;
      let ret = [this.headerFooter(), new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", dart.notNull(this.cm(this.xorg)) + dart.notNull(this.cm(dart.notNull(cgp.axisLength) / dart.notNull(cgp.scale))), "y", this.cm(y)]), "canvas", cgp.outputCvs]), new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", dart.notNull(this.cm(this.xorg)) + dart.notNull(this.cm(dart.notNull(cgp.axisLength) / dart.notNull(cgp.scale))), "y", this.cm(y)]), "stack", cgp.outputText]), cgpPage.infoTable(cgpSrc, StringL().as(dart.dsend(cgp.glucInfo, '_get', ["unit"])), x, y, 2.5, dart.notNull(this.width) - x - dart.notNull(this.xorg) - 2.5)];
      return new base_print.Page.new(this.isPortrait, ret);
    }
    addLegendEntry(legend, color, text, opts) {
      let isArea = opts && 'isArea' in opts ? opts.isArea : true;
      let image = opts && 'image' in opts ? opts.image : null;
      let imgWidth = opts && 'imgWidth' in opts ? opts.imgWidth : 0.6;
      let imgOffsetY = opts && 'imgOffsetY' in opts ? opts.imgOffsetY : 0;
      let lineWidth = opts && 'lineWidth' in opts ? opts.lineWidth : 0;
      let graphText = opts && 'graphText' in opts ? opts.graphText : null;
      let newColumn = opts && 'newColumn' in opts ? opts.newColumn : false;
      let points = opts && 'points' in opts ? opts.points : null;
      let colGraphText = opts && 'colGraphText' in opts ? opts.colGraphText : null;
      let colLegendText = opts && 'colLegendText' in opts ? opts.colLegendText : null;
      let dst = legend.current(boolL().as(newColumn));
      if (lineWidth === 0.0) lineWidth = this.lw;
      if (colGraphText == null) dart.equals(colGraphText, "black");
      if (colLegendText == null) colLegendText = "black";
      if (points != null) {
        for (let pt of IterableL().as(points)) {
          dart.dsend(pt, '_set', ["x", this.cm(dart.dsend(dart.dsend(pt, '_get', ["x"]), '*', [0.8]))]);
          dart.dsend(pt, '_set', ["y", this.cm(dart.dsend(dart.dsend(pt, '_get', ["y"]), '*', [0.8]))]);
        }
        dst[$add](new (IdentityMapOfStringL$ListLOfMapLOfStringL$dynamic()).from(["columns", JSArrayOfMapLOfStringL$dynamic().of([new (IdentityMapOfStringL$ObjectL()).from(["width", this.cm(0.8), "canvas", JSArrayOfMapLOfStringL$dynamic().of([new (IdentityMapOfStringL$dynamic()).from(["type", "polyline", "closePath", true, "color", color, "lineWidth", this.cm(0), "points", points])])]), new (IdentityMapOfStringL$dynamic()).from(["text", text, "color", colLegendText, "fontSize", this.fs(10.0)])])]));
      } else if (image != null) {
        dst[$add](new (IdentityMapOfStringL$ListLOfMapLOfStringL$dynamic()).from(["columns", JSArrayOfMapLOfStringL$dynamic().of([new (IdentityMapOfStringL$ObjectL()).from(["width", this.cm(0.8), "stack", JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$ObjectL()).from(["margin", JSArrayOfdoubleL().of([this.cm(0.4 - dart.notNull(imgWidth) / 2), this.cm(imgOffsetY), this.cm(0), this.cm(0)]), "image", image, "width", this.cm(imgWidth)])])]), new (IdentityMapOfStringL$dynamic()).from(["text", text, "color", colLegendText, "fontSize", this.fs(10.0)])])]));
      } else if (dart.test(isArea) && graphText != null) {
        dst[$add](new (IdentityMapOfStringL$ListLOfMapLOfStringL$dynamic()).from(["columns", JSArrayOfMapLOfStringL$dynamic().of([new (IdentityMapOfStringL$ObjectL()).from(["width", this.cm(0.8), "layout", "noBorders", "margin", JSArrayOfdoubleL().of([this.cm(0.0), this.cm(0), this.cm(0), this.cm(0.1)]), "table", new (IdentityMapOfStringL$ListLOfObjectL()).from(["widths", JSArrayOfdoubleL().of([this.cm(0.6)]), "body", JSArrayOfListLOfMapLOfStringL$dynamic().of([JSArrayOfMapLOfStringL$dynamic().of([new (IdentityMapOfStringL$dynamic()).from(["text", graphText, "color", colGraphText, "fontSize", this.fs(6.0), "alignment", "center", "fillColor", color])])])])]), new (IdentityMapOfStringL$dynamic()).from(["text", text, "color", colLegendText, "fontSize", this.fs(10.0)])])]));
      } else if (dart.test(isArea)) {
        dst[$add](new (IdentityMapOfStringL$ListLOfMapLOfStringL$dynamic()).from(["columns", JSArrayOfMapLOfStringL$dynamic().of([new (IdentityMapOfStringL$ObjectL()).from(["width", this.cm(0.8), "canvas", JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$ObjectL()).from(["type", "rect", "x", this.cm(0), "y", this.cm(0.1), "w", this.cm(0.5), "h", this.cm(0.3), "color", color, "fillOpacity", 0.3]), new (IdentityMapOfStringL$dynamic()).from(["type", "rect", "x", 0, "y", 0, "w", 0, "h", 0, "color", colGraphText, "fillOpacity", 1]), new (IdentityMapOfStringL$ObjectL()).from(["type", "line", "x1", this.cm(0), "y1", this.cm(0.1), "x2", this.cm(0.5), "y2", this.cm(0.1), "lineWidth", this.cm(lineWidth), "lineColor", color]), new (IdentityMapOfStringL$ObjectL()).from(["type", "line", "x1", this.cm(0), "y1", this.cm(0.4), "x2", this.cm(0.5), "y2", this.cm(0.4), "lineWidth", this.cm(lineWidth), "lineColor", color])])]), new (IdentityMapOfStringL$dynamic()).from(["text", text, "color", colLegendText, "fontSize", this.fs(10.0)])])]));
      } else {
        dst[$add](new (IdentityMapOfStringL$ListLOfMapLOfStringL$dynamic()).from(["columns", JSArrayOfMapLOfStringL$dynamic().of([new (IdentityMapOfStringL$ObjectL()).from(["width", this.cm(0.8), "canvas", JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$ObjectL()).from(["type", "line", "x1", this.cm(0), "y1", this.cm(0.25), "x2", this.cm(0.5), "y2", this.cm(0.25), "lineWidth", this.cm(lineWidth), "lineColor", color])])]), new (IdentityMapOfStringL$dynamic()).from(["text", text, "color", colLegendText, "fontSize", this.fs(10.0)])])]));
      }
    }
    calcX(width, time) {
      return dart.notNull(width) / 1440 * (dart.notNull(time.hour) * 60 + dart.notNull(time.minute));
    }
    calcY(height, max, value) {
      return dart.notNull(height) / dart.notNull(max) * (dart.notNull(max) - dart.notNull(value));
    }
    S(min, step) {
      return new base_print.StepData.new(min, step);
    }
    drawScaleIE(xo, yo, graphHeight, top, min, max, colWidth, horzCvs, vertStack, steps, display) {
      let step = 0.1;
      for (let entry of steps) {
        if (dart.notNull(max) - dart.notNull(min) > dart.notNull(entry.min)) {
          step = entry.step;
          break;
        }
      }
      let gridLines = ((dart.notNull(max) - dart.notNull(min)) / dart.notNull(step) + 1)[$floor]();
      let lineHeight = gridLines === 0 ? 0.0 : dart.notNull(graphHeight) / gridLines;
      for (let i = 1; i < gridLines; i = i + 1) {
        let y = dart.notNull(top) + (gridLines - i) * lineHeight;
        dart.dsend(horzCvs, 'add', [new (IdentityMapOfStringL$ObjectL()).from(["type", "line", "x1", this.cm(-0.2), "y1", dart.notNull(this.cm(y)) - dart.notNull(this.lw) / 2, "x2", this.cm(24 * dart.notNull(colWidth) + 0.2), "y2", dart.notNull(this.cm(y)) - dart.notNull(this.lw) / 2, "lineWidth", this.cm(this.lw), "lineColor", i > 0 ? this.lc : this.lcFrame])]);
        let text = StringL().as(dart.dcall(display, [i, step]));
        dart.dsend(vertStack, 'add', [new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(dart.notNull(xo) - 3.0), "y", this.cm(y + dart.notNull(yo) - 0.15)]), "columns", JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$ObjectL()).from(["width", this.cm(2.7), "text", text, "fontSize", this.fs(8.0), "alignment", "right"])])])]);
        dart.dsend(vertStack, 'add', [new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(dart.notNull(xo) + dart.notNull(colWidth) * 24 + 0.3), "y", this.cm(y + dart.notNull(yo) - 0.15)]), "text", text, "fontSize", this.fs(8.0)])]);
      }
      return (gridLines - 1) * lineHeight;
    }
    getIobCob(xo, yo, graphWidth, graphHeight, horzCvs, vertStack, day, upperIob = 0, upperCob = 0) {
      let colWidth = dart.notNull(graphWidth) / 24;
      let ptsIob = JSArrayOfMapLOfStringL$doubleL().of([new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(this.calcX(graphWidth, new core.DateTime.new(0, 1, 1, 0, 0))), "y", this.cm(0)])]);
      let ptsCob = JSArrayOfMapLOfStringL$doubleL().of([new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(this.calcX(graphWidth, new core.DateTime.new(0, 1, 1, 0, 0))), "y", this.cm(0)])]);
      let time = new core.DateTime.new(day.date.year, day.date.month, day.date.day);
      let diff = 5;
      let maxIob = -1000.0;
      let minIob = 0.0;
      let maxCob = -1000.0;
      let lastX = 0.0;
      let i = 0;
      let currentDay = day.date.day;
      let maxTime = 1440;
      if (day.date.year == date$.Date.today().year && day.date.month == date$.Date.today().month && day.date.day == date$.Date.today().day) {
        maxTime = dart.notNull(new core.DateTime.now().hour) * 60 + dart.notNull(new core.DateTime.now().minute);
      }
      while (i < maxTime) {
        if (currentDay != time.day) {
          i = i + diff;
          continue;
        }
        if (i + diff >= maxTime && i !== maxTime - 1) diff = maxTime - 1 - i;
        if (i < maxTime) {
          let x = this.calcX(graphWidth, time);
          let y = dart.notNull(day.iob(this.repData, time, DayDataL().as(day.prevDay)).iob) - 1.0;
          maxIob = math.max(doubleL(), maxIob, y);
          minIob = math.min(doubleL(), minIob, y);
          dart.dsend(ptsIob, 'add', [new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(x), "y", y])]);
          y = day.cob(this.repData, time, DayDataL().as(day.prevDay)).cob;
          maxCob = math.max(doubleL(), maxCob, y);
          dart.dsend(ptsCob, 'add', [new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(x), "y", y])]);
          lastX = x;
          time = time.add(new core.Duration.new({minutes: diff}));
        }
        i = i + diff;
      }
      if (upperIob === 0) {
        minIob = minIob * 1.1;
        maxIob = dart.notNull(maxIob) * 1.1;
      } else {
        maxIob = upperIob;
      }
      let iobHeight = doubleL().as(this.drawScaleIE(xo, yo, graphHeight, 3 * dart.notNull(graphHeight), minIob, maxIob, colWidth, horzCvs, vertStack, JSArrayOfStepDataL().of([StepDataL().as(this.S(10.0, 2.0)), StepDataL().as(this.S(7.0, 1.0)), StepDataL().as(this.S(3.0, 0.5)), StepDataL().as(this.S(1.5, 0.2)), StepDataL().as(this.S(0.0, 0.1))]), dart.fn((i, step, opts) => {
        let t28;
        let value = opts && 'value' in opts ? opts.value : null;
        return dart.str(this.g.fmtNumber(numL().as((t28 = value, t28 == null ? minIob + dart.notNull(core.num.as(dart.dsend(i, '*', [step]))) : t28)), 1)) + " " + dart.str(this.msgInsulinUnit);
      }, dynamicAnddynamic__ToStringL())));
      for (let i = 0; i < dart.notNull(core.num.as(dart.dload(ptsIob, 'length'))); i = i + 1) {
        if (dart.notNull(maxIob) - minIob > 0) {
          let y = doubleL().as(dart.dsend(dart.dsend(ptsIob, '_get', [i]), '_get', ["y"]));
          if (dart.notNull(upperIob) > 0) {
            dart.dsend(dart.dsend(ptsIob, '_get', [i]), '_set', ["y", this.cm(dart.notNull(iobHeight) / dart.notNull(maxIob) * (dart.notNull(y) + minIob))]);
          } else {
            dart.dsend(dart.dsend(ptsIob, '_get', [i]), '_set', ["y", this.cm(dart.notNull(iobHeight) / (dart.notNull(maxIob) - minIob) * (dart.notNull(maxIob) - dart.notNull(y)))]);
          }
        } else {
          dart.dsend(dart.dsend(ptsIob, '_get', [i]), '_set', ["y", this.cm(iobHeight)]);
        }
      }
      let cobHeight = doubleL().as(this.drawScaleIE(xo, yo, graphHeight, 4 * dart.notNull(graphHeight), 0.0, maxCob, colWidth, horzCvs, vertStack, JSArrayOfStepDataL().of([StepDataL().as(this.S(100.0, 20.0)), StepDataL().as(this.S(50.0, 10.0)), StepDataL().as(this.S(20.0, 5.0)), StepDataL().as(this.S(0.0, 1.0))]), dart.fn((i, step, opts) => {
        let t28;
        let value = opts && 'value' in opts ? opts.value : null;
        return dart.str(this.g.fmtNumber(numL().as((t28 = value, t28 == null ? dart.dsend(i, '*', [step]) : t28)), 0)) + " g";
      }, dynamicAnddynamic__ToStringL())));
      if (upperCob === 0) {
        maxCob = dart.notNull(maxCob) * 1.1;
      } else {
        maxCob = upperCob;
      }
      for (let i = 0; i < dart.notNull(core.num.as(dart.dload(ptsCob, 'length'))); i = i + 1) {
        if (dart.notNull(maxCob) > 0) {
          dart.dsend(dart.dsend(ptsCob, '_get', [i]), '_set', ["y", this.cm(dart.notNull(cobHeight) / dart.notNull(maxCob) * (dart.notNull(maxCob) - dart.notNull(core.num.as(dart.dsend(dart.dsend(ptsCob, '_get', [i]), '_get', ["y"])))))]);
        } else {
          dart.dsend(dart.dsend(ptsCob, '_get', [i]), '_set', ["y", this.cm(cobHeight)]);
        }
      }
      if (lastX != null) {
        let y = 0.0;
        if (dart.notNull(upperIob) > 0) {
          dart.dsend(ptsIob, 'add', [new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(lastX), "y", this.cm(dart.notNull(iobHeight) / dart.notNull(maxIob) * (y + minIob))])]);
        } else if (dart.notNull(maxIob) - minIob > 0) {
          dart.dsend(ptsIob, 'add', [new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(lastX), "y", this.cm(dart.notNull(iobHeight) / (dart.notNull(maxIob) - minIob) * (dart.notNull(maxIob) - y))])]);
        } else {
          dart.dsend(ptsIob, 'add', [new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(lastX), "y", this.cm(iobHeight)])]);
        }
        dart.dsend(ptsCob, 'add', [new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(lastX), "y", this.cm(cobHeight)])]);
      }
      return new (IdentityMapOfStringL$dynamic()).from(["iob", ptsIob, "cob", ptsCob, "iobHeight", iobHeight, "cobHeight", cobHeight, "iobTop", dart.notNull(iobHeight) / dart.notNull(maxIob) * minIob]);
    }
    checkValue(param, value) {
    }
  };
  (base_print.BasePrint.new = function() {
    this[g$2] = globals.Globals.new();
    this[id$1] = null;
    this[idx] = null;
    this[title$1] = null;
    this[subtitle] = null;
    this[needed] = new base_print.DataNeeded.new();
    this[help] = null;
    this[titleInfo] = null;
    this[titleInfoSub] = "";
    this[footerTextAboveLine] = new (IdentityMapOfStringL$ObjectL()).from(["x", 0, "y", 0, "fs", 12, "text", ""]);
    this[pagesPerSheet] = 1;
    this[params] = JSArrayOfParamInfoL().of([]);
    this[colText] = "#008800";
    this[colInfo] = "#606060";
    this[colSubTitle] = "#a0a0a0";
    this[colLine] = "#606060";
    this[colValue] = "#000000";
    this[colBasalProfile] = "#0097a7";
    this[colBasalFont] = "#fff";
    this[colProfileSwitch] = "#8080c0";
    this[colBolus] = "#0060c0";
    this[colBolusExt] = "#60c0ff";
    this[colCarbBolus] = "#c000c0";
    this[colLow] = "#ff6666";
    this[colNormLow] = "#809933";
    this[colNorm] = "#00cc00";
    this[colNormHigh] = "#aacc00";
    this[colHigh] = "#cccc00";
    this[colTargetArea] = "#00a000";
    this[colTargetValue] = "#3333aa";
    this[colCarbs] = "#ffa050";
    this[colCarbsText] = "#ff6f00";
    this[colDurationNotes] = "#ff00ff";
    this[colDurationNotesLine] = "#ff50ff";
    this[colNotes] = "#000000";
    this[colNotesLine] = "#666666";
    this[colGlucValues] = "#000000";
    this[colBloodValues] = "#ff0000";
    this[colHbA1c] = "#505050";
    this[colWeekDays] = JSArrayOfStringL().of(["#1b9e77", "#d95f02", "#7570b3", "#e7298a", "#66a61e", "#e6ab02", "#a6761d"]);
    this[colWeekDaysText] = JSArrayOfStringL().of(["#ffffff", "#ffffff", "#000000", "#ffffff", "#ffffff", "#000000", "#ffffff"]);
    this[colExercises] = "#c0c0c0";
    this[colExerciseText] = "#000000";
    this[colCGPLine] = "#a0a0a0";
    this[colCGPHealthyLine] = "#008000";
    this[colCGPHealthyFill] = "#00e000";
    this[colCGPPatientLine] = "#808000";
    this[colCGPPatientFill] = "#e0e000";
    this[colIOBFill] = "#a0a0ff";
    this[colIOBLine] = "#a0a0ff";
    this[colCOBFill] = "#ffa050";
    this[colCOBLine] = "#ffa050";
    this[colTrendCrit] = "#f59595";
    this[colTrendWarn] = "#f2f595";
    this[colTrendNorm] = "#98f595";
    this[colCOBDaily] = "#ffe090";
    this[colIOBDaily] = "#d0d0ff";
    this[xorg] = 3.35;
    this[yorg] = 3.9;
    this[xframe] = 2.2;
    this[lw] = 0.03;
    this[lc] = "#c0c0c0";
    this[lcFrame] = "#000000";
    this[isPortraitParam] = true;
    this[_pages] = JSArrayOfPageL().of([]);
    this[_fileSize] = 0;
    this[tableHeadFilled] = false;
    this[tableHeadLine] = [];
    this[tableWidths] = [];
    this[m0] = [];
    this[images] = new (IdentityMapOfStringL$StringL()).new();
    this[repData] = null;
    this[scale$] = 1.0;
    this[offsetX] = 0.0;
    this[offsetY] = 0.0;
    ;
  }).prototype = base_print.BasePrint.prototype;
  dart.addTypeTests(base_print.BasePrint);
  dart.addTypeCaches(base_print.BasePrint);
  dart.setMethodSignature(base_print.BasePrint, () => ({
    __proto__: dart.getMethods(base_print.BasePrint.__proto__),
    hba1c: dart.fnType(dart.legacy(core.String), [dart.legacy(core.double)]),
    hba1cValue: dart.fnType(dart.legacy(core.double), [dart.legacy(core.double)]),
    pageCountDisplay: dart.fnType(dart.legacy(core.String), [dart.dynamic]),
    [_msgPageCountEst]: dart.fnType(dart.legacy(core.String), [dart.dynamic]),
    [_msgPageCount]: dart.fnType(dart.legacy(core.String), [dart.dynamic]),
    msgPageCount: dart.fnType(dart.dynamic, [dart.dynamic, dart.dynamic]),
    msgValidRange: dart.fnType(dart.legacy(core.String), [dart.dynamic, dart.dynamic]),
    msgValidFrom: dart.fnType(dart.legacy(core.String), [dart.dynamic]),
    msgValidTo: dart.fnType(dart.legacy(core.String), [dart.dynamic]),
    msgDuration: dart.fnType(dart.legacy(core.String), [dart.legacy(core.int), dart.legacy(core.int)]),
    msgTargetArea: dart.fnType(dart.legacy(core.String), [dart.legacy(core.String), dart.legacy(core.String), dart.legacy(core.String)]),
    msgTargetValue: dart.fnType(dart.legacy(core.String), [dart.legacy(core.String)]),
    msgCarbs: dart.fnType(dart.legacy(core.String), [dart.legacy(core.String)]),
    msgBolusInsulin: dart.fnType(dart.legacy(core.String), [dart.legacy(core.String)]),
    msgCorrectBolusInsulin: dart.fnType(dart.legacy(core.String), [dart.legacy(core.String)]),
    msgCarbBolusInsulin: dart.fnType(dart.legacy(core.String), [dart.legacy(core.String)]),
    msgSMBInsulin: dart.fnType(dart.legacy(core.String), [dart.legacy(core.String)]),
    msgBasalrateDay: dart.fnType(dart.legacy(core.String), [dart.legacy(core.String)]),
    msgBasalrateProfile: dart.fnType(dart.legacy(core.String), [dart.legacy(core.String)]),
    msgLegendTDD: dart.fnType(dart.legacy(core.String), [dart.legacy(core.String)]),
    msgKH: dart.fnType(dart.legacy(core.String), [dart.dynamic]),
    msgReadingsPerDay: dart.fnType(dart.legacy(core.String), [dart.dynamic, dart.dynamic]),
    msgReadingsPerHour: dart.fnType(dart.legacy(core.String), [dart.dynamic, dart.dynamic]),
    msgReadingsInMinutes: dart.fnType(dart.legacy(core.String), [dart.dynamic, dart.dynamic]),
    msgValuesIn: dart.fnType(dart.legacy(core.String), [dart.dynamic, dart.dynamic]),
    msgValuesBelow: dart.fnType(dart.legacy(core.String), [dart.dynamic]),
    msgValuesAbove: dart.fnType(dart.legacy(core.String), [dart.dynamic]),
    msgValuesVeryHigh: dart.fnType(dart.legacy(core.String), [dart.dynamic]),
    msgValuesNormHigh: dart.fnType(dart.legacy(core.String), [dart.dynamic]),
    msgValuesNorm: dart.fnType(dart.legacy(core.String), [dart.dynamic, dart.dynamic]),
    msgValuesNormLow: dart.fnType(dart.legacy(core.String), [dart.dynamic]),
    msgValuesVeryLow: dart.fnType(dart.legacy(core.String), [dart.dynamic]),
    msgKHBE: dart.fnType(dart.legacy(core.String), [dart.dynamic]),
    msgReservoirDays: dart.fnType(dart.legacy(core.String), [dart.dynamic, dart.dynamic]),
    msgCatheterDays: dart.fnType(dart.legacy(core.String), [dart.dynamic, dart.dynamic]),
    msgSensorDays: dart.fnType(dart.legacy(core.String), [dart.dynamic, dart.dynamic]),
    msgLow: dart.fnType(dart.legacy(core.String), [dart.dynamic]),
    msgCount: dart.fnType(dart.legacy(core.String), [dart.legacy(core.int)]),
    msgStdAbw: dart.fnType(dart.legacy(core.String), [dart.dynamic]),
    msgHigh: dart.fnType(dart.legacy(core.String), [dart.dynamic]),
    msgISF: dart.fnType(dart.legacy(core.String), [dart.legacy(core.String)]),
    msgTarget: dart.fnType(dart.legacy(core.String), [dart.legacy(core.String)]),
    msgFactorEntry: dart.fnType(dart.legacy(core.String), [dart.legacy(core.String), dart.legacy(core.String)]),
    msgDaySum: dart.fnType(dart.legacy(core.String), [dart.legacy(core.int)]),
    targets: dart.fnType(dart.dynamic, [dart.legacy(json_data.ReportData)]),
    msgGVINone: dart.fnType(dart.legacy(core.String), [dart.dynamic]),
    msgGVIVeryGood: dart.fnType(dart.legacy(core.String), [dart.dynamic, dart.dynamic]),
    msgGVIGood: dart.fnType(dart.legacy(core.String), [dart.dynamic, dart.dynamic]),
    msgGVIBad: dart.fnType(dart.legacy(core.String), [dart.dynamic]),
    gviQuality: dart.fnType(dart.legacy(core.String), [dart.dynamic]),
    msgPGSVeryGood: dart.fnType(dart.legacy(core.String), [dart.dynamic]),
    msgPGSGood: dart.fnType(dart.legacy(core.String), [dart.dynamic, dart.dynamic]),
    msgPGSBad: dart.fnType(dart.legacy(core.String), [dart.dynamic, dart.dynamic]),
    msgPGSVeryBad: dart.fnType(dart.legacy(core.String), [dart.dynamic]),
    pgsQuality: dart.fnType(dart.legacy(core.String), [dart.dynamic]),
    msgHistorical: dart.fnType(dart.legacy(core.String), [dart.dynamic]),
    titleInfoForDates: dart.fnType(dart.legacy(core.String), [dart.legacy(core.DateTime), dart.legacy(core.DateTime)]),
    headerFooter: dart.fnType(dart.legacy(core.Object), [], {date: dart.dynamic, skipFooter: dart.dynamic}, {}),
    addTableRow: dart.fnType(dart.void, [dart.legacy(core.bool), dart.dynamic, dart.dynamic, dart.dynamic, dart.dynamic]),
    getTable: dart.fnType(dart.dynamic, [dart.dynamic, dart.dynamic]),
    init: dart.fnType(dart.void, []),
    getBase64Image: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.String))), [dart.legacy(core.String)]),
    titleInfoBegEnd: dart.fnType(dart.legacy(core.String), []),
    titleInfoDateRange: dart.fnType(dart.legacy(core.String), [dart.legacy(date$.Date), dart.legacy(date$.Date)], {withTime: dart.dynamic}, {}),
    titleInfoTimeRange: dart.fnType(dart.legacy(core.String), [dart.legacy(core.DateTime), dart.legacy(core.DateTime)]),
    extractParams: dart.fnType(dart.void, []),
    [_getFooterImage]: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), [dart.legacy(core.String)], {height: dart.legacy(core.double), width: dart.legacy(core.double), x: dart.legacy(core.double), y: dart.legacy(core.double)}, {}),
    hasData: dart.fnType(dart.legacy(core.bool), [dart.legacy(json_data.ReportData)]),
    getEmptyForm: dart.fnType(dart.legacy(base_print.Page), [dart.legacy(core.bool), dart.legacy(core.String)], {skipFooter: dart.dynamic}, {}),
    countObjects: dart.fnType(dart.legacy(core.int), [dart.dynamic]),
    [_addPageBreak]: dart.fnType(dart.void, [dart.legacy(base_print.Page)]),
    getFormPages: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.List$(dart.legacy(base_print.Page))))), [dart.legacy(json_data.ReportData), dart.legacy(core.int)]),
    mm: dart.fnType(dart.legacy(core.double), [dart.dynamic]),
    cm: dart.fnType(dart.legacy(core.double), [dart.dynamic]),
    cmx: dart.fnType(dart.legacy(core.double), [dart.dynamic]),
    cmy: dart.fnType(dart.legacy(core.double), [dart.dynamic]),
    fs: dart.fnType(dart.legacy(core.double), [dart.legacy(core.double)]),
    fmtTime: dart.fnType(dart.legacy(core.String), [dart.dynamic], {def: dart.legacy(core.String), withMinutes: dart.legacy(core.bool), withSeconds: dart.legacy(core.bool), withUnit: dart.legacy(core.bool)}, {}),
    fmtDateTime: dart.fnType(dart.legacy(core.String), [dart.dynamic], [dart.dynamic, dart.legacy(core.bool)]),
    fmtDate: dart.fnType(dart.legacy(core.String), [dart.dynamic], [dart.dynamic, dart.legacy(core.bool), dart.legacy(core.bool)]),
    blendColor: dart.fnType(dart.legacy(core.String), [dart.legacy(core.String), dart.legacy(core.String), dart.legacy(core.num)]),
    radixString: dart.fnType(dart.legacy(core.String), [dart.legacy(core.int)]),
    fmtGluc: dart.fnType(dart.legacy(core.String), [dart.legacy(core.double)]),
    styleForTime: dart.fnType(dart.legacy(core.String), [dart.legacy(core.DateTime)]),
    colForGluc: dart.fnType(dart.legacy(core.String), [dart.legacy(json_data.DayData), dart.legacy(core.double)]),
    carbFromData: dart.fnType(dart.legacy(core.String), [dart.dynamic], [dart.dynamic]),
    drawGraphicGrid: dart.fnType(dart.legacy(base_print.GridData), [dart.legacy(core.double), dart.legacy(core.double), dart.legacy(core.double), dart.legacy(core.List), dart.legacy(core.List), dart.legacy(core.List), dart.legacy(core.List)], {glucScale: dart.legacy(core.double), graphBottom: dart.legacy(core.double), horzfs: dart.legacy(core.double), vertfs: dart.legacy(core.double)}, {}),
    getCGPPage: dart.fnType(dart.legacy(base_print.Page), [dart.dynamic]),
    addLegendEntry: dart.fnType(dart.dynamic, [dart.legacy(base_print.LegendData), dart.legacy(core.String), dart.legacy(core.String)], {colGraphText: dart.dynamic, colLegendText: dart.dynamic, graphText: dart.legacy(core.String), image: dart.legacy(core.String), imgOffsetY: dart.legacy(core.double), imgWidth: dart.legacy(core.double), isArea: dart.legacy(core.bool), lineWidth: dart.legacy(core.double), newColumn: dart.dynamic, points: dart.dynamic}, {}),
    calcX: dart.fnType(dart.legacy(core.double), [dart.legacy(core.double), dart.legacy(core.DateTime)]),
    calcY: dart.fnType(dart.legacy(core.double), [dart.legacy(core.double), dart.legacy(core.double), dart.legacy(core.double)]),
    S: dart.fnType(dart.dynamic, [dart.legacy(core.double), dart.legacy(core.double)]),
    drawScaleIE: dart.fnType(dart.dynamic, [dart.legacy(core.double), dart.legacy(core.double), dart.legacy(core.double), dart.legacy(core.double), dart.legacy(core.double), dart.legacy(core.double), dart.legacy(core.double), dart.dynamic, dart.dynamic, dart.legacy(core.List$(dart.legacy(base_print.StepData))), dart.legacy(core.Function)]),
    getIobCob: dart.fnType(dart.dynamic, [dart.legacy(core.double), dart.legacy(core.double), dart.legacy(core.double), dart.legacy(core.double), dart.dynamic, dart.dynamic, dart.legacy(json_data.DayData)], [dart.legacy(core.double), dart.legacy(core.double)]),
    checkValue: dart.fnType(dart.void, [dart.legacy(base_print.ParamInfo), dart.dynamic])
  }));
  dart.setGetterSignature(base_print.BasePrint, () => ({
    __proto__: dart.getGetters(base_print.BasePrint.__proto__),
    helpHtml: dart.legacy(core.String),
    helpStrings: dart.legacy(core.List$(dart.legacy(base_print.HelpItem))),
    display: dart.legacy(core.String),
    backsuffix: dart.legacy(core.String),
    backimage: dart.legacy(core.String),
    sortedParams: dart.legacy(core.List$(dart.legacy(base_print.ParamInfo))),
    isLocalOnly: dart.legacy(core.bool),
    isDebugOnly: dart.legacy(core.bool),
    isBetaOrLocal: dart.legacy(core.bool),
    colBasalDay: dart.legacy(core.String),
    isPortrait: dart.legacy(core.bool),
    width: dart.legacy(core.double),
    height: dart.legacy(core.double),
    msgInsulinUnit: dart.legacy(core.String),
    msgMedian: dart.legacy(core.String),
    msgUntil: dart.legacy(core.String),
    msgGlucosekurve: dart.legacy(core.String),
    msgMealBolus: dart.legacy(core.String),
    msgBolusWizard: dart.legacy(core.String),
    msgBolusExtInsulin: dart.legacy(core.String),
    msgBasalrate: dart.legacy(core.String),
    msgTDD: dart.legacy(core.String),
    msgMissingData: dart.legacy(core.String),
    msgServerNotReachable: dart.legacy(core.String),
    msgCatheterChange: dart.legacy(core.String),
    msgSensorChange: dart.legacy(core.String),
    msgAmpulleChange: dart.legacy(core.String),
    msgCollectedValues: dart.legacy(core.String),
    msgCarbIE: dart.legacy(core.String),
    msgKHTitle: dart.legacy(core.String),
    msgBirthday: dart.legacy(core.String),
    msgDiabSince: dart.legacy(core.String),
    msgInsulin: dart.legacy(core.String),
    msgDays: dart.legacy(core.String),
    msgReadingsCount: dart.legacy(core.String),
    msgReservoirCount: dart.legacy(core.String),
    msgCatheterCount: dart.legacy(core.String),
    msgSensorCount: dart.legacy(core.String),
    msgHbA1C: dart.legacy(core.String),
    msgHbA1CLong: dart.legacy(core.String),
    msgLowestValue: dart.legacy(core.String),
    msgHighestValue: dart.legacy(core.String),
    msgGlucoseValue: dart.legacy(core.String),
    msgGVIFull: dart.legacy(core.String),
    msgPGSFull: dart.legacy(core.String),
    msgKHPerDay: dart.legacy(core.String),
    msgKHPerMeal: dart.legacy(core.String),
    msgInsulinPerDay: dart.legacy(core.String),
    msgBolusPerDay: dart.legacy(core.String),
    msgBasalPerDay: dart.legacy(core.String),
    msgMicroBolusPerDay: dart.legacy(core.String),
    msgInsulinRatio: dart.legacy(core.String),
    msgBolus: dart.legacy(core.String),
    msgBasal: dart.legacy(core.String),
    msgBasalProfile: dart.legacy(core.String),
    msgNone: dart.legacy(core.String),
    msgOwnLimits: dart.legacy(core.String),
    msgStandardLimits: dart.legacy(core.String),
    msgTreatments: dart.legacy(core.String),
    msgPeriod: dart.legacy(core.String),
    msgTotal: dart.legacy(core.String),
    msgTimeShort: dart.legacy(core.String),
    msgTime: dart.legacy(core.String),
    msgIEHr: dart.legacy(core.String),
    msgSum: dart.legacy(core.String),
    msgTrend: dart.legacy(core.String),
    msgNote: dart.legacy(core.String),
    msgAdjustment: dart.legacy(core.String),
    msgGlucLow: dart.legacy(core.String),
    msgGlucNorm: dart.legacy(core.String),
    msgSource: dart.legacy(core.String),
    msgGlucHigh: dart.legacy(core.String),
    msgNormal: dart.legacy(core.String),
    msgPercentile1090: dart.legacy(core.String),
    msgPercentile2575: dart.legacy(core.String),
    msgICRTitle: dart.legacy(core.String),
    msgISFTitle: dart.legacy(core.String),
    msgBasalTitle: dart.legacy(core.String),
    msgBasalSum: dart.legacy(core.String),
    msgTargetTitle: dart.legacy(core.String),
    msgICRSum: dart.legacy(core.String),
    msgISFSum: dart.legacy(core.String),
    msgICR: dart.legacy(core.String),
    msgProfile: dart.legacy(core.String),
    msgDIA: dart.legacy(core.String),
    msgDIAUnit: dart.legacy(core.String),
    msgKHA: dart.legacy(core.String),
    msgTimezone: dart.legacy(core.String),
    msgKHAUnit: dart.legacy(core.String),
    msgDate: dart.legacy(core.String),
    msgDistribution: dart.legacy(core.String),
    msgValues: dart.legacy(core.String),
    msgSensorAV: dart.legacy(core.String),
    msgMin: dart.legacy(core.String),
    msgMax: dart.legacy(core.String),
    msgAverage: dart.legacy(core.String),
    msgDeviation: dart.legacy(core.String),
    msgVarK: dart.legacy(core.String),
    msg10: dart.legacy(core.String),
    msg25: dart.legacy(core.String),
    msg75: dart.legacy(core.String),
    msg90: dart.legacy(core.String),
    msgStandardDeviation: dart.legacy(core.String),
    footerText: dart.dynamic,
    footerTextDayTimes: dart.dynamic,
    imgList: dart.legacy(core.List$(dart.legacy(core.String)))
  }));
  dart.setLibraryUri(base_print.BasePrint, L3);
  dart.setFieldSignature(base_print.BasePrint, () => ({
    __proto__: dart.getFields(base_print.BasePrint.__proto__),
    g: dart.fieldType(dart.legacy(globals.Globals)),
    id: dart.fieldType(dart.legacy(core.String)),
    idx: dart.fieldType(dart.legacy(core.String)),
    title: dart.fieldType(dart.legacy(core.String)),
    subtitle: dart.fieldType(dart.legacy(core.String)),
    needed: dart.fieldType(dart.legacy(base_print.DataNeeded)),
    help: dart.fieldType(dart.legacy(core.String)),
    titleInfo: dart.fieldType(dart.legacy(core.String)),
    titleInfoSub: dart.fieldType(dart.legacy(core.String)),
    footerTextAboveLine: dart.fieldType(dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(core.Object)))),
    pagesPerSheet: dart.fieldType(dart.legacy(core.int)),
    params: dart.fieldType(dart.legacy(core.List$(dart.legacy(base_print.ParamInfo)))),
    colText: dart.fieldType(dart.legacy(core.String)),
    colInfo: dart.fieldType(dart.legacy(core.String)),
    colSubTitle: dart.fieldType(dart.legacy(core.String)),
    colLine: dart.fieldType(dart.legacy(core.String)),
    colValue: dart.fieldType(dart.legacy(core.String)),
    colBasalProfile: dart.fieldType(dart.legacy(core.String)),
    colBasalFont: dart.fieldType(dart.legacy(core.String)),
    colProfileSwitch: dart.fieldType(dart.legacy(core.String)),
    colBolus: dart.fieldType(dart.legacy(core.String)),
    colBolusExt: dart.fieldType(dart.legacy(core.String)),
    colCarbBolus: dart.fieldType(dart.legacy(core.String)),
    colLow: dart.fieldType(dart.legacy(core.String)),
    colNormLow: dart.fieldType(dart.legacy(core.String)),
    colNorm: dart.fieldType(dart.legacy(core.String)),
    colNormHigh: dart.fieldType(dart.legacy(core.String)),
    colHigh: dart.fieldType(dart.legacy(core.String)),
    colTargetArea: dart.fieldType(dart.legacy(core.String)),
    colTargetValue: dart.fieldType(dart.legacy(core.String)),
    colCarbs: dart.fieldType(dart.legacy(core.String)),
    colCarbsText: dart.fieldType(dart.legacy(core.String)),
    colDurationNotes: dart.fieldType(dart.legacy(core.String)),
    colDurationNotesLine: dart.fieldType(dart.legacy(core.String)),
    colNotes: dart.fieldType(dart.legacy(core.String)),
    colNotesLine: dart.fieldType(dart.legacy(core.String)),
    colGlucValues: dart.fieldType(dart.legacy(core.String)),
    colBloodValues: dart.fieldType(dart.legacy(core.String)),
    colHbA1c: dart.fieldType(dart.legacy(core.String)),
    colWeekDays: dart.fieldType(dart.legacy(core.List$(dart.legacy(core.String)))),
    colWeekDaysText: dart.fieldType(dart.legacy(core.List$(dart.legacy(core.String)))),
    colExercises: dart.fieldType(dart.legacy(core.String)),
    colExerciseText: dart.fieldType(dart.legacy(core.String)),
    colCGPLine: dart.fieldType(dart.legacy(core.String)),
    colCGPHealthyLine: dart.fieldType(dart.legacy(core.String)),
    colCGPHealthyFill: dart.fieldType(dart.legacy(core.String)),
    colCGPPatientLine: dart.fieldType(dart.legacy(core.String)),
    colCGPPatientFill: dart.fieldType(dart.legacy(core.String)),
    colIOBFill: dart.fieldType(dart.legacy(core.String)),
    colIOBLine: dart.fieldType(dart.legacy(core.String)),
    colCOBFill: dart.fieldType(dart.legacy(core.String)),
    colCOBLine: dart.fieldType(dart.legacy(core.String)),
    colTrendCrit: dart.fieldType(dart.legacy(core.String)),
    colTrendWarn: dart.fieldType(dart.legacy(core.String)),
    colTrendNorm: dart.fieldType(dart.legacy(core.String)),
    colCOBDaily: dart.fieldType(dart.legacy(core.String)),
    colIOBDaily: dart.fieldType(dart.legacy(core.String)),
    xorg: dart.fieldType(dart.legacy(core.double)),
    yorg: dart.fieldType(dart.legacy(core.double)),
    xframe: dart.fieldType(dart.legacy(core.double)),
    lw: dart.fieldType(dart.legacy(core.double)),
    lc: dart.fieldType(dart.legacy(core.String)),
    lcFrame: dart.fieldType(dart.legacy(core.String)),
    isPortraitParam: dart.fieldType(dart.legacy(core.bool)),
    [_pages]: dart.fieldType(dart.legacy(core.List$(dart.legacy(base_print.Page)))),
    [_fileSize]: dart.fieldType(dart.legacy(core.int)),
    tableHeadFilled: dart.fieldType(dart.legacy(core.bool)),
    tableHeadLine: dart.fieldType(dart.dynamic),
    tableWidths: dart.fieldType(dart.dynamic),
    m0: dart.fieldType(dart.dynamic),
    images: dart.fieldType(dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(core.String)))),
    repData: dart.fieldType(dart.legacy(json_data.ReportData)),
    scale: dart.fieldType(dart.legacy(core.double)),
    offsetX: dart.fieldType(dart.legacy(core.double)),
    offsetY: dart.fieldType(dart.legacy(core.double))
  }));
  var _scaleMethod = dart.privateName(print_cgp, "_scaleMethod");
  var name$4 = dart.privateName(print_cgp, "PentagonScaleData.name");
  var beg$ = dart.privateName(print_cgp, "PentagonScaleData.beg");
  var end$ = dart.privateName(print_cgp, "PentagonScaleData.end");
  var nameX$ = dart.privateName(print_cgp, "PentagonScaleData.nameX");
  var nameY$ = dart.privateName(print_cgp, "PentagonScaleData.nameY");
  var valueX$ = dart.privateName(print_cgp, "PentagonScaleData.valueX");
  var valueY$ = dart.privateName(print_cgp, "PentagonScaleData.valueY");
  var values$ = dart.privateName(print_cgp, "PentagonScaleData.values");
  var legendFactor$ = dart.privateName(print_cgp, "PentagonScaleData.legendFactor");
  print_cgp.PentagonScaleData = class PentagonScaleData extends core.Object {
    get name() {
      return this[name$4];
    }
    set name(value) {
      this[name$4] = value;
    }
    get beg() {
      return this[beg$];
    }
    set beg(value) {
      this[beg$] = value;
    }
    get end() {
      return this[end$];
    }
    set end(value) {
      this[end$] = value;
    }
    get nameX() {
      return this[nameX$];
    }
    set nameX(value) {
      this[nameX$] = value;
    }
    get nameY() {
      return this[nameY$];
    }
    set nameY(value) {
      this[nameY$] = value;
    }
    get valueX() {
      return this[valueX$];
    }
    set valueX(value) {
      this[valueX$] = value;
    }
    get valueY() {
      return this[valueY$];
    }
    set valueY(value) {
      this[valueY$] = value;
    }
    get values() {
      return this[values$];
    }
    set values(value) {
      this[values$] = value;
    }
    get legendFactor() {
      return this[legendFactor$];
    }
    set legendFactor(value) {
      this[legendFactor$] = value;
    }
    scaleMethod(v) {
      let t28;
      return doubleL().as(dart.dsend((t28 = v, dart.dsend(this, _scaleMethod, [t28])), '/', [76]));
    }
  };
  (print_cgp.PentagonScaleData.new = function(values, legendFactor, opts) {
    let name = opts && 'name' in opts ? opts.name : null;
    let beg = opts && 'beg' in opts ? opts.beg : 0;
    let end = opts && 'end' in opts ? opts.end : 1;
    let nameX = opts && 'nameX' in opts ? opts.nameX : 0;
    let nameY = opts && 'nameY' in opts ? opts.nameY : 0;
    let valueX = opts && 'valueX' in opts ? opts.valueX : 0;
    let valueY = opts && 'valueY' in opts ? opts.valueY : 0;
    let scaleMethod = opts && 'scaleMethod' in opts ? opts.scaleMethod : null;
    this[_scaleMethod] = null;
    this[values$] = values;
    this[legendFactor$] = legendFactor;
    this[name$4] = name;
    this[beg$] = beg;
    this[end$] = end;
    this[nameX$] = nameX;
    this[nameY$] = nameY;
    this[valueX$] = valueX;
    this[valueY$] = valueY;
    this[_scaleMethod] = scaleMethod;
  }).prototype = print_cgp.PentagonScaleData.prototype;
  dart.addTypeTests(print_cgp.PentagonScaleData);
  dart.addTypeCaches(print_cgp.PentagonScaleData);
  dart.setMethodSignature(print_cgp.PentagonScaleData, () => ({
    __proto__: dart.getMethods(print_cgp.PentagonScaleData.__proto__),
    scaleMethod: dart.fnType(dart.legacy(core.double), [dart.dynamic])
  }));
  dart.setLibraryUri(print_cgp.PentagonScaleData, L4);
  dart.setFieldSignature(print_cgp.PentagonScaleData, () => ({
    __proto__: dart.getFields(print_cgp.PentagonScaleData.__proto__),
    name: dart.fieldType(dart.legacy(core.String)),
    beg: dart.fieldType(dart.legacy(core.double)),
    end: dart.fieldType(dart.legacy(core.double)),
    nameX: dart.fieldType(dart.legacy(core.double)),
    nameY: dart.fieldType(dart.legacy(core.double)),
    valueX: dart.fieldType(dart.legacy(core.double)),
    valueY: dart.fieldType(dart.legacy(core.double)),
    values: dart.fieldType(dart.legacy(core.List$(dart.legacy(core.double)))),
    [_scaleMethod]: dart.fieldType(dart.dynamic),
    legendFactor: dart.fieldType(dart.legacy(core.double))
  }));
  var _point = dart.privateName(print_cgp, "_point");
  var axis = dart.privateName(print_cgp, "PentagonData.axis");
  var defFontSize = dart.privateName(print_cgp, "PentagonData.defFontSize");
  var xm$ = dart.privateName(print_cgp, "PentagonData.xm");
  var ym$ = dart.privateName(print_cgp, "PentagonData.ym");
  var scale$0 = dart.privateName(print_cgp, "PentagonData.scale");
  var fontsize$ = dart.privateName(print_cgp, "PentagonData.fontsize");
  var axisLength = dart.privateName(print_cgp, "PentagonData.axisLength");
  var deg = dart.privateName(print_cgp, "PentagonData.deg");
  var glucInfo$ = dart.privateName(print_cgp, "PentagonData.glucInfo");
  var cm$ = dart.privateName(print_cgp, "PentagonData.cm");
  var fs$ = dart.privateName(print_cgp, "PentagonData.fs");
  var outputCvs = dart.privateName(print_cgp, "PentagonData.outputCvs");
  var outputText = dart.privateName(print_cgp, "PentagonData.outputText");
  var g$3 = dart.privateName(print_cgp, "PentagonData.g");
  var hasLimitBreakers = dart.privateName(print_cgp, "PentagonData.hasLimitBreakers");
  print_cgp.PentagonData = class PentagonData extends core.Object {
    get axis() {
      return this[axis];
    }
    set axis(value) {
      this[axis] = value;
    }
    get defFontSize() {
      return this[defFontSize];
    }
    set defFontSize(value) {
      this[defFontSize] = value;
    }
    get xm() {
      return this[xm$];
    }
    set xm(value) {
      this[xm$] = value;
    }
    get ym() {
      return this[ym$];
    }
    set ym(value) {
      this[ym$] = value;
    }
    get scale() {
      return this[scale$0];
    }
    set scale(value) {
      this[scale$0] = value;
    }
    get fontsize() {
      return this[fontsize$];
    }
    set fontsize(value) {
      this[fontsize$] = value;
    }
    get axisLength() {
      return this[axisLength];
    }
    set axisLength(value) {
      this[axisLength] = value;
    }
    get deg() {
      return this[deg];
    }
    set deg(value) {
      this[deg] = value;
    }
    get glucInfo() {
      return this[glucInfo$];
    }
    set glucInfo(value) {
      this[glucInfo$] = value;
    }
    get cm() {
      return this[cm$];
    }
    set cm(value) {
      this[cm$] = value;
    }
    get fs() {
      return this[fs$];
    }
    set fs(value) {
      this[fs$] = value;
    }
    get outputCvs() {
      return this[outputCvs];
    }
    set outputCvs(value) {
      this[outputCvs] = value;
    }
    get outputText() {
      return this[outputText];
    }
    set outputText(value) {
      this[outputText] = value;
    }
    get g() {
      return this[g$3];
    }
    set g(value) {
      this[g$3] = value;
    }
    get hasLimitBreakers() {
      return this[hasLimitBreakers];
    }
    set hasLimitBreakers(value) {
      this[hasLimitBreakers] = value;
    }
    static msgTOR(value = "") {
      if (!dart.equals(value, "")) value = dart.str(value) + " ";
      return intl.Intl.message("ToR [" + dart.str(value) + "min/d]", {args: JSArrayOfObjectL().of([value]), name: "msgTOR"});
    }
    static msgCV(value = "") {
      if (!dart.equals(value, "")) value = dart.str(value) + " ";
      return intl.Intl.message("VarK [" + dart.str(value) + "%]", {args: JSArrayOfObjectL().of([value]), name: "msgCV"});
    }
    static msgHYPO(unit, value = "") {
      if (!dart.equals(value, "")) unit = dart.str(value) + " " + dart.str(unit);
      return intl.Intl.message("Intensität HYPO\n[" + dart.str(unit) + " x min²]", {args: JSArrayOfObjectL().of([unit, value]), name: "msgHYPO"});
    }
    static msgHYPER(unit, value = "") {
      if (!dart.equals(value, "")) unit = dart.str(value) + " " + dart.str(unit);
      return intl.Intl.message("Intensität HYPER\n[" + dart.str(unit) + " x min²]", {args: JSArrayOfObjectL().of([unit, value]), name: "msgHYPER"});
    }
    static msgMEAN(unit, value = "") {
      if (!dart.equals(value, "")) unit = dart.str(value) + " " + dart.str(unit);
      return intl.Intl.message("Mittlere Glukose\n[" + dart.str(unit) + "]", {args: JSArrayOfObjectL().of([unit, value]), name: "msgMEAN"});
    }
    static get msgPGR() {
      return intl.Intl.message("PGR");
    }
    static get msgGreen() {
      return intl.Intl.message("Das grüne Fünfeck stellt den Wertebereich eines gesunden Menschen ohne Diabetes dar.");
    }
    static get msgYellow() {
      return intl.Intl.message("Das gelbe Fünfeck stellt den Wertebereich des angegebenen Zeitraums dar.");
    }
    static get msgYellowCircle() {
      return intl.Intl.message("Gelbe Kreise zeigen an, dass der entsprechende Wert die Skala überschreitet.");
    }
    static msgTORInfo(min, max) {
      return intl.Intl.message("Die Zeit pro Tag in Minuten, in denen die Werte ausserhalb des Bereichs " + dart.str(min) + " bis " + dart.str(max) + " liegen.", {args: JSArrayOfObjectL().of([min, max]), name: "msgTORInfo"});
    }
    static get msgCVInfo() {
      return intl.Intl.message("Die glykämische Variabilität stellt die Streuung der Werte um den" + " glykämischen Mittelwert herum in Prozent dar.");
    }
    static msgHYPOInfo(unit) {
      return intl.Intl.message("Die Intensität von Hypoglykämien pro Tag (Werte kleiner oder gleich " + dart.str(unit) + ").", {args: JSArrayOfObjectL().of([unit]), name: "msgHYPOInfo"});
    }
    static msgHYPERInfo(unit) {
      return intl.Intl.message("Die Intensität von Hyperglykämien pro Tag (Werte grösser oder gleich " + dart.str(unit) + ").", {args: JSArrayOfObjectL().of([unit]), name: "msgHYPERInfo"});
    }
    static msgMEANInfo(hba1c) {
      return intl.Intl.message("Der glykämische Mittelwert im betrachteten Zeitraum.", {args: JSArrayOfObjectL().of([hba1c]), name: "msgMEANInfo"});
    }
    static get msgPGRInfo() {
      return intl.Intl.message("Der prognostische glykämische Risikoparameter stellt das Risiko von Langzeitkomplikationen" + " dar (bisher nicht durch Studien belegt).");
    }
    static get msgPGR02() {
      return intl.Intl.message("0,0 bis 2,0");
    }
    static get msgPGR02Info() {
      return intl.Intl.message("sehr geringes Risiko");
    }
    static get msgPGR23() {
      return intl.Intl.message("2,1 bis 3,0");
    }
    static get msgPGR23Info() {
      return intl.Intl.message("geringes Risiko");
    }
    static get msgPGR34() {
      return intl.Intl.message("3,1 bis 4,0");
    }
    static get msgPGR34Info() {
      return intl.Intl.message("moderates Risiko");
    }
    static get msgPGR45() {
      return intl.Intl.message("4,1 bis 4,5");
    }
    static get msgPGR45Info() {
      return intl.Intl.message("hohes Risiko");
    }
    static get msgPGR5() {
      return intl.Intl.message("ab 4,6");
    }
    static get msgPGR5Info() {
      return intl.Intl.message("extrem hohes Risiko");
    }
    paintPentagon(factor, lw, opts) {
      let t28;
      let colLine = opts && 'colLine' in opts ? opts.colLine : null;
      let colFill = opts && 'colFill' in opts ? opts.colFill : null;
      let opacity = opts && 'opacity' in opts ? opts.opacity : 1;
      lw = dart.notNull(lw) * dart.notNull(this.scale);
      let points = [];
      for (let i = 0; i < dart.notNull(this.axis[$length]); i = i + 1) {
        points[$add](this[_point](i, factor));
      }
      this.outputCvs[$add](new (IdentityMapOfStringL$dynamic()).from(["type", "polyline", "lineWidth", (t28 = lw, dart.dsend(this, 'cm', [t28])), "closePath", true, "points", points, "fillOpacity", opacity]));
      if (colLine != null) dart.dsend(this.outputCvs[$last], '_set', ["lineColor", colLine]);
      if (colFill != null) dart.dsend(this.outputCvs[$last], '_set', ["color", colFill]);
    }
    paintAxis(lw, opts) {
      let t28, t28$, t28$0, t28$1, t28$2, t28$3, t28$4, t28$5, t28$6, t28$7, t28$8, t28$9, t28$10;
      let colLine = opts && 'colLine' in opts ? opts.colLine : null;
      lw = dart.notNull(lw) * dart.notNull(this.scale);
      for (let i = 0; i < dart.notNull(this.axis[$length]); i = i + 1) {
        if (i > 11) continue;
        let pt = this[_point](i, 1.1);
        this.outputCvs[$add](new (IdentityMapOfStringL$dynamic()).from(["type", "line", "x1", (t28 = this.xm, dart.dsend(this, 'cm', [t28])), "y1", (t28$ = this.ym, dart.dsend(this, 'cm', [t28$])), "x2", dart.dsend(pt, '_get', ["x"]), "y2", dart.dsend(pt, '_get', ["y"]), "lineWidth", (t28$0 = lw, dart.dsend(this, 'cm', [t28$0]))]));
        if (colLine != null) dart.dsend(this.outputCvs[$last], '_set', ["lineColor", colLine]);
        this.outputText[$add](new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$dynamic()).from(["x", dart.dsend(dart.dsend(pt, '_get', ["x"]), '+', [(t28$1 = dart.notNull(this.axis[$_get](i).nameX) * dart.notNull(this.fontsize) / dart.notNull(this.defFontSize), dart.dsend(this, 'cm', [t28$1]))]), "y", dart.dsend(dart.dsend(pt, '_get', ["y"]), '+', [(t28$2 = dart.notNull(this.axis[$_get](i).nameY) * dart.notNull(this.fontsize) / dart.notNull(this.defFontSize), dart.dsend(this, 'cm', [t28$2]))])]), "columns", JSArrayOfMapLOfStringL$dynamic().of([new (IdentityMapOfStringL$dynamic()).from(["width", (t28$3 = 5 * dart.notNull(this.fontsize) / dart.notNull(this.defFontSize), dart.dsend(this, 'cm', [t28$3])), "text", this.axis[$_get](i).name, "fontSize", (t28$4 = this.fontsize, dart.dsend(this, 'fs', [t28$4])), "alignment", "center"])])]));
        pt = this[_point](i, 1.0);
        let dx = doubleL().as(dart.dsend(dart.dsend(pt, '_get', ["x"]), '-', [(t28$5 = this.xm, dart.dsend(this, 'cm', [t28$5]))]));
        let dy = doubleL().as(dart.dsend(dart.dsend(pt, '_get', ["y"]), '-', [(t28$6 = this.ym, dart.dsend(this, 'cm', [t28$6]))]));
        let lastNumber = "";
        let lastValue = 0.0;
        for (let value of this.axis[$_get](i).values) {
          pt = this[_point](i, this.axis[$_get](i).scaleMethod(value));
          let x = doubleL().as(dart.dsend(pt, '_get', ["x"]));
          let y = doubleL().as(dart.dsend(pt, '_get', ["y"]));
          let f = 0.05;
          let x1 = dart.notNull(x) + 0.5 * dart.notNull(dy) * f;
          let y1 = dart.notNull(y) - 0.5 * dart.notNull(dx) * f;
          let x2 = dart.notNull(x) - 0.5 * dart.notNull(dy) * f;
          let y2 = dart.notNull(y) + 0.5 * dart.notNull(dx) * f;
          this.outputCvs[$add](new (IdentityMapOfStringL$dynamic()).from(["type", "line", "x1", x1, "y1", y1, "x2", x2, "y2", y2, "lineWidth", (t28$7 = lw, dart.dsend(this, 'cm', [t28$7]))]));
          if (colLine != null) dart.dsend(this.outputCvs[$last], '_set', ["lineColor", colLine]);
          let precision = this.axis[$_get](i).legendFactor === 1 ? 0 : 1;
          let number = this.g.fmtNumber(dart.notNull(value) / dart.notNull(this.axis[$_get](i).legendFactor), precision);
          while (number == lastNumber) {
            number = this.g.fmtNumber(dart.notNull(value) / dart.notNull(this.axis[$_get](i).legendFactor), precision = precision + 1);
            lastNumber = this.g.fmtNumber(dart.notNull(lastValue) / dart.notNull(this.axis[$_get](i).legendFactor), precision, 0, "null", true);
          }
          if (i > 0) dart.dsend(this.outputText[$last], '_set', ["text", lastNumber]);
          this.outputText[$add](new (IdentityMapOfStringL$dynamic()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", dart.notNull(x) + dart.notNull(core.num.as((t28$8 = dart.notNull(this.axis[$_get](i).valueX) * dart.notNull(this.fontsize) / dart.notNull(this.defFontSize), dart.dsend(this, 'cm', [t28$8])))), "y", dart.notNull(y) + dart.notNull(core.num.as((t28$9 = dart.notNull(this.axis[$_get](i).valueY) * dart.notNull(this.fontsize) / dart.notNull(this.defFontSize), dart.dsend(this, 'cm', [t28$9]))))]), "text", number, "fontSize", (t28$10 = dart.notNull(this.fontsize) * 0.7, dart.dsend(this, 'fs', [t28$10]))]));
          lastNumber = number;
          lastValue = value;
        }
      }
    }
    paintValues(values, lw, opts) {
      let t28, t28$, t28$0;
      let colLine = opts && 'colLine' in opts ? opts.colLine : null;
      let colFill = opts && 'colFill' in opts ? opts.colFill : null;
      let opacity = opts && 'opacity' in opts ? opts.opacity : 1;
      let showLimitBreaks = opts && 'showLimitBreaks' in opts ? opts.showLimitBreaks : true;
      lw = dart.notNull(lw) * dart.notNull(this.scale);
      let points = [];
      this.hasLimitBreakers = false;
      for (let i = 0; i < dart.notNull(values[$length]) && i < dart.notNull(this.axis[$length]); i = i + 1) {
        let y = this.g.limitValue(values[$_get](i), this.axis[$_get](i).values[$first], this.axis[$_get](i).values[$last]);
        points[$add](this[_point](i, this.axis[$_get](i).scaleMethod(y)));
        if (dart.notNull(values[$_get](i)) > dart.notNull(this.axis[$_get](i).values[$last]) && dart.test(showLimitBreaks)) {
          let pt = this[_point](i, 1.1);
          this.hasLimitBreakers = true;
          this.outputCvs[$add](new (IdentityMapOfStringL$dynamic()).from(["type", "ellipse", "x", dart.dsend(pt, '_get', ["x"]), "y", dart.dsend(pt, '_get', ["y"]), "r1", (t28 = 0.3, dart.dsend(this, 'cm', [t28])), "r2", (t28$ = 0.3, dart.dsend(this, 'cm', [t28$])), "color", colFill, "fillOpacity", 0.75]));
        }
      }
      this.outputCvs[$add](new (IdentityMapOfStringL$dynamic()).from(["type", "polyline", "lineWidth", (t28$0 = lw, dart.dsend(this, 'cm', [t28$0])), "closePath", true, "points", points, "fillOpacity", opacity]));
      if (colLine != null) dart.dsend(this.outputCvs[$last], '_set', ["lineColor", colLine]);
      if (colFill != null) dart.dsend(this.outputCvs[$last], '_set', ["color", colFill]);
      return this.calcArea(values);
    }
    [_point](idx, factor) {
      let t28, t28$;
      let x = dart.notNull(this.xm) + math.sin(dart.notNull(idx) * dart.notNull(this.deg)) * dart.notNull(this.axisLength) * dart.notNull(this.scale) * dart.notNull(factor);
      let y = dart.notNull(this.ym) - math.cos(dart.notNull(idx) * dart.notNull(this.deg)) * dart.notNull(this.axisLength) * dart.notNull(this.scale) * dart.notNull(factor);
      if (x[$isNaN]) x = 0.0;
      if (y[$isNaN]) y = 0.0;
      return new (IdentityMapOfStringL$dynamic()).from(["x", (t28 = x, dart.dsend(this, 'cm', [t28])), "y", (t28$ = y, dart.dsend(this, 'cm', [t28$]))]);
    }
    calcArea(values) {
      let t29, t28, t29$, t28$;
      let ret = 0.0;
      for (let i = 0; i < dart.notNull(values[$length]) && i < dart.notNull(this.axis[$length]); i = i + 1) {
        let a = doubleL().as((t28 = this.axis[$_get](i), t29 = values[$_get](i), dart.dsend(t28, _scaleMethod, [t29])));
        let b = doubleL().as((t28$ = this.axis[$_get](i < dart.notNull(this.axis[$length]) - 1 ? i + 1 : 0), t29$ = values[$_get](i < dart.notNull(values[$length]) - 1 ? i + 1 : 0), dart.dsend(t28$, _scaleMethod, [t29$])));
        ret = ret + dart.notNull(a) * dart.notNull(b) / 2 * math.sin(this.deg);
      }
      return ret;
    }
  };
  (print_cgp.PentagonData.new = function(g, glucInfo, cm, fs, opts) {
    let xm = opts && 'xm' in opts ? opts.xm : null;
    let ym = opts && 'ym' in opts ? opts.ym : null;
    let scale = opts && 'scale' in opts ? opts.scale : null;
    let fontsize = opts && 'fontsize' in opts ? opts.fontsize : -1;
    this[axis] = null;
    this[defFontSize] = 6.0;
    this[axisLength] = null;
    this[deg] = null;
    this[outputCvs] = [];
    this[outputText] = [];
    this[hasLimitBreakers] = false;
    this[g$3] = g;
    this[glucInfo$] = glucInfo;
    this[cm$] = cm;
    this[fs$] = fs;
    this[xm$] = xm;
    this[ym$] = ym;
    this[scale$0] = scale;
    this[fontsize$] = fontsize;
    this.axis = JSArrayOfPentagonScaleDataL().of([new print_cgp.PentagonScaleData.new(JSArrayOfdoubleL().of([0.0, 300.0, 480.0, 720.0, 900.0, 1080.0, 1200.0, 1440.0]), 1.0, {scaleMethod: dart.fn(v => math.pow(core.num.as(dart.dsend(v, '*', [0.00614])), 1.581) + 14, dynamicTonumL()), name: print_cgp.PentagonData.msgTOR(), nameX: -2.5, nameY: -0.4, valueX: 0.15, valueY: -0.11}), new print_cgp.PentagonScaleData.new(JSArrayOfdoubleL().of([16.7, 20.0, 30.0, 40.0, 50.0, 60.0, 70.0, 80.0]), 1.0, {scaleMethod: dart.fn(v => dart.dsend(dart.dsend(dart.dtest(dart.dsend(v, '>=', [17])) ? dart.dsend(v, '-', [17]) : 0, '*', [0.92]), '+', [14]), dynamicTodynamic()), name: print_cgp.PentagonData.msgCV(), nameX: -2.3, nameY: -0.4, valueX: -0.1, valueY: 0.1}), new print_cgp.PentagonScaleData.new(JSArrayOfdoubleL().of([0.0, 3.0, 4.0, 5.0, 6.0, 7.0, 7.2]), this.g.glucFactor, {scaleMethod: dart.fn(v => math.exp(core.num.as(dart.dsend(v, '*', [0.57]))) + 13, dynamicTodoubleL()), name: print_cgp.PentagonData.msgHYPO(dart.dsend(this.glucInfo, '_get', ["unit"])), end: 0.25, nameX: -2.5, nameY: 0.1, valueX: -0.2, valueY: 0.1}), new print_cgp.PentagonScaleData.new(JSArrayOfdoubleL().of([0.0, 20.0, 30.0, 40.0, 50.0, 60.0, 70.0, 80.0, 90.0, 100.0, 110.0, 120.0, 130.0]), this.g.glucFactor, {scaleMethod: dart.fn(v => math.pow(core.num.as(dart.dsend(v, '*', [0.115])), 1.51) + 14, dynamicTonumL()), name: print_cgp.PentagonData.msgHYPER(dart.dsend(this.glucInfo, '_get', ["unit"])), beg: 0.25, nameX: -2.5, nameY: 0.1, valueX: 0.1, valueY: 0.1}), new print_cgp.PentagonScaleData.new(JSArrayOfdoubleL().of([130.0, 190.0, 220.0, 250.0, 280.0, 310.0]), this.g.glucFactor, {scaleMethod: dart.fn(v => math.pow(core.num.as(dart.dsend(dart.dtest(dart.dsend(v, '>=', [90])) ? dart.dsend(v, '-', [90]) : 0.0, '*', [0.0217])), 2.63) + 14, dynamicTonumL()), name: print_cgp.PentagonData.msgMEAN(dart.dsend(this.glucInfo, '_get', ["unit"])), nameX: -2.5, nameY: -0.73, valueX: -0.2, valueY: 0.1})]);
    this.deg = 360.0 / dart.notNull(this.axis[$length]) * 3.141592653589793 / 180.0;
    let h = 7.6;
    let a = h / math.sqrt(5 + 2 * math.sqrt(5)) * 2;
    this.axisLength = math.sqrt(50 + 10 * math.sqrt(5)) / 10 * a;
    if (this.fontsize === -1) this.fontsize = this.defFontSize;
    this.fontsize = dart.notNull(this.fontsize) * dart.notNull(this.scale);
  }).prototype = print_cgp.PentagonData.prototype;
  dart.addTypeTests(print_cgp.PentagonData);
  dart.addTypeCaches(print_cgp.PentagonData);
  dart.setMethodSignature(print_cgp.PentagonData, () => ({
    __proto__: dart.getMethods(print_cgp.PentagonData.__proto__),
    paintPentagon: dart.fnType(dart.void, [dart.legacy(core.double), dart.legacy(core.double)], {colFill: dart.legacy(core.String), colLine: dart.legacy(core.String), opacity: dart.legacy(core.double)}, {}),
    paintAxis: dart.fnType(dart.void, [dart.legacy(core.double)], {colLine: dart.legacy(core.String)}, {}),
    paintValues: dart.fnType(dart.legacy(core.double), [dart.legacy(core.List$(dart.legacy(core.double))), dart.legacy(core.double)], {colFill: dart.legacy(core.String), colLine: dart.legacy(core.String), opacity: dart.legacy(core.double), showLimitBreaks: dart.legacy(core.bool)}, {}),
    [_point]: dart.fnType(dart.dynamic, [dart.legacy(core.int), dart.legacy(core.double)]),
    calcArea: dart.fnType(dart.legacy(core.double), [dart.legacy(core.List$(dart.legacy(core.double)))])
  }));
  dart.setLibraryUri(print_cgp.PentagonData, L4);
  dart.setFieldSignature(print_cgp.PentagonData, () => ({
    __proto__: dart.getFields(print_cgp.PentagonData.__proto__),
    axis: dart.fieldType(dart.legacy(core.List$(dart.legacy(print_cgp.PentagonScaleData)))),
    defFontSize: dart.fieldType(dart.legacy(core.double)),
    xm: dart.fieldType(dart.legacy(core.double)),
    ym: dart.fieldType(dart.legacy(core.double)),
    scale: dart.fieldType(dart.legacy(core.double)),
    fontsize: dart.fieldType(dart.legacy(core.double)),
    axisLength: dart.fieldType(dart.legacy(core.double)),
    deg: dart.fieldType(dart.legacy(core.double)),
    glucInfo: dart.fieldType(dart.dynamic),
    cm: dart.fieldType(dart.dynamic),
    fs: dart.fieldType(dart.dynamic),
    outputCvs: dart.fieldType(dart.legacy(core.List)),
    outputText: dart.fieldType(dart.legacy(core.List)),
    g: dart.fieldType(dart.legacy(globals.Globals)),
    hasLimitBreakers: dart.fieldType(dart.legacy(core.bool))
  }));
  var _isPortrait = dart.privateName(print_cgp, "_isPortrait");
  var _calcAUCForDay = dart.privateName(print_cgp, "_calcAUCForDay");
  var _calcAUC = dart.privateName(print_cgp, "_calcAUC");
  var help$ = dart.privateName(print_cgp, "PrintCGP.help");
  var id$2 = dart.privateName(print_cgp, "PrintCGP.id");
  var idx$ = dart.privateName(print_cgp, "PrintCGP.idx");
  var params$ = dart.privateName(print_cgp, "PrintCGP.params");
  print_cgp.PrintCGP = class PrintCGP extends base_print.BasePrint {
    get help() {
      return this[help$];
    }
    set help(value) {
      this[help$] = value;
    }
    get id() {
      return this[id$2];
    }
    set id(value) {
      this[id$2] = value;
    }
    get idx() {
      return this[idx$];
    }
    set idx(value) {
      this[idx$] = value;
    }
    get params() {
      return this[params$];
    }
    set params(value) {
      this[params$] = value;
    }
    get title() {
      return intl.Intl.message("CGP");
    }
    set title(value) {
      super.title = value;
    }
    get subtitle() {
      return intl.Intl.message("Comprehensive Glucose Pentagon");
    }
    set subtitle(value) {
      super.subtitle = value;
    }
    get isPortrait() {
      return this[_isPortrait];
    }
    get estimatePageCount() {
      return new (IdentityMapOfStringL$ObjectL()).from(["count", 1, "isEstimated", false]);
    }
    get backsuffix() {
      return dart.test(this.isPortraitParam) ? "" : "landscape";
    }
    extractParams() {
      switch (this.params[$_get](0).intValue) {
        case 0:
        {
          this.isPortraitParam = true;
          break;
        }
        case 1:
        {
          this.isPortraitParam = false;
          break;
        }
      }
    }
    fillPages(pages) {
      this[_isPortrait] = this.isPortraitParam;
      pages[$add](this.getPage());
      if (dart.test(this.g.showBothUnits)) {
        this.g.glucMGDLIdx = 1;
        pages[$add](this.getPage());
        this.g.glucMGDLIdx = 2;
      }
    }
    getPage() {
      this.titleInfo = this.titleInfoBegEnd();
      if (!dart.test(this.isPortrait)) return this.getCGPPage(this.repData.data.days);
      let cgpSrc = this.calcCGP(this.repData.data.days, this.scale, dart.notNull(this.width) / 2 - dart.notNull(this.xorg), 0.0);
      let cgp = PentagonDataL().as(dart.dsend(cgpSrc, '_get', ["cgp"]));
      let ret = [this.headerFooter(), new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(this.xorg), "y", this.cm(this.yorg)]), "canvas", cgp.outputCvs]), new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(this.xorg), "y", this.cm(this.yorg)]), "stack", cgp.outputText]), this.infoTable(cgpSrc, StringL().as(dart.dsend(cgp.glucInfo, '_get', ["unit"])), this.xorg, dart.notNull(this.yorg) + dart.notNull(cgp.ym) + dart.notNull(cgp.axisLength) * dart.notNull(cgp.scale) + 1.0, 2.5, dart.notNull(this.width) - 2 * dart.notNull(this.xorg) - 2.5)];
      return new base_print.Page.new(this.isPortrait, ret);
    }
    infoTable(cgp, unit, x, y, widthId, widthText) {
      let pgr = doubleL().as(dart.dsend(cgp, '_get', ["pgr"]));
      return new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(x), "y", this.cm(y)]), "layout", "noBorders", "fontSize", this.fs(8.0), "table", new (IdentityMapOfStringL$ObjectL()).from(["headerRows", 0, "widths", JSArrayOfdoubleL().of([this.cm(widthId), this.cm(widthText)]), "body", JSArrayOfListLOfMapL().of([JSArrayOfMapL().of([new (IdentityMapOfStringL$ObjectL()).from(["text", print_cgp.PentagonData.msgGreen, "colSpan", 2]), new _js_helper.LinkedMap.new()]), JSArrayOfMapL().of([new (IdentityMapOfStringL$ObjectL()).from(["text", print_cgp.PentagonData.msgYellow, "colSpan", 2]), new _js_helper.LinkedMap.new()]), JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$ObjectL()).from(["text", dart.dtest(dart.dload(dart.dsend(cgp, '_get', ["cgp"]), 'hasLimitBreakers')) ? print_cgp.PentagonData.msgYellowCircle : null, "colSpan", 2])]), JSArrayOfMapLOfStringL$StringL().of([new (IdentityMapOfStringL$StringL()).from(["text", print_cgp.PentagonData.msgTOR(this.g.fmtNumber(numL().as(dart.dsend(cgp, '_get', ["tor"]))))]), new (IdentityMapOfStringL$StringL()).from(["text", print_cgp.PentagonData.msgTORInfo(dart.str(this.g.glucFromData(dart.dsend(cgp, '_get', ["low"]))) + " " + dart.str(unit), dart.str(this.g.glucFromData(dart.dsend(cgp, '_get', ["high"]))) + " " + dart.str(unit))])]), JSArrayOfMapLOfStringL$StringL().of([new (IdentityMapOfStringL$StringL()).from(["text", print_cgp.PentagonData.msgCV(this.g.fmtNumber(numL().as(dart.dsend(cgp, '_get', ["vark"]))))]), new (IdentityMapOfStringL$StringL()).from(["text", print_cgp.PentagonData.msgCVInfo])]), JSArrayOfMapLOfStringL$StringL().of([new (IdentityMapOfStringL$StringL()).from(["text", print_cgp.PentagonData.msgHYPO(unit, this.g.glucFromData(dart.dsend(cgp, '_get', ["hypo"])))]), new (IdentityMapOfStringL$StringL()).from(["text", print_cgp.PentagonData.msgHYPOInfo(dart.str(this.g.glucFromData(dart.dsend(cgp, '_get', ["low"]))) + " " + dart.str(unit))])]), JSArrayOfMapLOfStringL$StringL().of([new (IdentityMapOfStringL$StringL()).from(["text", print_cgp.PentagonData.msgHYPER(unit, this.g.glucFromData(dart.dsend(cgp, '_get', ["hyper"])))]), new (IdentityMapOfStringL$StringL()).from(["text", print_cgp.PentagonData.msgHYPERInfo(dart.str(this.g.glucFromData(dart.dsend(cgp, '_get', ["high"]))) + " " + dart.str(unit))])]), JSArrayOfMapLOfStringL$StringL().of([new (IdentityMapOfStringL$StringL()).from(["text", print_cgp.PentagonData.msgMEAN(unit, this.g.glucFromData(dart.dsend(cgp, '_get', ["mean"])))]), new (IdentityMapOfStringL$StringL()).from(["text", print_cgp.PentagonData.msgMEANInfo(this.hba1c(core.double.tryParse(this.g.glucFromData(dart.dsend(cgp, '_get', ["mean"])))))])]), JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$ObjectL()).from(["margin", JSArrayOfdoubleL().of([this.cm(0), this.cm(0.5), this.cm(0), this.cm(0)]), "text", print_cgp.PentagonData.msgPGR]), new (IdentityMapOfStringL$ObjectL()).from(["margin", JSArrayOfdoubleL().of([this.cm(0), this.cm(0.5), this.cm(0), this.cm(0)]), "text", print_cgp.PentagonData.msgPGRInfo])]), JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$ObjectL()).from(["text", print_cgp.PentagonData.msgPGR02, "bold", pgr != null && dart.notNull(pgr) < 2.1]), new (IdentityMapOfStringL$ObjectL()).from(["text", print_cgp.PentagonData.msgPGR02Info, "bold", pgr != null && dart.notNull(pgr) < 2.1])]), JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$ObjectL()).from(["text", print_cgp.PentagonData.msgPGR23, "bold", pgr != null && dart.notNull(pgr) >= 2.1 && dart.notNull(pgr) < 3.1]), new (IdentityMapOfStringL$ObjectL()).from(["text", print_cgp.PentagonData.msgPGR23Info, "bold", pgr != null && dart.notNull(pgr) >= 2.1 && dart.notNull(pgr) < 3.1])]), JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$ObjectL()).from(["text", print_cgp.PentagonData.msgPGR34, "bold", pgr != null && dart.notNull(pgr) >= 3.1 && dart.notNull(pgr) < 4.1]), new (IdentityMapOfStringL$ObjectL()).from(["text", print_cgp.PentagonData.msgPGR34Info, "bold", pgr != null && dart.notNull(pgr) >= 3.1 && dart.notNull(pgr) < 4.1])]), JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$ObjectL()).from(["text", print_cgp.PentagonData.msgPGR45, "bold", pgr != null && dart.notNull(pgr) >= 4.1 && dart.notNull(pgr) < 4.6]), new (IdentityMapOfStringL$ObjectL()).from(["text", print_cgp.PentagonData.msgPGR45Info, "bold", pgr != null && dart.notNull(pgr) >= 4.1 && dart.notNull(pgr) < 4.6])]), JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$ObjectL()).from(["text", print_cgp.PentagonData.msgPGR5, "bold", pgr != null && dart.notNull(pgr) >= 4.6]), new (IdentityMapOfStringL$ObjectL()).from(["text", print_cgp.PentagonData.msgPGR5Info, "bold", pgr != null && dart.notNull(pgr) >= 4.6])])])])]);
    }
    [_calcAUC](data, low, high) {
      let hyperAUC = 0.0;
      let hypoAUC = 0.0;
      if (DayDataL().is(data)) {
        return this[_calcAUCForDay](data, low, high);
      } else if (ListLOfDayDataL().is(data)) {
        for (let day of data) {
          let auc = this[_calcAUCForDay](day, low, high);
          hyperAUC = hyperAUC + dart.notNull(core.num.as(dart.dsend(auc, '_get', ["hyper"])));
          hypoAUC = hypoAUC + dart.notNull(core.num.as(dart.dsend(auc, '_get', ["hypo"])));
        }
        hyperAUC = hyperAUC / dart.notNull(data[$length]);
        hypoAUC = hypoAUC / dart.notNull(data[$length]);
      }
      return new (IdentityMapOfStringL$doubleL()).from(["hyper", hyperAUC, "hypo", hypoAUC]);
    }
    [_calcAUCForDay](day, low, high) {
      let hyperTime = 0.0;
      let hyper = 0.0;
      let hypoTime = 0.0;
      let hypo = 0.0;
      for (let entry of day.entries) {
        if (dart.test(entry.isGap)) continue;
        if (dart.notNull(entry.gluc) >= dart.notNull(high)) {
          hyper = hyper + dart.notNull(entry.gluc) * 5;
          hyperTime = hyperTime + 5;
        }
        if (dart.notNull(entry.gluc) <= dart.notNull(low)) {
          hypo = hypo + (70 - dart.notNull(entry.gluc)) * 5;
          hypoTime = hypoTime + 5;
        }
      }
      hyper = math.sqrt(hyper * hyper + hyperTime * hyperTime) / 1000;
      hypo = math.sqrt(hypo * hypo + hypoTime * hypoTime) / 1000;
      return new (IdentityMapOfStringL$doubleL()).from(["hyper", hyper, "hypo", hypo]);
    }
    calcCGP(dayData, scale, xm, ym) {
      let t28;
      let cgp = new print_cgp.PentagonData.new(this.g, this.g.getGlucInfo(), dart.bind(this, 'cm'), dart.bind(this, 'fs'), {xm: xm, ym: ym, scale: scale});
      t28 = cgp;
      t28.ym = dart.notNull(t28.ym) + dart.notNull(cgp.axisLength) * 1.1 * dart.notNull(cgp.scale);
      cgp.paintPentagon(1.0, this.lw, {colLine: this.colCGPLine});
      cgp.paintAxis(this.lw, {colLine: this.colValue});
      let low = globals.Globals.stdLow;
      let high = globals.Globals.stdHigh;
      if (!dart.test(this.g.ppStandardLimits) && !dart.test(this.g.ppCGPAlwaysStandardLimits)) {
        low = this.repData.status.settings.thresholds.bgTargetBottom;
        high = this.repData.status.settings.thresholds.bgTargetTop;
      }
      let areaHealthy = cgp.paintValues(JSArrayOfdoubleL().of([0.0, 16.7, 0.0, 0.0, 90.0]), this.lw, {colLine: this.colCGPHealthyLine, colFill: this.colCGPHealthyFill, opacity: 0.4, showLimitBreaks: false});
      let data = this.repData.data;
      let totalDay = new json_data.DayData.new(null, new json_data.ProfileGlucData.new(new json_data.ProfileStoreData.new("Intern")));
      totalDay.entries[$addAll](data.entries);
      totalDay.init();
      let avgGluc = 0.0;
      let varK = 0.0;
      let countValid = data.countValid;
      let countTiR = data.entries[$where](dart.fn(entry => !dart.test(entry.isGlucInvalid) && dart.notNull(entry.gluc) >= dart.notNull(low) && dart.notNull(entry.gluc) <= dart.notNull(high), EntryDataLToboolL()))[$length];
      let countAll = data.entries[$length];
      if (DayDataL().is(dayData)) {
        avgGluc = dayData.avgGluc;
        varK = dayData.varK;
        countValid = dayData.entryCountValid;
        countTiR = dayData.entries[$where](dart.fn(entry => !dart.test(entry.isGlucInvalid) && dart.notNull(entry.gluc) >= dart.notNull(low) && dart.notNull(entry.gluc) <= dart.notNull(high), EntryDataLToboolL()))[$length];
        countAll = dayData.entries[$length];
      } else if (ListLOfDayDataL().is(dayData)) {
        countValid = 0;
        countTiR = 0;
        for (let day of dayData) {
          countTiR = dart.notNull(countTiR) + dart.notNull(day.entries[$where](dart.fn(entry => !dart.test(entry.isGlucInvalid) && dart.notNull(entry.gluc) >= dart.notNull(low) && dart.notNull(entry.gluc) <= dart.notNull(high), EntryDataLToboolL()))[$length]);
          for (let entry of day.entries) {
            if (!dart.test(entry.isGlucInvalid)) {
              avgGluc = dart.notNull(avgGluc) + dart.notNull(entry.gluc);
              countValid = dart.notNull(countValid) + 1;
            }
          }
        }
        if (dart.notNull(countValid) > 0) {
          avgGluc = dart.notNull(avgGluc) / dart.notNull(countValid);
          let varianz = 0.0;
          for (let day of dayData) {
            for (let entry of day.entries) {
              if (!dart.test(entry.isGlucInvalid)) varianz = varianz + math.pow(dart.notNull(entry.gluc) - dart.notNull(avgGluc), 2);
            }
          }
          varianz = varianz / dart.notNull(countValid);
          if (dart.notNull(avgGluc) > 0) varK = math.sqrt(varianz) / dart.notNull(avgGluc) * 100;
        }
      }
      if (dart.notNull(countValid) > 0 && dart.notNull(areaHealthy) > 0) {
        let tor = 1440 - dart.notNull(countTiR) / dart.notNull(countValid) * 1440;
        let auc = this[_calcAUC](dayData, low, high);
        let hyperAUC = doubleL().as(dart.dsend(auc, '_get', ["hyper"]));
        let hypoAUC = doubleL().as(dart.dsend(auc, '_get', ["hypo"]));
        let areaPatient = cgp.paintValues(JSArrayOfdoubleL().of([tor, varK, hypoAUC, hyperAUC, avgGluc]), this.lw, {colLine: this.colCGPPatientLine, colFill: this.colCGPPatientFill, opacity: 0.4});
        let pgr = dart.notNull(areaPatient) / dart.notNull(areaHealthy);
        cgp.outputText[$add](new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(dart.notNull(cgp.xm) - 2.5), "y", this.cm(dart.notNull(cgp.ym) + dart.notNull(cgp.axisLength) * dart.notNull(cgp.scale) * 0.9)]), "columns", JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$ObjectL()).from(["width", this.cm(5.0), "text", dart.str(print_cgp.PentagonData.msgPGR) + " = " + dart.str(this.g.fmtNumber(pgr, 1)), "color", this.colCGPPatientLine, "fontSize", this.fs(12 * dart.notNull(cgp.scale)), "alignment", "center"])])]));
        return new (IdentityMapOfStringL$ObjectL()).from(["cgp", cgp, "pgr", pgr, "mean", avgGluc, "hypo", hypoAUC, "hyper", hyperAUC, "tor", tor, "vark", varK, "low", low, "high", high, "countValid", countValid]);
      }
      return new (IdentityMapOfStringL$ObjectL()).from(["cgp", cgp, "pgr", null, "mean", avgGluc, "hypo", null, "hyper", null, "tor", null, "vark", varK, "low", low, "high", high, "countValid", countValid]);
    }
  };
  (print_cgp.PrintCGP.new = function() {
    this[help$] = intl.Intl.message("Dieses Formular zeigt das Comprehensive Glucose Pentagon an, welches die Qualität der \nGlukoseeinstellung in einer schnell zu erfassenden Weise darstellt. Es wird für den ausgewählten Zeitraum angezeigt\nwie lange der Glukosewert im Schnitt während des Tages ausserhalb des Zielbereichs war, wie hoch die Intensität\nder Überzuckerungen und der Unterzuckerungen war, wie hoch der Mittelwert war und wie hoch die Variabilität der\nWerte war.\n\nDiese Grafik kann auch bei @05@ und @08@ ausgegeben werden. \n", {desc: "help for cgp"});
    this[id$2] = "cgp";
    this[idx$] = "10";
    this[_isPortrait] = true;
    this[params$] = JSArrayOfParamInfoL().of([new base_print.ParamInfo.new(0, base_print.BasePrint.msgOrientation, {list: JSArrayOfStringL().of([intl.Intl.message("Hochformat"), intl.Intl.message("Querformat")])})]);
    print_cgp.PrintCGP.__proto__.new.call(this);
    this.footerTextAboveLine = new (IdentityMapOfStringL$ObjectL()).from(["x", 0, "y", 1.2, "fs", 8, "text", dart.str(this.msgSource)]);
    this.init();
  }).prototype = print_cgp.PrintCGP.prototype;
  dart.addTypeTests(print_cgp.PrintCGP);
  dart.addTypeCaches(print_cgp.PrintCGP);
  dart.setMethodSignature(print_cgp.PrintCGP, () => ({
    __proto__: dart.getMethods(print_cgp.PrintCGP.__proto__),
    fillPages: dart.fnType(dart.void, [dart.legacy(core.List$(dart.legacy(base_print.Page)))]),
    getPage: dart.fnType(dart.legacy(base_print.Page), []),
    infoTable: dart.fnType(dart.dynamic, [dart.dynamic, dart.legacy(core.String), dart.legacy(core.double), dart.legacy(core.double), dart.legacy(core.double), dart.legacy(core.double)]),
    [_calcAUC]: dart.fnType(dart.dynamic, [dart.dynamic, dart.legacy(core.int), dart.legacy(core.int)]),
    [_calcAUCForDay]: dart.fnType(dart.dynamic, [dart.legacy(json_data.DayData), dart.legacy(core.int), dart.legacy(core.int)]),
    calcCGP: dart.fnType(dart.dynamic, [dart.dynamic, dart.legacy(core.double), dart.legacy(core.double), dart.legacy(core.double)])
  }));
  dart.setGetterSignature(print_cgp.PrintCGP, () => ({
    __proto__: dart.getGetters(print_cgp.PrintCGP.__proto__),
    title: dart.legacy(core.String),
    subtitle: dart.legacy(core.String),
    estimatePageCount: dart.dynamic
  }));
  dart.setLibraryUri(print_cgp.PrintCGP, L4);
  dart.setFieldSignature(print_cgp.PrintCGP, () => ({
    __proto__: dart.getFields(print_cgp.PrintCGP.__proto__),
    help: dart.fieldType(dart.legacy(core.String)),
    id: dart.fieldType(dart.legacy(core.String)),
    idx: dart.fieldType(dart.legacy(core.String)),
    [_isPortrait]: dart.fieldType(dart.legacy(core.bool)),
    params: dart.fieldType(dart.legacy(core.List$(dart.legacy(base_print.ParamInfo))))
  }));
  var _fill$ = dart.privateName(datepicker_component, "_fill");
  var _shift$ = dart.privateName(datepicker_component, "_shift");
  var key$ = dart.privateName(datepicker_component, "DatepickerEntry.key");
  var title$2 = dart.privateName(datepicker_component, "DatepickerEntry.title");
  datepicker_component.DatepickerEntry = class DatepickerEntry extends core.Object {
    get key() {
      return this[key$];
    }
    set key(value) {
      this[key$] = value;
    }
    get title() {
      return this[title$2];
    }
    set title(value) {
      this[title$2] = value;
    }
    fill(data) {
      let t28;
      data.entryKey = this.key;
      t28 = data;
      dart.dsend(this, _fill$, [t28]);
    }
    shift(date, shift) {
      return date.add({months: -dart.notNull(shift)});
    }
  };
  (datepicker_component.DatepickerEntry.new = function(key, title, _fill, _shift) {
    this[_fill$] = null;
    this[_shift$] = null;
    this[key$] = key;
    this[title$2] = title;
    this[_fill$] = _fill;
    this[_shift$] = _shift;
    ;
  }).prototype = datepicker_component.DatepickerEntry.prototype;
  dart.addTypeTests(datepicker_component.DatepickerEntry);
  dart.addTypeCaches(datepicker_component.DatepickerEntry);
  dart.setMethodSignature(datepicker_component.DatepickerEntry, () => ({
    __proto__: dart.getMethods(datepicker_component.DatepickerEntry.__proto__),
    fill: dart.fnType(dart.dynamic, [dart.legacy(datepicker_component.DatepickerPeriod)]),
    shift: dart.fnType(dart.dynamic, [dart.legacy(date$.Date), dart.legacy(core.int)])
  }));
  dart.setLibraryUri(datepicker_component.DatepickerEntry, L5);
  dart.setFieldSignature(datepicker_component.DatepickerEntry, () => ({
    __proto__: dart.getFields(datepicker_component.DatepickerEntry.__proto__),
    key: dart.fieldType(dart.legacy(core.String)),
    title: dart.fieldType(dart.legacy(core.String)),
    [_fill$]: dart.fieldType(dart.dynamic),
    [_shift$]: dart.fieldType(dart.dynamic)
  }));
  var _dowActiveText = dart.privateName(datepicker_component, "_dowActiveText");
  var _dowActive = dart.privateName(datepicker_component, "_dowActive");
  var _shiftBy = dart.privateName(datepicker_component, "_shiftBy");
  var emptyReason = dart.privateName(datepicker_component, "DatepickerPeriod.emptyReason");
  var fmtDate = dart.privateName(datepicker_component, "DatepickerPeriod.fmtDate");
  var shiftDate = dart.privateName(datepicker_component, "DatepickerPeriod.shiftDate");
  var firstDayOfWeek = dart.privateName(datepicker_component, "DatepickerPeriod.firstDayOfWeek");
  var start = dart.privateName(datepicker_component, "DatepickerPeriod.start");
  var end = dart.privateName(datepicker_component, "DatepickerPeriod.end");
  var entryKey = dart.privateName(datepicker_component, "DatepickerPeriod.entryKey");
  var minDate = dart.privateName(datepicker_component, "DatepickerPeriod.minDate");
  var maxDate = dart.privateName(datepicker_component, "DatepickerPeriod.maxDate");
  var list = dart.privateName(datepicker_component, "DatepickerPeriod.list");
  datepicker_component.DatepickerPeriod = class DatepickerPeriod extends core.Object {
    get emptyReason() {
      return this[emptyReason];
    }
    set emptyReason(value) {
      this[emptyReason] = value;
    }
    get fmtDate() {
      return this[fmtDate];
    }
    set fmtDate(value) {
      this[fmtDate] = value;
    }
    get shiftDate() {
      return this[shiftDate];
    }
    set shiftDate(value) {
      this[shiftDate] = value;
    }
    get firstDayOfWeek() {
      return this[firstDayOfWeek];
    }
    set firstDayOfWeek(value) {
      this[firstDayOfWeek] = value;
    }
    get start() {
      return this[start];
    }
    set start(value) {
      this[start] = value;
    }
    get end() {
      return this[end];
    }
    set end(value) {
      this[end] = value;
    }
    get entryKey() {
      return this[entryKey];
    }
    set entryKey(value) {
      this[entryKey] = value;
    }
    get minDate() {
      return this[minDate];
    }
    set minDate(value) {
      this[minDate] = value;
    }
    get maxDate() {
      return this[maxDate];
    }
    set maxDate(value) {
      this[maxDate] = value;
    }
    get list() {
      return this[list];
    }
    set list(value) {
      this[list] = value;
    }
    get baseDate() {
      switch (this.shiftDate) {
        case 0:
        {
          return date$.Date.today();
        }
        case 1:
        {
          return date$.Date.today().add({days: -1});
        }
        case 2:
        {
          let diff = -(dart.notNull(date$.Date.today().weekday) - dart.notNull(this.firstDayOfWeek) + 1);
          while (diff > 0) {
            diff = diff - 7;
          }
          return date$.Date.today().add({days: diff});
        }
      }
    }
    get dateFormat() {
      return new intl.DateFormat.new(this.fmtDate);
    }
    static monthName(date) {
      return date != null ? datepicker_component.DatepickerPeriod.monthNames[$_get](dart.notNull(date.month) - 1) : "";
    }
    static dowName(date) {
      return date != null ? datepicker_component.DatepickerPeriod.dowNames[$_get](dart.notNull(date.weekday) - 1) : "";
    }
    static monthShortName(date) {
      return date != null ? datepicker_component.DatepickerPeriod.monthShortNames[$_get](dart.notNull(date.month) - 1) : "";
    }
    static dowShortName(date) {
      return date != null ? datepicker_component.DatepickerPeriod.dowShortNames[$_get](dart.notNull(date.weekday) - 1) : "";
    }
    [_shiftBy](ret, months) {
      return new date$.Date.new(ret.year, dart.notNull(ret.month) - dart.notNull(months), ret.day);
    }
    shiftStartBy(months) {
      if (this.entryKey != null && this.entry != null) return DateL().as(this.entry.shift(this.start, months));
      return this[_shiftBy](this.start, months);
    }
    shiftEndBy(months) {
      if (this.entryKey != null && this.entry != null) return DateL().as(this.entry.shift(this.end, months));
      return this[_shiftBy](this.end, months);
    }
    get dayCount() {
      let ret = 0;
      if (this.start != null && this.end != null) {
        ret = dart.notNull(new core.DateTime.new(this.end.year, this.end.month, this.end.day).difference(new core.DateTime.new(this.start.year, this.start.month, this.start.day)).inDays) + 1;
      }
      return ret;
    }
    isDowActive(idx) {
      return dart.notNull(idx) >= 0 && dart.notNull(idx) < dart.notNull(this[_dowActive][$length]) ? this[_dowActive][$_get](idx) : false;
    }
    activateDow(idx, isActive) {
      if (dart.notNull(idx) < 0 || dart.notNull(idx) >= dart.notNull(this[_dowActive][$length])) return;
      this[_dowActive][$_set](idx, isActive);
      this[_dowActiveText] = null;
    }
    get msgPeriodEmpty() {
      return intl.Intl.message("Zeitraum festlegen");
    }
    get display() {
      if (this.entryKey != null) return this.entryTitle;
      if (this.start == null || this.end == null) return this.msgPeriodEmpty;
      if (this.start.compareTo(this.end) === 0) return this.start.format(this.dateFormat);
      return dart.str(this.start.format(this.dateFormat)) + " - " + dart.str(this.end.format(this.dateFormat));
    }
    get dowActiveText() {
      if (this[_dowActiveText] == null) {
        let ret = JSArrayOfStringL().of([]);
        let cnt = 0;
        for (let i = 0; i < dart.notNull(datepicker_component.DatepickerPeriod.dowShortNames[$length]); i = i + 1) {
          let idx = i + dart.notNull(this.firstDayOfWeek) - 1;
          if (idx >= dart.notNull(datepicker_component.DatepickerPeriod.dowShortNames[$length])) idx = idx - dart.notNull(datepicker_component.DatepickerPeriod.dowShortNames[$length]);
          if (dart.test(this.isDowActive(idx))) {
            ret[$add](datepicker_component.DatepickerPeriod.dowShortNames[$_get](idx));
            cnt = cnt + 1;
          }
        }
        this[_dowActiveText] = cnt < dart.notNull(datepicker_component.DatepickerPeriod.dowShortNames[$length]) ? ret[$join](", ") : "";
      }
      return this[_dowActiveText];
    }
    get isEmpty() {
      this.emptyReason = "";
      if ((this.entryKey == null || this.entryKey[$isEmpty]) && this.start == null) return true;
      let beg = this.start;
      while (beg != null && this.end != null && dart.test(beg.isOnOrBefore(this.end))) {
        if (dart.test(this.isDowActive(dart.notNull(beg.weekday) - 1))) return false;
        beg = beg.add({days: 1});
      }
      this.emptyReason = intl.Intl.message("Der Zeitraum enthält keine auswertbaren Tage");
      return true;
    }
    get entryTitle() {
      if (this.list != null) {
        for (let entry of this.list)
          if (entry.key == this.entryKey) return entry.title;
      }
      return "";
    }
    get entry() {
      if (this.list != null) {
        for (let entry of this.list) {
          if (entry.key == this.entryKey) return entry;
        }
      }
      return null;
    }
    parse(date) {
      let t28, t28$, t28$0;
      let ret = null;
      if (date != null && date.length === 8) {
        let y = (t28 = core.int.tryParse(date[$substring](0, 4)), t28 == null ? 0 : t28);
        let m = (t28$ = core.int.tryParse(date[$substring](4, 6)), t28$ == null ? 1 : t28$);
        let d = (t28$0 = core.int.tryParse(date[$substring](6, 8)), t28$0 == null ? 1 : t28$0);
        ret = new date$.Date.new(y, m, d);
      }
      return ret;
    }
    refresh() {
      let item = this.list[$firstWhere](dart.fn(element => element.key == this.entryKey, DatepickerEntryLToboolL()));
      if (item != null) {
        item.fill(this);
      }
    }
    reset(src) {
      let t28, t28$, t28$0;
      try {
        let parts = (t28 = src, t28 == null ? "" : t28)[$split]("|");
        this.start = null;
        this.end = null;
        this.entryKey = null;
        this.firstDayOfWeek = 1;
        if (dart.notNull(parts[$length]) >= 4) {
          this.start = this.parse(parts[$_get](0));
          this.end = this.parse(parts[$_get](1));
          this.entryKey = parts[$_get](2) === "" || parts[$_get](2) === "null" ? null : parts[$_get](2);
          this.firstDayOfWeek = (t28$ = core.int.tryParse(parts[$_get](3)), t28$ == null ? 0 : t28$);
        }
        for (let i = 0; i < 7; i = i + 1) {
          this.activateDow(i, true);
          if (dart.notNull(parts[$length]) >= 5 && i < parts[$_get](4).length) this.activateDow(i, parts[$_get](4)[$_get](i) === "+");
        }
        if (dart.notNull(parts[$length]) >= 5) {
          this.shiftDate = (t28$0 = core.int.tryParse(parts[$_get](5)), t28$0 == null ? 0 : t28$0);
        }
      } catch (e) {
        let ex = dart.getThrown(e);
      }
    }
    toString() {
      let t29, t29$, t29$0, t29$1, t29$2;
      let ret = JSArrayOfStringL().of([]);
      ret[$add](dart.str((t29$ = (t29 = this.start, t29 == null ? null : t29.format(new intl.DateFormat.new("yyyyMMdd"))), t29$ == null ? "" : t29$)));
      ret[$add](dart.str((t29$1 = (t29$0 = this.end, t29$0 == null ? null : t29$0.format(new intl.DateFormat.new("yyyyMMdd"))), t29$1 == null ? "" : t29$1)));
      ret[$add](dart.str((t29$2 = this.entryKey, t29$2 == null ? "" : t29$2)));
      ret[$add](dart.str(this.firstDayOfWeek));
      let dow = "";
      for (let active of this[_dowActive])
        dow = dow + (dart.test(active) ? "+" : "-");
      ret[$add](dow);
      ret[$add](dart.str(this.shiftDate));
      return ret[$join]("|");
    }
  };
  (datepicker_component.DatepickerPeriod.new = function(opts) {
    let src = opts && 'src' in opts ? opts.src : "";
    this[emptyReason] = null;
    this[fmtDate] = "dd.MM.yyyy";
    this[shiftDate] = 0;
    this[firstDayOfWeek] = 1;
    this[start] = null;
    this[end] = null;
    this[entryKey] = null;
    this[minDate] = null;
    this[maxDate] = null;
    this[_dowActiveText] = null;
    this[_dowActive] = JSArrayOfboolL().of([true, true, true, true, true, true, true]);
    this[list] = JSArrayOfDatepickerEntryL().of([]);
    this.reset(src);
  }).prototype = datepicker_component.DatepickerPeriod.prototype;
  dart.addTypeTests(datepicker_component.DatepickerPeriod);
  dart.addTypeCaches(datepicker_component.DatepickerPeriod);
  dart.setMethodSignature(datepicker_component.DatepickerPeriod, () => ({
    __proto__: dart.getMethods(datepicker_component.DatepickerPeriod.__proto__),
    [_shiftBy]: dart.fnType(dart.legacy(date$.Date), [dart.legacy(date$.Date), dart.legacy(core.int)]),
    shiftStartBy: dart.fnType(dart.legacy(date$.Date), [dart.legacy(core.int)]),
    shiftEndBy: dart.fnType(dart.legacy(date$.Date), [dart.legacy(core.int)]),
    isDowActive: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.int)]),
    activateDow: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.bool)]),
    parse: dart.fnType(dart.legacy(date$.Date), [dart.legacy(core.String)]),
    refresh: dart.fnType(dart.void, []),
    reset: dart.fnType(dart.dynamic, [dart.legacy(core.String)]),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setGetterSignature(datepicker_component.DatepickerPeriod, () => ({
    __proto__: dart.getGetters(datepicker_component.DatepickerPeriod.__proto__),
    baseDate: dart.legacy(date$.Date),
    dateFormat: dart.legacy(intl.DateFormat),
    dayCount: dart.legacy(core.int),
    msgPeriodEmpty: dart.legacy(core.String),
    display: dart.legacy(core.String),
    dowActiveText: dart.legacy(core.String),
    isEmpty: dart.legacy(core.bool),
    entryTitle: dart.legacy(core.String),
    entry: dart.legacy(datepicker_component.DatepickerEntry)
  }));
  dart.setLibraryUri(datepicker_component.DatepickerPeriod, L5);
  dart.setFieldSignature(datepicker_component.DatepickerPeriod, () => ({
    __proto__: dart.getFields(datepicker_component.DatepickerPeriod.__proto__),
    emptyReason: dart.fieldType(dart.legacy(core.String)),
    fmtDate: dart.fieldType(dart.legacy(core.String)),
    shiftDate: dart.fieldType(dart.legacy(core.int)),
    firstDayOfWeek: dart.fieldType(dart.legacy(core.int)),
    start: dart.fieldType(dart.legacy(date$.Date)),
    end: dart.fieldType(dart.legacy(date$.Date)),
    entryKey: dart.fieldType(dart.legacy(core.String)),
    minDate: dart.fieldType(dart.legacy(date$.Date)),
    maxDate: dart.fieldType(dart.legacy(date$.Date)),
    [_dowActiveText]: dart.fieldType(dart.legacy(core.String)),
    [_dowActive]: dart.fieldType(dart.legacy(core.List$(dart.legacy(core.bool)))),
    list: dart.fieldType(dart.legacy(core.List$(dart.legacy(datepicker_component.DatepickerEntry))))
  }));
  dart.defineExtensionMethods(datepicker_component.DatepickerPeriod, ['toString']);
  dart.defineLazy(datepicker_component.DatepickerPeriod, {
    /*datepicker_component.DatepickerPeriod.monthNames*/get monthNames() {
      return intl.Intl.message("Januar|Februar|März|April|Mai|Juni|Juli|August|September|Oktober" + "|November|Dezember")[$split]("|");
    },
    set monthNames(_) {},
    /*datepicker_component.DatepickerPeriod.monthShortNames*/get monthShortNames() {
      return intl.Intl.message("Jan|Feb|Mär|Apr|Mai|Jun|Jul|Aug|Sep|Okt|Nov|Dez")[$split]("|");
    },
    set monthShortNames(_) {},
    /*datepicker_component.DatepickerPeriod.dowNames*/get dowNames() {
      return intl.Intl.message("Montag|Dienstag|Mittwoch|Donnerstag|Freitag|Samstag|Sonntag")[$split]("|");
    },
    set dowNames(_) {},
    /*datepicker_component.DatepickerPeriod.dowShortNames*/get dowShortNames() {
      return intl.Intl.message("Mo|Di|Mi|Do|Fr|Sa|So")[$split]("|");
    },
    set dowShortNames(_) {},
    /*datepicker_component.DatepickerPeriod.shiftNames*/get shiftNames() {
      return intl.Intl.message("Bis heute|Bis gestern|Bis Wochenende")[$split]("|");
    },
    set shiftNames(_) {}
  }, true);
  var _period$ = dart.privateName(datepicker_component, "_period");
  var _periodChange = dart.privateName(datepicker_component, "_periodChange");
  var _trigger$ = dart.privateName(datepicker_component, "_trigger");
  var isLocal = dart.privateName(datepicker_component, "DatepickerComponent.isLocal");
  var firstDayOfWeek$ = dart.privateName(datepicker_component, "DatepickerComponent.firstDayOfWeek");
  var showInfo$ = dart.privateName(datepicker_component, "DatepickerComponent.showInfo");
  var showLabel = dart.privateName(datepicker_component, "DatepickerComponent.showLabel");
  var month = dart.privateName(datepicker_component, "DatepickerComponent.month");
  var loadedPeriod = dart.privateName(datepicker_component, "DatepickerComponent.loadedPeriod");
  var isStartValid = dart.privateName(datepicker_component, "DatepickerComponent.isStartValid");
  var isEndValid = dart.privateName(datepicker_component, "DatepickerComponent.isEndValid");
  var msgPeriod = dart.privateName(datepicker_component, "DatepickerComponent.msgPeriod");
  var isDialogOpen = dart.privateName(datepicker_component, "DatepickerComponent.isDialogOpen");
  datepicker_component.DatepickerComponent = class DatepickerComponent extends core.Object {
    get isLocal() {
      return this[isLocal];
    }
    set isLocal(value) {
      this[isLocal] = value;
    }
    get firstDayOfWeek() {
      return this[firstDayOfWeek$];
    }
    set firstDayOfWeek(value) {
      this[firstDayOfWeek$] = value;
    }
    get showInfo() {
      return this[showInfo$];
    }
    set showInfo(value) {
      this[showInfo$] = value;
    }
    get showLabel() {
      return this[showLabel];
    }
    set showLabel(value) {
      this[showLabel] = value;
    }
    get month() {
      return this[month];
    }
    set month(value) {
      this[month] = value;
    }
    get loadedPeriod() {
      return this[loadedPeriod];
    }
    set loadedPeriod(value) {
      this[loadedPeriod] = value;
    }
    get isStartValid() {
      return this[isStartValid];
    }
    set isStartValid(value) {
      this[isStartValid] = value;
    }
    get isEndValid() {
      return this[isEndValid];
    }
    set isEndValid(value) {
      this[isEndValid] = value;
    }
    get msgPeriod() {
      return this[msgPeriod];
    }
    set msgPeriod(value) {
      this[msgPeriod] = value;
    }
    get isDialogOpen() {
      return this[isDialogOpen];
    }
    set isDialogOpen(value) {
      this[isDialogOpen] = value;
    }
    infoClass(cls) {
      return dart.test(this.showInfo) ? dart.str(cls) + " infoarea showinfo" : dart.str(cls) + " infoarea";
    }
    get isMaxMonth() {
      return this.period != null && this.period.maxDate != null && this.month != null && (dart.notNull(this.month.year) > dart.notNull(this.period.maxDate.year) || this.month.year == this.period.maxDate.year && dart.notNull(this.month.month) >= dart.notNull(this.period.maxDate.month));
    }
    get isMinMonth() {
      return this.period != null && this.period.minDate != null && this.month != null && (dart.notNull(this.month.year) < dart.notNull(this.period.minDate.year) || this.month.year == this.period.minDate.year && dart.notNull(this.month.month) <= dart.notNull(this.period.minDate.month));
    }
    get msgStartIncorrect() {
      return intl.Intl.message("Das Startdatum ist nicht korrekt");
    }
    get msgEndIncorrect() {
      return intl.Intl.message("Das Enddatum ist nicht korrekt");
    }
    get period() {
      return this[_period$];
    }
    set period(value) {
      let t29, t29$;
      let temp = DatepickerPeriodL().is(value) ? value : new datepicker_component.DatepickerPeriod.new({src: StringL().as(value)});
      this[_period$] = (t29 = temp, t29 == null ? this[_period$] : t29);
      if (this[_period$].entryKey != null && dart.notNull(this[_period$].list[$length]) > 0) {
        let entry = this[_period$].list[$firstWhere](dart.fn(e => e.key == this[_period$].entryKey, DatepickerEntryLToboolL()));
        t29$ = entry;
        t29$ == null ? null : t29$.fill(this[_period$]);
      }
      this.month = date$.Date.today();
    }
    get periodChange() {
      return this[_periodChange].stream;
    }
    revertData() {
      this.period.reset(this.loadedPeriod);
    }
    get startDate() {
      let t29;
      t29 = this.period.start;
      return t29 == null ? null : t29.format(this.period.dateFormat);
    }
    setMonth(value) {
      if (value != null) this.month = value;
    }
    set startDate(value) {
      let saveDate = this.period.start;
      try {
        this.period.start = date$.Date.parse(value, this.period.dateFormat);
        this.period.entryKey = null;
        this.isStartValid = true;
      } catch (e) {
        let ex = dart.getThrown(e);
        this.period.start = saveDate;
        this.isStartValid = false;
      }
    }
    get endDate() {
      let t30;
      t30 = this.period.end;
      return t30 == null ? null : t30.format(this.period.dateFormat);
    }
    set endDate(value) {
      try {
        this.period.end = date$.Date.parse(value, this.period.dateFormat);
        this.period.entryKey = null;
        this.isEndValid = true;
      } catch (e) {
        let ex = dart.getThrown(e);
        this.isEndValid = false;
      }
    }
    get shiftName() {
      return datepicker_component.DatepickerPeriod.shiftNames[$_get](this.period.shiftDate);
    }
    get periodFloatingLabel() {
      if (this.period.start == null || this.period.end == null) return "";
      return this.msgPeriod;
    }
    get periodLabelMain() {
      if (this.period == null) return "";
      return this.period.display;
    }
    get periodLabelSub() {
      return "(" + dart.str(this.period.dowActiveText) + ")";
    }
    get trigger() {
      return this[_trigger$].stream;
    }
    onClick(type) {
      switch (type) {
        case "loadedperiod":
        {
          this.loadedPeriod = dart.toString(this.period);
          this.isDialogOpen = true;
          break;
        }
        case "close":
        {
          this.revertData();
          this.isDialogOpen = false;
          break;
        }
        case "save":
        {
          this.isDialogOpen = false;
          this.fire("save");
          break;
        }
      }
    }
    onShortcutClick(item) {
      dart.dsend(item, 'fill', [this.period]);
      this.month = this.period.end;
    }
    onShiftClick() {
      let value = dart.notNull(this.period.shiftDate) + 1;
      if (value < 0) value = 0;
      if (value >= dart.notNull(datepicker_component.DatepickerPeriod.shiftNames[$length])) value = 0;
      this.period.shiftDate = value;
      this.period.refresh();
    }
    fire(type) {
      return async.async(dart.void, (function* fire() {
        if (type === "save") this[_periodChange].add(this.period);
        this[_trigger$].add(html.UIEvent.new(type, {detail: 0}));
      }).bind(this));
    }
  };
  (datepicker_component.DatepickerComponent.new = function() {
    this[isLocal] = false;
    this[firstDayOfWeek$] = 1;
    this[showInfo$] = false;
    this[showLabel] = true;
    this[_period$] = null;
    this[month] = null;
    this[_periodChange] = StreamControllerOfDatepickerPeriodL().new();
    this[loadedPeriod] = null;
    this[isStartValid] = true;
    this[isEndValid] = true;
    this[msgPeriod] = intl.Intl.message("Zeitraum");
    this[_trigger$] = StreamControllerOfUIEventL().broadcast({sync: true});
    this[isDialogOpen] = false;
    ;
  }).prototype = datepicker_component.DatepickerComponent.prototype;
  dart.addTypeTests(datepicker_component.DatepickerComponent);
  dart.addTypeCaches(datepicker_component.DatepickerComponent);
  dart.setMethodSignature(datepicker_component.DatepickerComponent, () => ({
    __proto__: dart.getMethods(datepicker_component.DatepickerComponent.__proto__),
    infoClass: dart.fnType(dart.legacy(core.String), [dart.legacy(core.String)]),
    revertData: dart.fnType(dart.dynamic, []),
    setMonth: dart.fnType(dart.void, [dart.legacy(date$.Date)]),
    onClick: dart.fnType(dart.void, [dart.legacy(core.String)]),
    onShortcutClick: dart.fnType(dart.void, [dart.dynamic]),
    onShiftClick: dart.fnType(dart.void, []),
    fire: dart.fnType(dart.void, [dart.legacy(core.String)])
  }));
  dart.setGetterSignature(datepicker_component.DatepickerComponent, () => ({
    __proto__: dart.getGetters(datepicker_component.DatepickerComponent.__proto__),
    isMaxMonth: dart.legacy(core.bool),
    isMinMonth: dart.legacy(core.bool),
    msgStartIncorrect: dart.dynamic,
    msgEndIncorrect: dart.dynamic,
    period: dart.legacy(datepicker_component.DatepickerPeriod),
    periodChange: dart.legacy(async.Stream$(dart.legacy(datepicker_component.DatepickerPeriod))),
    startDate: dart.legacy(core.String),
    endDate: dart.legacy(core.String),
    shiftName: dart.legacy(core.String),
    periodFloatingLabel: dart.legacy(core.String),
    periodLabelMain: dart.legacy(core.String),
    periodLabelSub: dart.legacy(core.String),
    trigger: dart.legacy(async.Stream$(dart.legacy(html.UIEvent)))
  }));
  dart.setSetterSignature(datepicker_component.DatepickerComponent, () => ({
    __proto__: dart.getSetters(datepicker_component.DatepickerComponent.__proto__),
    period: dart.dynamic,
    startDate: dart.legacy(core.String),
    endDate: dart.legacy(core.String)
  }));
  dart.setLibraryUri(datepicker_component.DatepickerComponent, L5);
  dart.setFieldSignature(datepicker_component.DatepickerComponent, () => ({
    __proto__: dart.getFields(datepicker_component.DatepickerComponent.__proto__),
    isLocal: dart.fieldType(dart.legacy(core.bool)),
    firstDayOfWeek: dart.fieldType(dart.legacy(core.int)),
    showInfo: dart.fieldType(dart.legacy(core.bool)),
    showLabel: dart.fieldType(dart.legacy(core.bool)),
    [_period$]: dart.fieldType(dart.legacy(datepicker_component.DatepickerPeriod)),
    month: dart.fieldType(dart.legacy(date$.Date)),
    [_periodChange]: dart.finalFieldType(dart.legacy(async.StreamController$(dart.legacy(datepicker_component.DatepickerPeriod)))),
    loadedPeriod: dart.fieldType(dart.legacy(core.String)),
    isStartValid: dart.fieldType(dart.legacy(core.bool)),
    isEndValid: dart.fieldType(dart.legacy(core.bool)),
    msgPeriod: dart.fieldType(dart.legacy(core.String)),
    [_trigger$]: dart.finalFieldType(dart.legacy(async.StreamController$(dart.legacy(html.UIEvent)))),
    isDialogOpen: dart.fieldType(dart.legacy(core.bool))
  }));
  var _period$0 = dart.privateName(month_component, "_period");
  var _forMonth$ = dart.privateName(month_component, "_forMonth");
  month_component._Day = class _Day extends core.Object {
    get name() {
      return datepicker_component.DatepickerPeriod.dowName(this.date);
    }
    get shortName() {
      return datepicker_component.DatepickerPeriod.dowShortName(this.date);
    }
    get day() {
      return this.date.day;
    }
    get isRaised() {
      return this[_period$0].start != null && this[_period$0].end != null && dart.test(this.date.isOnOrAfter(this[_period$0].start)) && dart.test(this.date.isOnOrBefore(this[_period$0].end));
    }
    get isEnabled() {
      if (this.date.month != this[_forMonth$]) return false;
      if (this[_period$0].maxDate != null && dart.test(this.date.isAfter(this[_period$0].maxDate))) return false;
      if (this[_period$0].minDate != null && dart.test(this.date.isBefore(this[_period$0].minDate))) return false;
      if (!dart.test(this[_period$0].isDowActive(dart.notNull(this.date.weekday) - 1))) return false;
      return true;
    }
  };
  (month_component._Day.new = function(_period, d, _forMonth) {
    this.date = null;
    this[_period$0] = _period;
    this[_forMonth$] = _forMonth;
    this.date = new date$.Date.new(intL().as(dart.dload(d, 'year')), intL().as(dart.dload(d, 'month')), intL().as(dart.dload(d, 'day')));
  }).prototype = month_component._Day.prototype;
  dart.addTypeTests(month_component._Day);
  dart.addTypeCaches(month_component._Day);
  dart.setGetterSignature(month_component._Day, () => ({
    __proto__: dart.getGetters(month_component._Day.__proto__),
    name: dart.dynamic,
    shortName: dart.dynamic,
    day: dart.legacy(core.int),
    isRaised: dart.legacy(core.bool),
    isEnabled: dart.legacy(core.bool)
  }));
  dart.setLibraryUri(month_component._Day, L6);
  dart.setFieldSignature(month_component._Day, () => ({
    __proto__: dart.getFields(month_component._Day.__proto__),
    date: dart.fieldType(dart.legacy(date$.Date)),
    [_period$0]: dart.fieldType(dart.legacy(datepicker_component.DatepickerPeriod)),
    [_forMonth$]: dart.fieldType(dart.legacy(core.int))
  }));
  var _date$ = dart.privateName(month_component, "_date");
  month_component._Week = class _Week extends core.Object {};
  (month_component._Week.new = function(_period, _date, _forMonth) {
    this.days = JSArrayOf_DayL().of([]);
    this[_period$0] = _period;
    this[_date$] = _date;
    this[_forMonth$] = _forMonth;
    let d = new date$.Date.new(this[_date$].year, this[_date$].month, this[_date$].day);
    for (let i = 0; i < 7; i = i + 1) {
      this.days[$add](new month_component._Day.new(this[_period$0], d, this[_forMonth$]));
      d = d.add({days: 1});
    }
  }).prototype = month_component._Week.prototype;
  dart.addTypeTests(month_component._Week);
  dart.addTypeCaches(month_component._Week);
  dart.setLibraryUri(month_component._Week, L6);
  dart.setFieldSignature(month_component._Week, () => ({
    __proto__: dart.getFields(month_component._Week.__proto__),
    [_date$]: dart.fieldType(dart.legacy(date$.Date)),
    [_period$0]: dart.fieldType(dart.legacy(datepicker_component.DatepickerPeriod)),
    [_forMonth$]: dart.fieldType(dart.legacy(core.int)),
    days: dart.fieldType(dart.legacy(core.List$(dart.legacy(month_component._Day))))
  }));
  month_component._Month = class _Month extends core.Object {};
  (month_component._Month.new = function(_period, date) {
    this.date = null;
    this.weeks = JSArrayOf_WeekL().of([]);
    this[_period$0] = _period;
    date = new date$.Date.new(date.year, date.month, 1);
    let d = new date$.Date.new(date.year, date.month, 1);
    let diff = dart.notNull(this[_period$0].firstDayOfWeek) - dart.notNull(d.weekday);
    d = d.add({days: diff <= 0 ? diff : diff - 7});
    do {
      this.weeks[$add](new month_component._Week.new(this[_period$0], d, date.month));
      d = d.add({days: 7});
    } while (d.month == date.month);
  }).prototype = month_component._Month.prototype;
  dart.addTypeTests(month_component._Month);
  dart.addTypeCaches(month_component._Month);
  dart.setLibraryUri(month_component._Month, L6);
  dart.setFieldSignature(month_component._Month, () => ({
    __proto__: dart.getFields(month_component._Month.__proto__),
    date: dart.fieldType(dart.legacy(date$.Date)),
    [_period$0]: dart.fieldType(dart.legacy(datepicker_component.DatepickerPeriod)),
    weeks: dart.fieldType(dart.legacy(core.List$(dart.legacy(month_component._Week))))
  }));
  var _trigger$0 = dart.privateName(month_component, "_trigger");
  var month$ = dart.privateName(month_component, "MonthComponent.month");
  var isLocal$ = dart.privateName(month_component, "MonthComponent.isLocal");
  month_component.MonthComponent = class MonthComponent extends core.Object {
    get month() {
      return this[month$];
    }
    set month(value) {
      this[month$] = value;
    }
    get isLocal() {
      return this[isLocal$];
    }
    set isLocal(value) {
      this[isLocal$] = value;
    }
    monthName(date) {
      return datepicker_component.DatepickerPeriod.monthName(DateL().as(date));
    }
    dowmark(idx) {
      return dart.test(this.period.isDowActive(intL().as(idx))) ? "done" : "close";
    }
    dayclass(day) {
      return this.period.entryKey != null ? "key" : "";
    }
    get firstDayOfWeek() {
      return this.period.firstDayOfWeek;
    }
    set firstDayOfWeek(value) {
      while (dart.dtest(dart.dsend(value, '>', [7])))
        value = dart.dsend(value, '-', [7]);
      while (dart.dtest(dart.dsend(value, '<', [1])))
        value = dart.dsend(value, '+', [7]);
      this.period.firstDayOfWeek = intL().as(value);
      if (this[_period$0] != null && this[_date$] != null) this.month = new month_component._Month.new(this[_period$0], this[_date$]);
    }
    get date() {
      return this[_date$];
    }
    get period() {
      return this[_period$0];
    }
    set date(value) {
      this[_date$] = DateL().as(value);
      if (this[_period$0] != null && this[_date$] != null) this.month = new month_component._Month.new(this[_period$0], this[_date$]);
    }
    set period(value) {
      this[_period$0] = DatepickerPeriodL().as(value);
      if (this[_period$0] != null && this[_date$] != null) this.month = new month_component._Month.new(this[_period$0], this[_date$]);
    }
    get trigger() {
      return this[_trigger$0].stream;
    }
    fire(type) {
      return async.async(dart.void, (function* fire() {
        this[_trigger$0].add(html.UIEvent.new(type, {detail: 0}));
      }).bind(this));
    }
    weekdayClicked(dow) {
      this.firstDayOfWeek = dow.date.weekday;
      this.period.refresh();
    }
    dayClicked(day) {
      if (this.period.start != null && dart.test(day.date.isBefore(this.period.start))) {
        this.period.start = day.date;
        this.period.entryKey = null;
      } else if (this.period.end != null && dart.test(day.date.isAfter(this.period.end))) {
        this.period.end = day.date;
        this.period.entryKey = null;
      } else {
        this.period.start = day.date;
        this.period.end = day.date;
        this.period.entryKey = null;
      }
    }
  };
  (month_component.MonthComponent.new = function() {
    this[month$] = null;
    this[isLocal$] = false;
    this[_period$0] = null;
    this[_date$] = null;
    this[_trigger$0] = StreamControllerOfUIEventL().broadcast({sync: true});
    ;
  }).prototype = month_component.MonthComponent.prototype;
  dart.addTypeTests(month_component.MonthComponent);
  dart.addTypeCaches(month_component.MonthComponent);
  dart.setMethodSignature(month_component.MonthComponent, () => ({
    __proto__: dart.getMethods(month_component.MonthComponent.__proto__),
    monthName: dart.fnType(dart.dynamic, [dart.dynamic]),
    dowmark: dart.fnType(dart.dynamic, [dart.dynamic]),
    dayclass: dart.fnType(dart.dynamic, [dart.legacy(month_component._Day)]),
    fire: dart.fnType(dart.void, [dart.legacy(core.String)]),
    weekdayClicked: dart.fnType(dart.dynamic, [dart.legacy(month_component._Day)]),
    dayClicked: dart.fnType(dart.dynamic, [dart.legacy(month_component._Day)])
  }));
  dart.setGetterSignature(month_component.MonthComponent, () => ({
    __proto__: dart.getGetters(month_component.MonthComponent.__proto__),
    firstDayOfWeek: dart.dynamic,
    date: dart.legacy(date$.Date),
    period: dart.legacy(datepicker_component.DatepickerPeriod),
    trigger: dart.legacy(async.Stream$(dart.legacy(html.UIEvent)))
  }));
  dart.setSetterSignature(month_component.MonthComponent, () => ({
    __proto__: dart.getSetters(month_component.MonthComponent.__proto__),
    firstDayOfWeek: dart.dynamic,
    date: dart.dynamic,
    period: dart.dynamic
  }));
  dart.setLibraryUri(month_component.MonthComponent, L6);
  dart.setFieldSignature(month_component.MonthComponent, () => ({
    __proto__: dart.getFields(month_component.MonthComponent.__proto__),
    month: dart.fieldType(dart.legacy(month_component._Month)),
    isLocal: dart.fieldType(dart.legacy(core.bool)),
    [_period$0]: dart.fieldType(dart.legacy(datepicker_component.DatepickerPeriod)),
    [_date$]: dart.fieldType(dart.legacy(date$.Date)),
    [_trigger$0]: dart.finalFieldType(dart.legacy(async.StreamController$(dart.legacy(html.UIEvent))))
  }));
  var showSMB = dart.privateName(base_daily, "BaseDaily.showSMB");
  var showSMBAtGluc = dart.privateName(base_daily, "BaseDaily.showSMBAtGluc");
  var graphHeight = dart.privateName(base_daily, "BaseDaily.graphHeight");
  base_daily.BaseDaily = class BaseDaily extends base_print.BasePrint {
    get showSMB() {
      return this[showSMB];
    }
    set showSMB(value) {
      this[showSMB] = value;
    }
    get showSMBAtGluc() {
      return this[showSMBAtGluc];
    }
    set showSMBAtGluc(value) {
      this[showSMBAtGluc] = value;
    }
    get graphHeight() {
      return this[graphHeight];
    }
    set graphHeight(value) {
      this[graphHeight] = value;
    }
    static get msgDaily1() {
      return intl.Intl.message("SMB Werte anzeigen");
    }
    static get msgDaily2() {
      return intl.Intl.message("SMB an der Kurve platzieren");
    }
    smbY(value) {
      return dart.notNull(this.graphHeight) / 50 * dart.notNull(value);
    }
    paintSMB(insulin, x, y, cvs) {
      let h = dart.notNull(this.smbY(insulin)) * 2;
      cvs[$add](new (IdentityMapOfStringL$ObjectL()).from(["type", "polyline", "closePath", true, "_lineColor", "#000000", "color", this.colBolus, "lineWidth", this.cm(0), "points", JSArrayOfMapLOfStringL$doubleL().of([new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(x), "y", this.cm(y)]), new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(dart.notNull(x) + 0.1), "y", this.cm(dart.notNull(y) - h - 0.1)]), new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(dart.notNull(x) - 0.1), "y", this.cm(dart.notNull(y) - h - 0.1)])])]));
    }
  };
  (base_daily.BaseDaily.new = function() {
    this[showSMB] = null;
    this[showSMBAtGluc] = null;
    this[graphHeight] = null;
    base_daily.BaseDaily.__proto__.new.call(this);
    ;
  }).prototype = base_daily.BaseDaily.prototype;
  dart.addTypeTests(base_daily.BaseDaily);
  dart.addTypeCaches(base_daily.BaseDaily);
  dart.setMethodSignature(base_daily.BaseDaily, () => ({
    __proto__: dart.getMethods(base_daily.BaseDaily.__proto__),
    smbY: dart.fnType(dart.legacy(core.double), [dart.legacy(core.double)]),
    paintSMB: dart.fnType(dart.dynamic, [dart.legacy(core.double), dart.legacy(core.double), dart.legacy(core.double), dart.legacy(core.List)])
  }));
  dart.setLibraryUri(base_daily.BaseDaily, L7);
  dart.setFieldSignature(base_daily.BaseDaily, () => ({
    __proto__: dart.getFields(base_daily.BaseDaily.__proto__),
    showSMB: dart.fieldType(dart.legacy(core.bool)),
    showSMBAtGluc: dart.fieldType(dart.legacy(core.bool)),
    graphHeight: dart.fieldType(dart.legacy(core.double))
  }));
  var _name$1 = dart.privateName(signin_component, "_name");
  var C14;
  var C15;
  var C16;
  var C17;
  var C18;
  var C19;
  signin_component.SigninStatus = class SigninStatus extends core.Object {
    toString() {
      return this[_name$1];
    }
  };
  (signin_component.SigninStatus.new = function(index, _name) {
    this.index = index;
    this[_name$1] = _name;
    ;
  }).prototype = signin_component.SigninStatus.prototype;
  dart.addTypeTests(signin_component.SigninStatus);
  dart.addTypeCaches(signin_component.SigninStatus);
  dart.setMethodSignature(signin_component.SigninStatus, () => ({
    __proto__: dart.getMethods(signin_component.SigninStatus.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(signin_component.SigninStatus, L8);
  dart.setFieldSignature(signin_component.SigninStatus, () => ({
    __proto__: dart.getFields(signin_component.SigninStatus.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$1]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(signin_component.SigninStatus, ['toString']);
  signin_component.SigninStatus.requestAuthorization = C14 || CT.C14;
  signin_component.SigninStatus.signinOk = C15 || CT.C15;
  signin_component.SigninStatus.signedOut = C16 || CT.C16;
  signin_component.SigninStatus.error = C17 || CT.C17;
  signin_component.SigninStatus.message = C18 || CT.C18;
  signin_component.SigninStatus.values = C19 || CT.C19;
  var message$ = dart.privateName(signin_component, "SigninEvent.message");
  var status$4 = dart.privateName(signin_component, "SigninEvent.status");
  signin_component.SigninEvent = class SigninEvent extends core.Object {
    get message() {
      return this[message$];
    }
    set message(value) {
      this[message$] = value;
    }
    get status() {
      return this[status$4];
    }
    set status(value) {
      this[status$4] = value;
    }
  };
  (signin_component.SigninEvent.new = function(status, message) {
    this[status$4] = status;
    this[message$] = message;
    ;
  }).prototype = signin_component.SigninEvent.prototype;
  dart.addTypeTests(signin_component.SigninEvent);
  dart.addTypeCaches(signin_component.SigninEvent);
  dart.setLibraryUri(signin_component.SigninEvent, L8);
  dart.setFieldSignature(signin_component.SigninEvent, () => ({
    __proto__: dart.getFields(signin_component.SigninEvent.__proto__),
    message: dart.fieldType(dart.legacy(core.String)),
    status: dart.fieldType(dart.legacy(signin_component.SigninStatus))
  }));
  var _isAuthorizedChange = dart.privateName(signin_component, "_isAuthorizedChange");
  var _identifier = dart.privateName(signin_component, "_identifier");
  var _signinResult = dart.privateName(signin_component, "_signinResult");
  var _onevent = dart.privateName(signin_component, "_onevent");
  var isBusy = dart.privateName(signin_component, "SigninComponent.isBusy");
  var isVisible = dart.privateName(signin_component, "SigninComponent.isVisible");
  var raised = dart.privateName(signin_component, "SigninComponent.raised");
  var autoStart = dart.privateName(signin_component, "SigninComponent.autoStart");
  var showFab = dart.privateName(signin_component, "SigninComponent.showFab");
  var showMenuButton = dart.privateName(signin_component, "SigninComponent.showMenuButton");
  var clientId = dart.privateName(signin_component, "SigninComponent.clientId");
  var msgConnected = dart.privateName(signin_component, "SigninComponent.msgConnected");
  var msgDisconnected = dart.privateName(signin_component, "SigninComponent.msgDisconnected");
  var msgBusy = dart.privateName(signin_component, "SigninComponent.msgBusy");
  var msgTitleAuthorized = dart.privateName(signin_component, "SigninComponent.msgTitleAuthorized");
  var msgTitleNotAuthorized = dart.privateName(signin_component, "SigninComponent.msgTitleNotAuthorized");
  var msgMenuConnected = dart.privateName(signin_component, "SigninComponent.msgMenuConnected");
  var msgMenuNotConnected = dart.privateName(signin_component, "SigninComponent.msgMenuNotConnected");
  var isAuthorized = dart.privateName(signin_component, "SigninComponent.isAuthorized");
  var scopes = dart.privateName(signin_component, "SigninComponent.scopes");
  var client = dart.privateName(signin_component, "SigninComponent.client");
  signin_component.SigninComponent = class SigninComponent extends core.Object {
    get isBusy() {
      return this[isBusy];
    }
    set isBusy(value) {
      this[isBusy] = value;
    }
    get isVisible() {
      return this[isVisible];
    }
    set isVisible(value) {
      this[isVisible] = value;
    }
    get raised() {
      return this[raised];
    }
    set raised(value) {
      this[raised] = value;
    }
    get autoStart() {
      return this[autoStart];
    }
    set autoStart(value) {
      this[autoStart] = value;
    }
    get showFab() {
      return this[showFab];
    }
    set showFab(value) {
      this[showFab] = value;
    }
    get showMenuButton() {
      return this[showMenuButton];
    }
    set showMenuButton(value) {
      this[showMenuButton] = value;
    }
    get clientId() {
      return this[clientId];
    }
    set clientId(value) {
      this[clientId] = value;
    }
    get msgConnected() {
      return this[msgConnected];
    }
    set msgConnected(value) {
      this[msgConnected] = value;
    }
    get msgDisconnected() {
      return this[msgDisconnected];
    }
    set msgDisconnected(value) {
      this[msgDisconnected] = value;
    }
    get msgBusy() {
      return this[msgBusy];
    }
    set msgBusy(value) {
      this[msgBusy] = value;
    }
    get msgTitleAuthorized() {
      return this[msgTitleAuthorized];
    }
    set msgTitleAuthorized(value) {
      this[msgTitleAuthorized] = value;
    }
    get msgTitleNotAuthorized() {
      return this[msgTitleNotAuthorized];
    }
    set msgTitleNotAuthorized(value) {
      this[msgTitleNotAuthorized] = value;
    }
    get msgMenuConnected() {
      return this[msgMenuConnected];
    }
    set msgMenuConnected(value) {
      this[msgMenuConnected] = value;
    }
    get msgMenuNotConnected() {
      return this[msgMenuNotConnected];
    }
    set msgMenuNotConnected(value) {
      this[msgMenuNotConnected] = value;
    }
    get isAuthorized() {
      return this[isAuthorized];
    }
    set isAuthorized(value) {
      this[isAuthorized] = value;
    }
    get scopes() {
      return this[scopes];
    }
    set scopes(value) {
      this[scopes] = value;
    }
    get client() {
      return this[client];
    }
    set client(value) {
      this[client] = value;
    }
    authorize(value) {
      this.isAuthorized = boolL().as(value);
      this[_isAuthorizedChange].add(boolL().as(value));
    }
    get isAuthorizedChange() {
      return this[_isAuthorizedChange].stream;
    }
    get identifier() {
      let t31;
      t31 = this[_identifier];
      return t31 == null ? new auth.ClientId.new(dart.str(this.clientId) + ".apps.googleusercontent.com", null) : t31;
    }
    get signinResult() {
      return this[_signinResult].stream;
    }
    static create(clientId) {
      let ret = new signin_component.SigninComponent.new();
      ret.clientId = clientId;
      return ret;
    }
    doLogout() {
      FutureOfNullN().delayed(new core.Duration.new({milliseconds: 1}), dart.fn(() => {
        let t31, t31$, t31$0;
        if ((t31$0 = (t31$ = (t31 = this.client, t31 == null ? null : t31.credentials), t31$ == null ? null : t31$.accessToken), t31$0 == null ? null : t31$0.data) != null) {
          globals.Globals.new().request("https://accounts.google.com/o/oauth2/revoke", {method: "post", body: "{\"token\": \"" + dart.str(this.client.credentials.accessToken.data) + "\"}"}).then(core.Null, dart.fn(content => {
            let response = convert.json.decode(content);
            if (dart.dsend(response, '_get', ["error"]) == null) {
              this.authorize(false);
              this.fire(signin_component.SigninStatus.signedOut);
            } else {
              globals.Globals.new().show(StringL().as(dart.dsend(response, '_get', ["error"])));
            }
          }, StringLToNullN()));
        } else {
          this.authorize(false);
          this.fire(signin_component.SigninStatus.signedOut);
        }
      }, VoidToNullN()));
    }
    btnLoginClick() {
      if (dart.test(this.isAuthorized)) {
        this.doLogout();
      } else {
        this.doLogin();
      }
    }
    doLogin() {
      return async.async(dart.void, (function* doLogin() {
        this.authorize(false);
        this.isBusy = true;
        this.fire(signin_component.SigninStatus.requestAuthorization);
        this.authorizedClient(this.identifier, this.scopes).then(core.Null, dart.fn(client => {
          this.authorize(true);
          this.client = client;
          this[_signinResult].add(client);
          this.isBusy = false;
          this.fire(signin_component.SigninStatus.signinOk);
        }, AutoRefreshingAuthClientLToNullN())).catchError(dart.fn(error => {
          this.isBusy = false;
          if (UserConsentExceptionL().is(error)) {
            this[_signinResult].add(null);
            this.authorize(false);
            this.fire(signin_component.SigninStatus.error, "UserConsentException");
            return async.Future.error(error);
          } else {
            this[_signinResult].add(null);
            this.fire(signin_component.SigninStatus.error, dart.toString(error));
            return async.Future.error(error);
          }
        }, dynamicToFutureL()));
      }).bind(this));
    }
    ngAfterViewInit() {
      if (dart.test(this.autoStart) || dart.test(this.isAuthorized)) FutureOfvoid().delayed(new core.Duration.new({milliseconds: 10}), dart.bind(this, 'doLogin'));
    }
    authorizedClient(id, scopes) {
      return async.async(AutoRefreshingAuthClientL(), (function* authorizedClient() {
        this.isAuthorized = false;
        return auth_browser.createImplicitBrowserFlow(id, ListLOfStringL().as(scopes)).then(AutoRefreshingAuthClientL(), dart.fn(flow => flow.clientViaUserConsent({immediate: true}).catchError(dart.fn(_ => flow.clientViaUserConsent({immediate: false}), dynamicToFutureLOfAutoRefreshingAuthClientL()), {test: dart.fn(error => true, ObjectLToboolL())}), BrowserOAuth2FlowLToFutureLOfAutoRefreshingAuthClientL()));
      }).bind(this));
    }
    get onevent() {
      return this[_onevent].stream;
    }
    fire(status, message = null) {
      return async.async(dart.void, (function* fire() {
        this[_onevent].add(new signin_component.SigninEvent.new(status, message));
      }).bind(this));
    }
  };
  (signin_component.SigninComponent.new = function() {
    this[isBusy] = false;
    this[isVisible] = true;
    this[raised] = false;
    this[autoStart] = false;
    this[showFab] = false;
    this[showMenuButton] = false;
    this[clientId] = "";
    this[msgConnected] = intl.Intl.message("Anmeldung erfolgreich");
    this[msgDisconnected] = intl.Intl.message("Anmelden");
    this[msgBusy] = intl.Intl.message("Verbinde zu Google...");
    this[msgTitleAuthorized] = intl.Intl.message("Verbindung zu Google Drive trennen");
    this[msgTitleNotAuthorized] = intl.Intl.message("Verbindung zu Google Drive herstellen");
    this[msgMenuConnected] = intl.Intl.message("Synchronisierung aufheben");
    this[msgMenuNotConnected] = intl.Intl.message("Mit Google Drive synchronisieren");
    this[isAuthorized] = false;
    this[_isAuthorizedChange] = StreamControllerOfboolL().new();
    this[_identifier] = null;
    this[scopes] = JSArrayOfStringL().of([v3.DriveApi.DriveAppdataScope, v3.DriveApi.DriveFileScope]);
    this[client] = null;
    this[_signinResult] = StreamControllerOfAuthClientL().new();
    this[_onevent] = StreamControllerOfSigninEventL().broadcast({sync: true});
    ;
  }).prototype = signin_component.SigninComponent.prototype;
  dart.addTypeTests(signin_component.SigninComponent);
  dart.addTypeCaches(signin_component.SigninComponent);
  signin_component.SigninComponent[dart.implements] = () => [lifecycle_hooks.AfterViewInit];
  dart.setMethodSignature(signin_component.SigninComponent, () => ({
    __proto__: dart.getMethods(signin_component.SigninComponent.__proto__),
    authorize: dart.fnType(dart.void, [dart.dynamic]),
    doLogout: dart.fnType(dart.void, []),
    btnLoginClick: dart.fnType(dart.void, []),
    doLogin: dart.fnType(dart.legacy(async.Future$(dart.void)), []),
    ngAfterViewInit: dart.fnType(dart.void, []),
    authorizedClient: dart.fnType(dart.legacy(async.Future$(dart.legacy(auth.AutoRefreshingAuthClient))), [dart.legacy(auth.ClientId), dart.dynamic]),
    fire: dart.fnType(dart.void, [dart.legacy(signin_component.SigninStatus)], [dart.legacy(core.String)])
  }));
  dart.setGetterSignature(signin_component.SigninComponent, () => ({
    __proto__: dart.getGetters(signin_component.SigninComponent.__proto__),
    isAuthorizedChange: dart.legacy(async.Stream$(dart.legacy(core.bool))),
    identifier: dart.legacy(auth.ClientId),
    signinResult: dart.legacy(async.Stream$(dart.legacy(auth.AuthClient))),
    onevent: dart.legacy(async.Stream$(dart.legacy(signin_component.SigninEvent)))
  }));
  dart.setLibraryUri(signin_component.SigninComponent, L8);
  dart.setFieldSignature(signin_component.SigninComponent, () => ({
    __proto__: dart.getFields(signin_component.SigninComponent.__proto__),
    isBusy: dart.fieldType(dart.legacy(core.bool)),
    isVisible: dart.fieldType(dart.legacy(core.bool)),
    raised: dart.fieldType(dart.legacy(core.bool)),
    autoStart: dart.fieldType(dart.legacy(core.bool)),
    showFab: dart.fieldType(dart.legacy(core.bool)),
    showMenuButton: dart.fieldType(dart.legacy(core.bool)),
    clientId: dart.fieldType(dart.legacy(core.String)),
    msgConnected: dart.fieldType(dart.legacy(core.String)),
    msgDisconnected: dart.fieldType(dart.legacy(core.String)),
    msgBusy: dart.fieldType(dart.legacy(core.String)),
    msgTitleAuthorized: dart.fieldType(dart.legacy(core.String)),
    msgTitleNotAuthorized: dart.fieldType(dart.legacy(core.String)),
    msgMenuConnected: dart.fieldType(dart.legacy(core.String)),
    msgMenuNotConnected: dart.fieldType(dart.legacy(core.String)),
    isAuthorized: dart.fieldType(dart.legacy(core.bool)),
    [_isAuthorizedChange]: dart.finalFieldType(dart.legacy(async.StreamController$(dart.legacy(core.bool)))),
    [_identifier]: dart.fieldType(dart.legacy(auth.ClientId)),
    scopes: dart.fieldType(dart.dynamic),
    client: dart.fieldType(dart.legacy(auth.AutoRefreshingAuthClient)),
    [_signinResult]: dart.finalFieldType(dart.legacy(async.StreamController$(dart.legacy(auth.AuthClient)))),
    [_onevent]: dart.finalFieldType(dart.legacy(async.StreamController$(dart.legacy(signin_component.SigninEvent))))
  }));
  var _precisionMaterial = dart.privateName(print_analysis, "_precisionMaterial");
  var _precisionTarget = dart.privateName(print_analysis, "_precisionTarget");
  var help$0 = dart.privateName(print_analysis, "PrintAnalysis.help");
  var id$3 = dart.privateName(print_analysis, "PrintAnalysis.id");
  var idx$0 = dart.privateName(print_analysis, "PrintAnalysis.idx");
  var isPreciseMaterial = dart.privateName(print_analysis, "PrintAnalysis.isPreciseMaterial");
  var isPreciseTarget = dart.privateName(print_analysis, "PrintAnalysis.isPreciseTarget");
  var showStdAbw = dart.privateName(print_analysis, "PrintAnalysis.showStdAbw");
  var showHypoGlucs = dart.privateName(print_analysis, "PrintAnalysis.showHypoGlucs");
  var useDailyBasalrate = dart.privateName(print_analysis, "PrintAnalysis.useDailyBasalrate");
  var useFineLimits = dart.privateName(print_analysis, "PrintAnalysis.useFineLimits");
  var params$0 = dart.privateName(print_analysis, "PrintAnalysis.params");
  print_analysis.PrintAnalysis = class PrintAnalysis extends base_print.BasePrint {
    get help() {
      return this[help$0];
    }
    set help(value) {
      this[help$0] = value;
    }
    get id() {
      return this[id$3];
    }
    set id(value) {
      this[id$3] = value;
    }
    get idx() {
      return this[idx$0];
    }
    set idx(value) {
      this[idx$0] = value;
    }
    get isPreciseMaterial() {
      return this[isPreciseMaterial];
    }
    set isPreciseMaterial(value) {
      this[isPreciseMaterial] = value;
    }
    get isPreciseTarget() {
      return this[isPreciseTarget];
    }
    set isPreciseTarget(value) {
      this[isPreciseTarget] = value;
    }
    get showStdAbw() {
      return this[showStdAbw];
    }
    set showStdAbw(value) {
      this[showStdAbw] = value;
    }
    get showHypoGlucs() {
      return this[showHypoGlucs];
    }
    set showHypoGlucs(value) {
      this[showHypoGlucs] = value;
    }
    get useDailyBasalrate() {
      return this[useDailyBasalrate];
    }
    set useDailyBasalrate(value) {
      this[useDailyBasalrate] = value;
    }
    get useFineLimits() {
      return this[useFineLimits];
    }
    set useFineLimits(value) {
      this[useFineLimits] = value;
    }
    get params() {
      return this[params$0];
    }
    set params(value) {
      this[params$0] = value;
    }
    get title() {
      return intl.Intl.message("Auswertung");
    }
    set title(value) {
      super.title = value;
    }
    get [_precisionMaterial]() {
      return dart.test(this.isPreciseMaterial) ? 2 : 0;
    }
    get [_precisionTarget]() {
      return dart.test(this.isPreciseTarget) ? 1 : 0;
    }
    get isPortrait() {
      return true;
    }
    extractParams() {
      this.isPreciseMaterial = this.params[$_get](0).boolValue;
      this.isPreciseTarget = this.params[$_get](1).boolValue;
      this.showStdAbw = this.params[$_get](2).boolValue;
      this.useFineLimits = this.params[$_get](3).boolValue;
      this.showHypoGlucs = this.params[$_get](4).boolValue;
      this.useDailyBasalrate = this.params[$_get](5).boolValue;
    }
    get estimatePageCount() {
      return new (IdentityMapOfStringL$ObjectL()).from(["count", 1, "isEstimated", false]);
    }
    static get msgParam1() {
      return intl.Intl.message("Material mit Nachkommastellen");
    }
    static get msgParam2() {
      return intl.Intl.message("Zielbereich mit Nachkommastellen");
    }
    static get msgParam3() {
      return intl.Intl.message("Standardabweichung statt Anzahl");
    }
    static get msgParam4() {
      return intl.Intl.message("Standardbereich mit feinerer Abstufung");
    }
    static get msgParam5() {
      return intl.Intl.message("Unterzuckerungen anzeigen");
    }
    msgHypoTitle(value) {
      return intl.Intl.message("Unterzuckerungen (< " + dart.str(value) + ")", {args: JSArrayOfObjectL().of([value]), name: "msgHypoTitle"});
    }
    get msgHypoCount() {
      return intl.Intl.message("Anzahl Unterzuckerungen");
    }
    get msgHypoDate() {
      return intl.Intl.message("Letzte Unterzuckerung");
    }
    get msgNoHypo() {
      return intl.Intl.message("Keine");
    }
    addBodyArea(body, title, lines, opts) {
      let showLine = opts && 'showLine' in opts ? opts.showLine : true;
      if (dart.dtest(showLine)) {
        body[$add](JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$ObjectL()).from(["canvas", JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$ObjectL()).from(["type", "line", "x1", this.cm(0), "y1", this.cm(0.2), "x2", this.cm(13.5), "y2", this.cm(0.2), "lineWidth", this.cm(0.01)])]), "colSpan", 6])]));
      }
      body[$add](JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$ObjectL()).from(["columns", JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$ObjectL()).from(["width", this.cm(13.5), "text", title, "fontSize", this.fs(8.0), "color", "#606060", "alignment", "center"])]), "colSpan", 6])]));
      for (let line of lines) {
        if (dart.dsend(dart.dsend(line, '_get', [0]), '_get', ["@"]) != null) {
          if (dart.equals(dart.dsend(dart.dsend(line, '_get', [0]), '_get', ["@"]), false)) {
            continue;
          } else {
            dart.dsend(line, 'removeAt', [0]);
          }
        }
        body[$add](line);
      }
    }
    fillLimitInfo(stat) {
      if (dart.test(this.showStdAbw)) return this.msgStdAbw(dart.dload(stat, 'stdAbw'));
      return this.msgCount(intL().as(dart.dload(dart.dload(stat, 'values'), 'length')));
    }
    fillPages(pages) {
      pages[$add](this.getPage());
      if (dart.test(this.g.showBothUnits)) {
        this.g.glucMGDLIdx = 1;
        pages[$add](this.getPage());
        this.g.glucMGDLIdx = 2;
      }
    }
    getPage() {
      this.titleInfo = this.titleInfoBegEnd();
      let data = this.repData.data;
      let avgGluc = data.avgGluc;
      let glucWarnColor = this.colNorm;
      let glucWarnText = "";
      if (dart.notNull(avgGluc) >= dart.notNull(this.repData.status.settings.thresholds.bgTargetTop) && dart.notNull(avgGluc) < dart.notNull(this.repData.status.settings.thresholds.bgTargetTop)) {
        glucWarnColor = this.blendColor(glucWarnColor, this.colHigh, (dart.notNull(avgGluc) - dart.notNull(this.repData.status.settings.thresholds.bgTargetTop)) / (180 - dart.notNull(this.repData.status.settings.thresholds.bgTargetTop)));
      } else if (dart.notNull(avgGluc) < dart.notNull(this.repData.status.settings.thresholds.bgTargetBottom)) {
        glucWarnColor = this.blendColor(glucWarnColor, this.colHigh, (dart.notNull(this.repData.status.settings.thresholds.bgTargetBottom) - dart.notNull(avgGluc)) / dart.notNull(this.repData.status.settings.thresholds.bgTargetBottom));
      } else if (dart.notNull(avgGluc) > dart.notNull(this.repData.status.settings.thresholds.bgTargetTop)) glucWarnColor = this.colHigh;
      let cntp = dart.notNull(this.repData.dayCount) > 0 ? dart.notNull(data.countValid) / dart.notNull(this.repData.dayCount) : 0;
      let countPeriod = this.msgReadingsPerDay(cntp[$toInt](), this.g.fmtNumber(cntp));
      if (cntp > 24) {
        cntp = cntp / 24;
        countPeriod = this.msgReadingsPerHour(cntp[$toInt](), this.g.fmtNumber(cntp));
        if (cntp > 6) {
          cntp = 60 / cntp;
          countPeriod = this.msgReadingsInMinutes(cntp[$toInt](), this.g.fmtNumber(cntp, 1));
        }
      }
      let f = 1.5;
      let f1 = 2.5;
      let totalDay = new json_data.DayData.new(null, new json_data.ProfileGlucData.new(new json_data.ProfileStoreData.new("Intern")));
      totalDay.entries[$addAll](data.entries);
      totalDay.init();
      let count = data.validCount;
      let tgHigh = dart.notNull(data.stat[$_get]("high").values[$length]) / dart.notNull(count) * f;
      let tgNorm = dart.notNull(data.stat[$_get]("norm").values[$length]) / dart.notNull(count) * f;
      let tgLow = dart.notNull(data.stat[$_get]("low").values[$length]) / dart.notNull(count) * f;
      let above180 = dart.notNull(data.stat[$_get]("stdHigh").values[$length]) / dart.notNull(count) * (dart.test(this.useFineLimits) ? f1 : f);
      let in70180 = dart.notNull(data.stat[$_get]("stdNorm").values[$length]) / dart.notNull(count) * (dart.test(this.useFineLimits) ? f1 : f);
      let below70 = dart.notNull(data.stat[$_get]("stdLow").values[$length]) / dart.notNull(count) * (dart.test(this.useFineLimits) ? f1 : f);
      let above250 = dart.notNull(data.stat[$_get]("stdVeryHigh").values[$length]) / dart.notNull(count) * f1;
      let in180250 = dart.notNull(data.stat[$_get]("stdNormHigh").values[$length]) / dart.notNull(count) * f1;
      let in5470 = dart.notNull(data.stat[$_get]("stdNormLow").values[$length]) / dart.notNull(count) * f1;
      let below54 = dart.notNull(data.stat[$_get]("stdVeryLow").values[$length]) / dart.notNull(count) * f1;
      let txt = this.g.fmtNumber(dart.notNull(this.repData.dayCount) / dart.notNull(data.ampulleCount), this[_precisionMaterial], 0, "", true);
      let ampulleCount = dart.notNull(data.ampulleCount) > 1 ? this.msgReservoirDays((dart.notNull(this.repData.dayCount) / dart.notNull(data.ampulleCount))[$round](), txt) : "";
      let tableBody = JSArrayOfListLOfMapLOfStringL$ObjectL().of([JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$StringL()).from(["text", "", "style", "infotitle"]), new (IdentityMapOfStringL$StringL()).from(["text", this.msgDays, "style", "infotitle"]), new (IdentityMapOfStringL$ObjectL()).from(["text", this.repData.dayCount, "style", "infodata"]), new (IdentityMapOfStringL$ObjectL()).from(["text", "", "style", "infounit", "colSpan", 3]), new (IdentityMapOfStringL$StringL()).from(["text", "", "style", "infounit"])]), JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$StringL()).from(["text", "", "style", "infotitle"]), new (IdentityMapOfStringL$StringL()).from(["text", this.msgReadingsCount, "style", "infotitle"]), new (IdentityMapOfStringL$StringL()).from(["text", this.g.fmtNumber(count), "style", "infodata"]), new (IdentityMapOfStringL$ObjectL()).from(["text", "(" + dart.str(countPeriod) + ")", "style", "infounit", "colSpan", 3]), new (IdentityMapOfStringL$StringL()).from(["text", "", "style", "infounit"])]), JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$StringL()).from(["text", "", "style", "infotitle"]), new (IdentityMapOfStringL$StringL()).from(["text", this.msgReservoirCount, "style", "infotitle"]), new (IdentityMapOfStringL$StringL()).from(["text", this.g.fmtNumber(data.ampulleCount), "style", "infodata"]), new (IdentityMapOfStringL$ObjectL()).from(["text", ampulleCount, "style", "infounit", "colSpan", 3]), new (IdentityMapOfStringL$StringL()).from(["text", "", "style", "infounit"])]), JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$StringL()).from(["text", "", "style", "infotitle"]), new (IdentityMapOfStringL$StringL()).from(["text", this.msgCatheterCount, "style", "infotitle"]), new (IdentityMapOfStringL$StringL()).from(["text", this.g.fmtNumber(data.catheterCount), "style", "infodata"]), new (IdentityMapOfStringL$ObjectL()).from(["text", dart.notNull(data.catheterCount) > 1 ? this.msgCatheterDays((dart.notNull(this.repData.dayCount) / dart.notNull(data.catheterCount))[$round](), this.g.fmtNumber(dart.notNull(this.repData.dayCount) / dart.notNull(data.catheterCount), this[_precisionMaterial], 0, "", true)) : "", "style", "infounit", "colSpan", 3]), new (IdentityMapOfStringL$StringL()).from(["text", "", "style", "infounit"])]), JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$StringL()).from(["text", "", "style", "infotitle"]), new (IdentityMapOfStringL$StringL()).from(["text", this.msgSensorCount, "style", "infotitle"]), new (IdentityMapOfStringL$StringL()).from(["text", this.g.fmtNumber(data.sensorCount), "style", "infodata"]), new (IdentityMapOfStringL$ObjectL()).from(["text", dart.notNull(data.sensorCount) > 1 ? this.msgSensorDays((dart.notNull(this.repData.dayCount) / dart.notNull(data.sensorCount))[$round](), this.g.fmtNumber(dart.notNull(this.repData.dayCount) / dart.notNull(data.sensorCount), this[_precisionMaterial], 0, "", true)) : "", "style", "infounit", "colSpan", 3]), new (IdentityMapOfStringL$StringL()).from(["text", "", "style", "infounit"])])]);
      let cvsLeft = -0.5;
      let cvsWidth = 0.8;
      if ((this.repData.status.settings.thresholds.bgTargetBottom !== 70 || this.repData.status.settings.thresholds.bgTargetTop !== 180) && !dart.test(this.g.ppComparable)) {
        this.addBodyArea(tableBody, this.msgOwnLimits, [JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$StringL()).from(["text", "", "style", "infotitle"]), new (IdentityMapOfStringL$StringL()).from(["text", this.msgValuesAbove(dart.str(this.g.glucFromData(this.repData.status.settings.thresholds.bgTargetTop)) + " " + dart.str(dart.dsend(this.g.getGlucInfo(), '_get', ["unit"]))), "style", "infotitle"]), new (IdentityMapOfStringL$StringL()).from(["text", dart.str(this.g.fmtNumber(dart.notNull(data.stat[$_get]("high").values[$length]) / dart.notNull(count) * 100, this[_precisionTarget])) + " %", "style", "infodata"]), new (IdentityMapOfStringL$ObjectL()).from(["text", this.fillLimitInfo(data.stat[$_get]("high")), "style", "infounit", "colSpan", 2]), new (IdentityMapOfStringL$StringL()).from(["text", "", "style", "infounit"]), new (IdentityMapOfStringL$ObjectL()).from(["canvas", JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$ObjectL()).from(["type", "rect", "x", this.cm(cvsLeft), "y", this.cm(0), "w", this.cm(cvsWidth), "h", this.cm(tgHigh), "color", this.colHigh]), new (IdentityMapOfStringL$ObjectL()).from(["type", "rect", "x", this.cm(cvsLeft), "y", this.cm(tgHigh), "w", this.cm(cvsWidth), "h", this.cm(tgNorm), "color", this.colNorm]), new (IdentityMapOfStringL$ObjectL()).from(["type", "rect", "x", this.cm(cvsLeft), "y", this.cm(tgHigh + tgNorm), "w", this.cm(cvsWidth), "h", this.cm(tgLow), "color", this.colLow])]), "rowSpan", 3])]), JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$StringL()).from(["text", "", "style", "infotitle"]), new (IdentityMapOfStringL$StringL()).from(["text", this.msgValuesIn(dart.str(this.g.glucFromData(this.repData.status.settings.thresholds.bgTargetBottom)) + " " + dart.str(dart.dsend(this.g.getGlucInfo(), '_get', ["unit"])), dart.str(this.g.glucFromData(this.repData.status.settings.thresholds.bgTargetTop)) + " " + dart.str(dart.dsend(this.g.getGlucInfo(), '_get', ["unit"]))), "style", "infotitle"]), new (IdentityMapOfStringL$StringL()).from(["text", dart.str(this.g.fmtNumber(dart.notNull(data.stat[$_get]("norm").values[$length]) / dart.notNull(count) * 100, this[_precisionTarget])) + " %", "style", "infodata"]), new (IdentityMapOfStringL$ObjectL()).from(["text", this.fillLimitInfo(data.stat[$_get]("norm")), "style", "infounit", "colSpan", 2]), new (IdentityMapOfStringL$StringL()).from(["text", "", "style", "infounit"]), new (IdentityMapOfStringL$StringL()).from(["text", "", "style", "infounit"])]), JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$StringL()).from(["text", "", "style", "infotitle"]), new (IdentityMapOfStringL$StringL()).from(["text", this.msgValuesBelow(dart.str(this.g.glucFromData(this.repData.status.settings.thresholds.bgTargetBottom)) + " " + dart.str(dart.dsend(this.g.getGlucInfo(), '_get', ["unit"]))), "style", "infotitle"]), new (IdentityMapOfStringL$StringL()).from(["text", dart.str(this.g.fmtNumber(dart.notNull(data.stat[$_get]("low").values[$length]) / dart.notNull(count) * 100, this[_precisionTarget])) + " %", "style", "infodata"]), new (IdentityMapOfStringL$ObjectL()).from(["text", this.fillLimitInfo(data.stat[$_get]("low")), "style", "infounit", "colSpan", 2]), new (IdentityMapOfStringL$StringL()).from(["text", "", "style", "infounit"]), new (IdentityMapOfStringL$StringL()).from(["text", "", "style", "infounit"])])]);
      }
      if (dart.test(this.useFineLimits)) {
        this.addBodyArea(tableBody, this.msgStandardLimits, [JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$StringL()).from(["text", "", "style", "infotitle"]), new (IdentityMapOfStringL$StringL()).from(["text", this.msgValuesVeryHigh(dart.str(this.g.glucFromData(250)) + " " + dart.str(dart.dsend(this.g.getGlucInfo(), '_get', ["unit"]))), "style", "infotitle"]), new (IdentityMapOfStringL$StringL()).from(["text", dart.str(this.g.fmtNumber(dart.notNull(data.stat[$_get]("stdVeryHigh").values[$length]) / dart.notNull(count) * 100, this[_precisionTarget])) + " %", "style", "infodata"]), new (IdentityMapOfStringL$ObjectL()).from(["text", this.fillLimitInfo(data.stat[$_get]("stdVeryHigh")), "style", "infounit", "colSpan", 2]), new (IdentityMapOfStringL$StringL()).from(["text", "", "style", "infounit"]), new (IdentityMapOfStringL$ObjectL()).from(["canvas", JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$ObjectL()).from(["type", "rect", "x", this.cm(cvsLeft), "y", this.cm(0), "w", this.cm(cvsWidth), "h", this.cm(above250), "color", this.colHigh]), new (IdentityMapOfStringL$ObjectL()).from(["type", "rect", "x", this.cm(cvsLeft), "y", this.cm(above250), "w", this.cm(cvsWidth), "h", this.cm(in180250), "color", this.colNormHigh]), new (IdentityMapOfStringL$ObjectL()).from(["type", "rect", "x", this.cm(cvsLeft), "y", this.cm(above250 + in180250), "w", this.cm(cvsWidth), "h", this.cm(in70180), "color", this.colNorm]), new (IdentityMapOfStringL$ObjectL()).from(["type", "rect", "x", this.cm(cvsLeft), "y", this.cm(above250 + in180250 + in70180), "w", this.cm(cvsWidth), "h", this.cm(in5470), "color", this.colNormLow]), new (IdentityMapOfStringL$ObjectL()).from(["type", "rect", "x", this.cm(cvsLeft), "y", this.cm(above250 + in180250 + in70180 + in5470), "w", this.cm(cvsWidth), "h", this.cm(below54), "color", this.colLow])]), "rowSpan", 3])]), JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$StringL()).from(["text", "", "style", "infotitle"]), new (IdentityMapOfStringL$StringL()).from(["text", this.msgValuesNormHigh(dart.str(this.g.glucFromData(180)) + " " + dart.str(dart.dsend(this.g.getGlucInfo(), '_get', ["unit"])) + " - " + dart.str(this.g.glucFromData(250)) + " " + dart.str(dart.dsend(this.g.getGlucInfo(), '_get', ["unit"]))), "style", "infotitle"]), new (IdentityMapOfStringL$StringL()).from(["text", dart.str(this.g.fmtNumber(dart.notNull(data.stat[$_get]("stdNormHigh").values[$length]) / dart.notNull(count) * 100, this[_precisionTarget])) + " %", "style", "infodata"]), new (IdentityMapOfStringL$ObjectL()).from(["text", this.fillLimitInfo(data.stat[$_get]("stdNormHigh")), "style", "infounit", "colSpan", 2]), new (IdentityMapOfStringL$StringL()).from(["text", "", "style", "infounit"]), new (IdentityMapOfStringL$StringL()).from(["text", "", "style", "infounit"])]), JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$StringL()).from(["text", "", "style", "infotitle"]), new (IdentityMapOfStringL$StringL()).from(["text", this.msgValuesNorm(dart.str(this.g.glucFromData(70)) + " " + dart.str(dart.dsend(this.g.getGlucInfo(), '_get', ["unit"])), dart.str(this.g.glucFromData(180)) + " " + dart.str(dart.dsend(this.g.getGlucInfo(), '_get', ["unit"]))), "style", "infotitle"]), new (IdentityMapOfStringL$StringL()).from(["text", dart.str(this.g.fmtNumber(dart.notNull(data.stat[$_get]("stdNorm").values[$length]) / dart.notNull(count) * 100, this[_precisionTarget])) + " %", "style", "infodata"]), new (IdentityMapOfStringL$ObjectL()).from(["text", this.fillLimitInfo(data.stat[$_get]("stdNorm")), "style", "infounit", "colSpan", 2]), new (IdentityMapOfStringL$StringL()).from(["text", "", "style", "infounit"]), new (IdentityMapOfStringL$StringL()).from(["text", "", "style", "infounit"])]), JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$StringL()).from(["text", "", "style", "infotitle"]), new (IdentityMapOfStringL$StringL()).from(["text", this.msgValuesNormLow(dart.str(this.g.glucFromData(54)) + " " + dart.str(dart.dsend(this.g.getGlucInfo(), '_get', ["unit"])) + " - " + dart.str(this.g.glucFromData(70)) + " " + dart.str(dart.dsend(this.g.getGlucInfo(), '_get', ["unit"]))), "style", "infotitle"]), new (IdentityMapOfStringL$StringL()).from(["text", dart.str(this.g.fmtNumber(dart.notNull(data.stat[$_get]("stdNormLow").values[$length]) / dart.notNull(count) * 100, this[_precisionTarget])) + " %", "style", "infodata"]), new (IdentityMapOfStringL$ObjectL()).from(["text", this.fillLimitInfo(data.stat[$_get]("stdNormLow")), "style", "infounit", "colSpan", 2]), new (IdentityMapOfStringL$StringL()).from(["text", "", "style", "infounit"]), new (IdentityMapOfStringL$StringL()).from(["text", "", "style", "infounit"])]), JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$StringL()).from(["text", "", "style", "infotitle"]), new (IdentityMapOfStringL$StringL()).from(["text", this.msgValuesVeryLow(dart.str(this.g.glucFromData(54)) + " " + dart.str(dart.dsend(this.g.getGlucInfo(), '_get', ["unit"]))), "style", "infotitle"]), new (IdentityMapOfStringL$StringL()).from(["text", dart.str(this.g.fmtNumber(dart.notNull(data.stat[$_get]("stdVeryLow").values[$length]) / dart.notNull(count) * 100, this[_precisionTarget])) + " %", "style", "infodata"]), new (IdentityMapOfStringL$ObjectL()).from(["text", this.fillLimitInfo(data.stat[$_get]("stdVeryLow")), "style", "infounit", "colSpan", 2]), new (IdentityMapOfStringL$StringL()).from(["text", "", "style", "infounit"]), new (IdentityMapOfStringL$StringL()).from(["text", "", "style", "infounit"])])]);
      } else {
        this.addBodyArea(tableBody, this.msgStandardLimits, [JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$StringL()).from(["text", "", "style", "infotitle"]), new (IdentityMapOfStringL$StringL()).from(["text", this.msgValuesAbove(dart.str(this.g.glucFromData(180)) + " " + dart.str(dart.dsend(this.g.getGlucInfo(), '_get', ["unit"]))), "style", "infotitle"]), new (IdentityMapOfStringL$StringL()).from(["text", dart.str(this.g.fmtNumber(dart.notNull(data.stat[$_get]("stdHigh").values[$length]) / dart.notNull(count) * 100, this[_precisionTarget])) + " %", "style", "infodata"]), new (IdentityMapOfStringL$ObjectL()).from(["text", this.fillLimitInfo(data.stat[$_get]("stdHigh")), "style", "infounit", "colSpan", 2]), new (IdentityMapOfStringL$StringL()).from(["text", "", "style", "infounit"]), new (IdentityMapOfStringL$ObjectL()).from(["canvas", JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$ObjectL()).from(["type", "rect", "x", this.cm(cvsLeft), "y", this.cm(0), "w", this.cm(cvsWidth), "h", this.cm(above180), "color", this.colHigh]), new (IdentityMapOfStringL$ObjectL()).from(["type", "rect", "x", this.cm(cvsLeft), "y", this.cm(above180), "w", this.cm(cvsWidth), "h", this.cm(in70180), "color", this.colNorm]), new (IdentityMapOfStringL$ObjectL()).from(["type", "rect", "x", this.cm(cvsLeft), "y", this.cm(above180 + in70180), "w", this.cm(cvsWidth), "h", this.cm(below70), "color", this.colLow])]), "rowSpan", 3])]), JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$StringL()).from(["text", "", "style", "infotitle"]), new (IdentityMapOfStringL$StringL()).from(["text", this.msgValuesIn(dart.str(this.g.glucFromData(70)) + " " + dart.str(dart.dsend(this.g.getGlucInfo(), '_get', ["unit"])), dart.str(this.g.glucFromData(180)) + " " + dart.str(dart.dsend(this.g.getGlucInfo(), '_get', ["unit"]))), "style", "infotitle"]), new (IdentityMapOfStringL$StringL()).from(["text", dart.str(this.g.fmtNumber(dart.notNull(data.stat[$_get]("stdNorm").values[$length]) / dart.notNull(count) * 100, this[_precisionTarget])) + " %", "style", "infodata"]), new (IdentityMapOfStringL$ObjectL()).from(["text", this.fillLimitInfo(data.stat[$_get]("stdNorm")), "style", "infounit", "colSpan", 2]), new (IdentityMapOfStringL$StringL()).from(["text", "", "style", "infounit"]), new (IdentityMapOfStringL$StringL()).from(["text", "", "style", "infounit"])]), JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$StringL()).from(["text", "", "style", "infotitle"]), new (IdentityMapOfStringL$StringL()).from(["text", this.msgValuesBelow(dart.str(this.g.glucFromData(70)) + " " + dart.str(dart.dsend(this.g.getGlucInfo(), '_get', ["unit"]))), "style", "infotitle"]), new (IdentityMapOfStringL$StringL()).from(["text", dart.str(this.g.fmtNumber(dart.notNull(data.stat[$_get]("stdLow").values[$length]) / dart.notNull(count) * 100, this[_precisionTarget])) + " %", "style", "infodata"]), new (IdentityMapOfStringL$ObjectL()).from(["text", this.fillLimitInfo(data.stat[$_get]("stdLow")), "style", "infounit", "colSpan", 2]), new (IdentityMapOfStringL$StringL()).from(["text", "", "style", "infounit"]), new (IdentityMapOfStringL$StringL()).from(["text", "", "style", "infounit"])])]);
      }
      if (dart.test(this.showHypoGlucs)) {
        let uzCount = 0;
        let lastEntry = null;
        for (let entry of data.stat[$_get]("stdVeryLow").entries) {
          if (lastEntry == null || dart.notNull(entry.time.difference(lastEntry.time).inMinutes) > 30) {
            uzCount = uzCount + 1;
            lastEntry = entry;
          }
        }
        this.addBodyArea(tableBody, this.msgHypoTitle(dart.str(this.g.glucFromData(54)) + " " + dart.str(dart.dsend(this.g.getGlucInfo(), '_get', ["unit"]))), [JSArrayOfMapLOfStringL$StringL().of([new (IdentityMapOfStringL$StringL()).from(["text", "", "style", "infotitle"]), new (IdentityMapOfStringL$StringL()).from(["text", this.msgHypoCount, "style", "infotitle"]), new (IdentityMapOfStringL$StringL()).from(["text", "", "style", "infodata"]), new (IdentityMapOfStringL$StringL()).from(["text", dart.str(uzCount), "style", "infounit"]), new (IdentityMapOfStringL$StringL()).from(["text", "", "style", "infotitle"]), new (IdentityMapOfStringL$StringL()).from(["text", "", "style", "infounit"])]), JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$StringL()).from(["text", "", "style", "infotitle"]), new (IdentityMapOfStringL$StringL()).from(["text", this.msgHypoDate, "style", "infotitle"]), new (IdentityMapOfStringL$StringL()).from(["text", "", "style", "infodata"]), new (IdentityMapOfStringL$ObjectL()).from(["text", dart.str(lastEntry != null ? this.fmtDateTime(lastEntry.time) : this.msgNoHypo), "style", "infounit", "colSpan", 3]), new (IdentityMapOfStringL$StringL()).from(["text", "", "style", "infotitle"]), new (IdentityMapOfStringL$StringL()).from(["text", "", "style", "infounit"])])]);
      }
      this.addBodyArea(tableBody, this.msgPeriod, [JSArrayOfMapLOfStringL$dynamic().of([new (IdentityMapOfStringL$StringL()).from(["text", "", "style", "infotitle"]), new (IdentityMapOfStringL$StringL()).from(["text", this.msgLowestValue, "style", "infotitle"]), new (IdentityMapOfStringL$StringL()).from(["text", dart.str(this.g.glucFromData(data.min)), "style", "infodata"]), new (IdentityMapOfStringL$dynamic()).from(["text", dart.dsend(this.g.getGlucInfo(), '_get', ["unit"]), "style", "infounit"]), new (IdentityMapOfStringL$StringL()).from(["text", "", "style", "infotitle"]), new (IdentityMapOfStringL$StringL()).from(["text", "", "style", "infounit"])]), JSArrayOfMapLOfStringL$dynamic().of([new (IdentityMapOfStringL$StringL()).from(["text", "", "style", "infotitle"]), new (IdentityMapOfStringL$StringL()).from(["text", this.msgHighestValue, "style", "infotitle"]), new (IdentityMapOfStringL$StringL()).from(["text", dart.str(this.g.glucFromData(data.max)), "style", "infodata"]), new (IdentityMapOfStringL$dynamic()).from(["text", dart.dsend(this.g.getGlucInfo(), '_get', ["unit"]), "style", "infounit", "colSpan", 2]), new (IdentityMapOfStringL$StringL()).from(["text", "", "style", "infotitle"]), new (IdentityMapOfStringL$StringL()).from(["text", "", "style", "infounit"])]), JSArrayOfMapLOfStringL$dynamic().of([new (IdentityMapOfStringL$StringL()).from(["text", "", "style", "infotitle"]), new (IdentityMapOfStringL$StringL()).from(["text", this.msgStandardDeviation, "style", "infotitle"]), new (IdentityMapOfStringL$StringL()).from(["text", this.g.fmtNumber(totalDay.stdAbw(this.g.glucMGDL), 1), "style", "infodata"]), new (IdentityMapOfStringL$dynamic()).from(["text", dart.dsend(this.g.getGlucInfo(), '_get', ["unit"]), "style", "infounit", "colSpan", 2]), new (IdentityMapOfStringL$StringL()).from(["text", "", "style", "infotitle"]), new (IdentityMapOfStringL$StringL()).from(["text", "", "style", "infounit"])]), JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$StringL()).from(["text", "", "style", "infotitle"]), new (IdentityMapOfStringL$StringL()).from(["text", this.msgGVIFull, "style", "infotitle"]), new (IdentityMapOfStringL$StringL()).from(["text", this.g.fmtNumber(data.gvi, 2), "style", "infodata"]), new (IdentityMapOfStringL$ObjectL()).from(["text", this.gviQuality(data.gvi), "style", "infounit", "colSpan", 2]), new (IdentityMapOfStringL$StringL()).from(["text", "", "style", "infotitle"]), new (IdentityMapOfStringL$StringL()).from(["text", "", "style", "infounit"])]), JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$StringL()).from(["text", "", "style", "infotitle"]), new (IdentityMapOfStringL$StringL()).from(["text", this.msgPGSFull, "style", "infotitle"]), new (IdentityMapOfStringL$StringL()).from(["text", this.g.fmtNumber(data.pgs, 2), "style", "infodata"]), new (IdentityMapOfStringL$ObjectL()).from(["text", this.pgsQuality(data.pgs), "style", "infounit", "colSpan", 2]), new (IdentityMapOfStringL$StringL()).from(["text", "", "style", "infotitle"]), new (IdentityMapOfStringL$StringL()).from(["text", "", "style", "infounit"])]), JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$StringL()).from(["text", "", "style", "infotitle"]), new (IdentityMapOfStringL$StringL()).from(["text", dart.str(this.msgGlucoseValue) + glucWarnText, "style", "infotitle"]), new (IdentityMapOfStringL$StringL()).from(["text", this.g.glucFromData(avgGluc), "style", "infodata"]), new (IdentityMapOfStringL$ObjectL()).from(["text", dart.str(dart.dsend(this.g.getGlucInfo(), '_get', ["unit"])), "style", "infounit", "colSpan", 2]), new (IdentityMapOfStringL$StringL()).from(["text", "", "style", "infotitle"]), new (IdentityMapOfStringL$ObjectL()).from(["canvas", JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$ObjectL()).from(["type", "rect", "x", this.cm(cvsLeft), "y", this.cm(0.2), "w", this.cm(cvsWidth), "h", this.cm(0.9), "color", glucWarnColor])]), "rowSpan", 3])]), JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$StringL()).from(["text", "", "style", "infotitle"]), new (IdentityMapOfStringL$StringL()).from(["text", this.msgHbA1CLong, "style", "infotitle"]), new (IdentityMapOfStringL$ObjectL()).from(["text", this.hba1c(avgGluc), "style", JSArrayOfStringL().of(["infodata", "hba1c"])]), new (IdentityMapOfStringL$ObjectL()).from(["text", "%", "style", JSArrayOfStringL().of(["hba1c", "infounit"]), "colSpan", 2]), new (IdentityMapOfStringL$StringL()).from(["text", "", "style", "infotitle"]), new (IdentityMapOfStringL$StringL()).from(["text", "", "style", "infounit"])])]);
      this.addBodyArea(tableBody, this.msgTreatments, [JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$StringL()).from(["text", "", "style", "infotitle"]), new (IdentityMapOfStringL$StringL()).from(["text", this.msgKHPerDay, "style", "infotitle"]), new (IdentityMapOfStringL$StringL()).from(["text", this.g.fmtNumber(dart.notNull(data.khCount) / dart.notNull(this.repData.dayCount), 1, 0), "style", "infodata"]), new (IdentityMapOfStringL$ObjectL()).from(["text", this.msgKHBE(this.g.fmtNumber(dart.notNull(data.khCount) / dart.notNull(this.repData.dayCount) / 12, 1, 0)), "style", "infounit", "colSpan", 2]), new (IdentityMapOfStringL$StringL()).from(["text", "", "style", "infotitle"]), new (IdentityMapOfStringL$StringL()).from(["text", "", "style", "infounit"])]), JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$StringL()).from(["text", "", "style", "infotitle"]), new (IdentityMapOfStringL$StringL()).from(["text", this.msgInsulinPerDay, "style", "infotitle"]), new (IdentityMapOfStringL$StringL()).from(["text", dart.str(this.g.fmtNumber(dart.notNull(data.TDD(!dart.test(this.useDailyBasalrate))) / dart.notNull(this.repData.dayCount), 1)), "style", "infodata"]), new (IdentityMapOfStringL$ObjectL()).from(["text", dart.str(this.msgInsulinUnit), "style", "infounit", "colSpan", 2]), new (IdentityMapOfStringL$StringL()).from(["text", "", "style", "infotitle"]), new (IdentityMapOfStringL$StringL()).from(["text", "", "style", "infounit"])]), JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$StringL()).from(["text", "", "style", "infotitle"]), new (IdentityMapOfStringL$StringL()).from(["text", this.msgBolusPerDay, "style", "infotitle"]), new (IdentityMapOfStringL$StringL()).from(["text", dart.str(this.g.fmtNumber(dart.notNull(data.ieBolusSum) / dart.notNull(this.repData.dayCount), 1)), "style", "infodata"]), new (IdentityMapOfStringL$ObjectL()).from(["text", "bolus (" + dart.str(this.g.fmtNumber(data.ieBolusPrz(!dart.test(this.useDailyBasalrate)), 1)) + " %)", "style", "infounit", "colSpan", 2]), new (IdentityMapOfStringL$StringL()).from(["text", "", "style", "infotitle"]), new (IdentityMapOfStringL$StringL()).from(["text", "", "style", "infounit"])]), JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$StringL()).from(["text", "", "style", "infotitle"]), new (IdentityMapOfStringL$StringL()).from(["text", this.msgBasalPerDay, "style", "infotitle"]), new (IdentityMapOfStringL$StringL()).from(["text", dart.str(this.g.fmtNumber(dart.notNull(data.ieBasalSum(!dart.test(this.useDailyBasalrate))) / dart.notNull(this.repData.dayCount), 1)), "style", "infodata"]), new (IdentityMapOfStringL$ObjectL()).from(["text", "basal (" + dart.str(this.g.fmtNumber(data.ieBasalPrz(!dart.test(this.useDailyBasalrate)), 1)) + " %)", "style", "infounit", "colSpan", 2]), new (IdentityMapOfStringL$StringL()).from(["text", "", "style", "infotitle"]), new (IdentityMapOfStringL$StringL()).from(["text", "", "style", "infounit"])]), JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$boolL()).from(["@", dart.notNull(data.ieMicroBolusSum) > 0.0 && false]), new (IdentityMapOfStringL$StringL()).from(["text", "", "style", "infotitle"]), new (IdentityMapOfStringL$StringL()).from(["text", this.msgMicroBolusPerDay, "style", "infotitle"]), new (IdentityMapOfStringL$StringL()).from(["text", dart.str(this.g.fmtNumber(dart.notNull(data.ieMicroBolusSum) / dart.notNull(this.repData.dayCount), 1)), "style", "infodata"]), new (IdentityMapOfStringL$ObjectL()).from(["text", "bolus (" + dart.str(this.g.fmtNumber(data.ieMicroBolusPrz(!dart.test(this.useDailyBasalrate)), 1)) + " %)", "style", "infounit", "colSpan", 2]), new (IdentityMapOfStringL$StringL()).from(["text", "", "style", "infotitle"]), new (IdentityMapOfStringL$StringL()).from(["text", "", "style", "infounit"])])]);
      let ret = JSArrayOfObjectL().of([this.headerFooter(), new (IdentityMapOfStringL$ListLOfObjectL()).from(["margin", JSArrayOfdoubleL().of([this.cm(0), this.cm(this.yorg), this.cm(0), this.cm(0)]), "columns", JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$ObjectL()).from(["width", this.cm(this.width), "text", dart.str(this.repData.user.name), "fontSize", this.fs(20.0), "alignment", "center"])])]), new (IdentityMapOfStringL$ObjectL()).from(["margin", JSArrayOfdoubleL().of([this.cm(5.5), this.cm(0.5), this.cm(0), this.cm(0)]), "layout", "noBorders", "table", new (IdentityMapOfStringL$ObjectL()).from(["headerRows", 0, "widths", JSArrayOfdoubleL().of([this.cm(5), this.cm(8)]), "body", JSArrayOfListLOfMapLOfStringL$StringL().of([JSArrayOfMapLOfStringL$StringL().of([new (IdentityMapOfStringL$StringL()).from(["text", this.msgBirthday, "style", "perstitle"]), new (IdentityMapOfStringL$StringL()).from(["text", this.repData.user.birthDate, "style", "persdata"])]), JSArrayOfMapLOfStringL$StringL().of([new (IdentityMapOfStringL$StringL()).from(["text", this.msgDiabSince, "style", "perstitle"]), new (IdentityMapOfStringL$StringL()).from(["text", this.repData.user.diaStartDate, "style", "persdata"])]), JSArrayOfMapLOfStringL$StringL().of([new (IdentityMapOfStringL$StringL()).from(["text", this.msgInsulin, "style", "perstitle"]), new (IdentityMapOfStringL$StringL()).from(["text", this.repData.user.insulin, "style", "persdata"])])])])]), new (IdentityMapOfStringL$ObjectL()).from(["margin", JSArrayOfdoubleL().of([this.cm(3.7), this.cm(0.5), this.cm(0), this.cm(0)]), "layout", "noBorders", "fontSize", this.fs(10.0), "table", new (IdentityMapOfStringL$ObjectL()).from(["headerRows", 0, "widths", JSArrayOfdoubleL().of([this.cm(0), this.cm(7.3), this.cm(1.5), this.cm(1.5), this.cm(1.5), this.cm(4.5)]), "body", tableBody])])]);
      return new base_print.Page.new(this.isPortrait, ret);
    }
    getInfoPage(src) {
      this.titleInfo = null;
      this.subtitle = "Erklärungen";
      let ret = JSArrayOfObjectL().of([this.headerFooter(), new (IdentityMapOfStringL$ListLOfObjectL()).from(["margin", JSArrayOfdoubleL().of([this.cm(0), this.cm(this.yorg), this.cm(0), this.cm(0)]), "columns", JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$ObjectL()).from(["width", this.cm(this.width), "text", "Hinweise", "fontSize", this.fs(20.0), "alignment", "center"])])]), new (IdentityMapOfStringL$ObjectL()).from(["margin", JSArrayOfdoubleL().of([this.cm(2.2), this.cm(0.5), this.cm(2.2), this.cm(0)]), "text", "Der DVI ist ein Wert, der einem Wert gleicht, der ein Wert sein soll, der hoffentlich zu einem" + " Zeilenumbruch führt, was aber nicht klar ist. Nun ist es klar und wir sind sowas von froh, dass es" + " funktioniert. Einfach Toll :)", "fontSize", this.fs(12.0), "alignment", "justify"]), new (IdentityMapOfStringL$ObjectL()).from(["margin", JSArrayOfdoubleL().of([this.cm(2.2), this.cm(0.2), this.cm(2.2), this.cm(0)]), "text", "Der DVI ist ein Wert, der einem Wert gleicht, der ein Wert sein soll, der hoffentlich zu einem" + " Zeilenumbruch führt, was aber nicht klar ist. Nun ist es klar und wir sind sowas von froh, dass es" + " funktioniert. Einfach Toll :)", "fontSize", this.fs(12.0), "alignment", "justify", "color", "red"])]);
      return ret;
    }
  };
  (print_analysis.PrintAnalysis.new = function() {
    this[help$0] = intl.Intl.message("Dieses Formular zeigt die Auswertung der Werte des ausgewählten Zeitraums. Dabei wird auch\nder durchscnittliche Verbrauch an Materialien rechnerisch ermittelt und angezeigt. Dieses Formular beinhaltet\ndie meisten Informationen, die Diabetologen gerne wissen wollen.\n\nDer HbA1c wird rechnerisch aus den vorhandenen Daten ermittelt und weicht normalerweise nicht unerheblich von\ndem tatsächlich gemessenen Wert ab. Der Wert, der aus der Blutprobe ermittelt wird, gibt die tatsächliche\nBindung von Glukose im Blut wieder. Da diese von zusätzlichen Faktoren abhängig ist und nicht nur von den hier\nverwendeten Messdaten, ergeben sich Unterschiede zum errechneten Wert. Vor allem, wenn es sich bei den gemessenen\nWerten nicht um Blutzucker, sondern um Gewebszucker handelt, wie er von CGM-Systemen verwendet wird.\n\nTrotzdem ist dieser Wert ein grober Anhaltspunkt für die Qualität der Glukoseeinstellung und wird in der vom Labor\nermittelten Form gerne von Diabetologen als Richtwert verwendet, weshalb er hier angezeigt wird. Er wird aber in\nschwächerer Schrift ausgegeben, damit seine zweifelhafte Natur auch erkennbar ist.", {desc: "help for analysis"});
    this[id$3] = "analysis";
    this[idx$0] = "01";
    this[isPreciseMaterial] = null;
    this[isPreciseTarget] = null;
    this[showStdAbw] = null;
    this[showHypoGlucs] = null;
    this[useDailyBasalrate] = null;
    this[useFineLimits] = null;
    this[params$0] = JSArrayOfParamInfoL().of([new base_print.ParamInfo.new(0, print_analysis.PrintAnalysis.msgParam1, {boolValue: true, thumbValue: false}), new base_print.ParamInfo.new(1, print_analysis.PrintAnalysis.msgParam2, {boolValue: false}), new base_print.ParamInfo.new(2, print_analysis.PrintAnalysis.msgParam3, {boolValue: false}), new base_print.ParamInfo.new(3, print_analysis.PrintAnalysis.msgParam4, {boolValue: false}), new base_print.ParamInfo.new(4, print_analysis.PrintAnalysis.msgParam5, {boolValue: false}), new base_print.ParamInfo.new(5, base_print.BasePrint.msgUseDailyBasalrate, {boolValue: true, isLoopValue: true})]);
    print_analysis.PrintAnalysis.__proto__.new.call(this);
    this.init();
  }).prototype = print_analysis.PrintAnalysis.prototype;
  dart.addTypeTests(print_analysis.PrintAnalysis);
  dart.addTypeCaches(print_analysis.PrintAnalysis);
  dart.setMethodSignature(print_analysis.PrintAnalysis, () => ({
    __proto__: dart.getMethods(print_analysis.PrintAnalysis.__proto__),
    msgHypoTitle: dart.fnType(dart.legacy(core.String), [dart.dynamic]),
    addBodyArea: dart.fnType(dart.void, [dart.legacy(core.List), dart.legacy(core.String), dart.legacy(core.List)], {showLine: dart.dynamic}, {}),
    fillLimitInfo: dart.fnType(dart.legacy(core.String), [dart.dynamic]),
    fillPages: dart.fnType(dart.void, [dart.legacy(core.List$(dart.legacy(base_print.Page)))]),
    getPage: dart.fnType(dart.legacy(base_print.Page), []),
    getInfoPage: dart.fnType(dart.legacy(core.List$(dart.legacy(core.Object))), [dart.legacy(json_data.ReportData)])
  }));
  dart.setGetterSignature(print_analysis.PrintAnalysis, () => ({
    __proto__: dart.getGetters(print_analysis.PrintAnalysis.__proto__),
    title: dart.legacy(core.String),
    [_precisionMaterial]: dart.legacy(core.int),
    [_precisionTarget]: dart.legacy(core.int),
    estimatePageCount: dart.dynamic,
    msgHypoCount: dart.legacy(core.String),
    msgHypoDate: dart.legacy(core.String),
    msgNoHypo: dart.legacy(core.String)
  }));
  dart.setLibraryUri(print_analysis.PrintAnalysis, L9);
  dart.setFieldSignature(print_analysis.PrintAnalysis, () => ({
    __proto__: dart.getFields(print_analysis.PrintAnalysis.__proto__),
    help: dart.fieldType(dart.legacy(core.String)),
    id: dart.fieldType(dart.legacy(core.String)),
    idx: dart.fieldType(dart.legacy(core.String)),
    isPreciseMaterial: dart.fieldType(dart.legacy(core.bool)),
    isPreciseTarget: dart.fieldType(dart.legacy(core.bool)),
    showStdAbw: dart.fieldType(dart.legacy(core.bool)),
    showHypoGlucs: dart.fieldType(dart.legacy(core.bool)),
    useDailyBasalrate: dart.fieldType(dart.legacy(core.bool)),
    useFineLimits: dart.fieldType(dart.legacy(core.bool)),
    params: dart.fieldType(dart.legacy(core.List$(dart.legacy(base_print.ParamInfo))))
  }));
  var _maxTDD = dart.privateName(print_daily_statistics, "_maxTDD");
  var _basalSum = dart.privateName(print_daily_statistics, "_basalSum");
  var _fillPages = dart.privateName(print_daily_statistics, "_fillPages");
  var help$1 = dart.privateName(print_daily_statistics, "PrintDailyStatistics.help");
  var id$4 = dart.privateName(print_daily_statistics, "PrintDailyStatistics.id");
  var idx$1 = dart.privateName(print_daily_statistics, "PrintDailyStatistics.idx");
  var showHbA1c = dart.privateName(print_daily_statistics, "PrintDailyStatistics.showHbA1c");
  var showStdabw = dart.privateName(print_daily_statistics, "PrintDailyStatistics.showStdabw");
  var showCount = dart.privateName(print_daily_statistics, "PrintDailyStatistics.showCount");
  var showValueStats = dart.privateName(print_daily_statistics, "PrintDailyStatistics.showValueStats");
  var showPercentile = dart.privateName(print_daily_statistics, "PrintDailyStatistics.showPercentile");
  var showVarK = dart.privateName(print_daily_statistics, "PrintDailyStatistics.showVarK");
  var showBasal = dart.privateName(print_daily_statistics, "PrintDailyStatistics.showBasal");
  var useDailyBasalrate$ = dart.privateName(print_daily_statistics, "PrintDailyStatistics.useDailyBasalrate");
  var showCarbs = dart.privateName(print_daily_statistics, "PrintDailyStatistics.showCarbs");
  var showBolus = dart.privateName(print_daily_statistics, "PrintDailyStatistics.showBolus");
  var showTDD = dart.privateName(print_daily_statistics, "PrintDailyStatistics.showTDD");
  var showActiveSensor = dart.privateName(print_daily_statistics, "PrintDailyStatistics.showActiveSensor");
  var params$1 = dart.privateName(print_daily_statistics, "PrintDailyStatistics.params");
  print_daily_statistics.PrintDailyStatistics = class PrintDailyStatistics extends base_print.BasePrint {
    get help() {
      return this[help$1];
    }
    set help(value) {
      this[help$1] = value;
    }
    get id() {
      return this[id$4];
    }
    set id(value) {
      this[id$4] = value;
    }
    get idx() {
      return this[idx$1];
    }
    set idx(value) {
      this[idx$1] = value;
    }
    get showHbA1c() {
      return this[showHbA1c];
    }
    set showHbA1c(value) {
      this[showHbA1c] = value;
    }
    get showStdabw() {
      return this[showStdabw];
    }
    set showStdabw(value) {
      this[showStdabw] = value;
    }
    get showCount() {
      return this[showCount];
    }
    set showCount(value) {
      this[showCount] = value;
    }
    get showValueStats() {
      return this[showValueStats];
    }
    set showValueStats(value) {
      this[showValueStats] = value;
    }
    get showPercentile() {
      return this[showPercentile];
    }
    set showPercentile(value) {
      this[showPercentile] = value;
    }
    get showVarK() {
      return this[showVarK];
    }
    set showVarK(value) {
      this[showVarK] = value;
    }
    get showBasal() {
      return this[showBasal];
    }
    set showBasal(value) {
      this[showBasal] = value;
    }
    get useDailyBasalrate() {
      return this[useDailyBasalrate$];
    }
    set useDailyBasalrate(value) {
      this[useDailyBasalrate$] = value;
    }
    get showCarbs() {
      return this[showCarbs];
    }
    set showCarbs(value) {
      this[showCarbs] = value;
    }
    get showBolus() {
      return this[showBolus];
    }
    set showBolus(value) {
      this[showBolus] = value;
    }
    get showTDD() {
      return this[showTDD];
    }
    set showTDD(value) {
      this[showTDD] = value;
    }
    get showActiveSensor() {
      return this[showActiveSensor];
    }
    set showActiveSensor(value) {
      this[showActiveSensor] = value;
    }
    get params() {
      return this[params$1];
    }
    set params(value) {
      this[params$1] = value;
    }
    static get msgParam1() {
      return intl.Intl.message("Spalte Messwerte");
    }
    static get msgParam2() {
      return intl.Intl.message("Spalte Standardabweichung");
    }
    static get msgParam3() {
      return intl.Intl.message("Spalten Perzentile");
    }
    static get msgParam4() {
      return intl.Intl.message("Spalte HbA1c");
    }
    static get msgParam5() {
      return intl.Intl.message("Spalte Variationskoeffizient");
    }
    static get msgParam6() {
      return intl.Intl.message("Basal anzeigen");
    }
    static get msgParam7() {
      return intl.Intl.message("Kohlenhydrate anzeigen");
    }
    static get msgParam8() {
      return intl.Intl.message("Min / Max Werte anzeigen");
    }
    static get msgParam9() {
      return intl.Intl.message("Bolus anzeigen");
    }
    static get msgParam10() {
      return intl.Intl.message("TDD anzeigen");
    }
    static get msgParam11() {
      return intl.Intl.message("Sensor Av");
    }
    checkValue(param, value) {
      let count = 0;
      this.params[$forEach](dart.fn(p => {
        if (dart.test(p.boolValue)) {
          count = count + 1;
        }
      }, ParamInfoLToNullN()));
      let list = this.params[$where](dart.fn(p => dart.equals(p.boolValue, false), ParamInfoLToboolL()));
      this.params[$forEach](dart.fn(p => {
        if (count > 6) {
          if (!dart.test(p.boolValue)) {
            p.isDisabled = true;
          }
        } else {
          p.isDisabled = false;
        }
      }, ParamInfoLToNullN()));
    }
    extractParams() {
      this.showCount = this.params[$_get](0).boolValue;
      this.showStdabw = this.params[$_get](1).boolValue;
      this.showPercentile = this.params[$_get](2).boolValue;
      this.showHbA1c = this.params[$_get](3).boolValue;
      this.showVarK = this.params[$_get](4).boolValue;
      this.showBasal = this.params[$_get](5).boolValue;
      this.useDailyBasalrate = this.params[$_get](5).subParams[$_get](0).boolValue;
      this.showCarbs = this.params[$_get](6).boolValue;
      this.showValueStats = this.params[$_get](7).boolValue;
      this.showBolus = this.params[$_get](8).boolValue;
      this.showTDD = this.params[$_get](9).boolValue;
      this.showActiveSensor = this.params[$_get](10).boolValue;
    }
    get estimatePageCount() {
      let t31, t31$, t31$0;
      let count = (t31$0 = (t31$ = (t31 = this.g, t31 == null ? null : t31.period), t31$ == null ? null : t31$.dayCount), t31$0 == null ? 0 : t31$0);
      count = (dart.notNull(count) / 19)[$ceil]();
      return new (IdentityMapOfStringL$ObjectL()).from(["count", count, "isEstimated", false]);
    }
    get title() {
      return intl.Intl.message("Tagesstatistik");
    }
    set title(value) {
      super.title = value;
    }
    get isPortrait() {
      return false;
    }
    get scale() {
      return 1.0;
    }
    set scale(value) {
      super.scale = value;
    }
    getTable(widths, body) {
      let ret = new (IdentityMapOfStringL$ObjectL()).from(["columns", JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$ObjectL()).from(["margin", JSArrayOfdoubleL().of([this.cm(2.2), this.cmy(dart.notNull(this.yorg) - 0.6), this.cm(2.2), this.cmy(0.0)]), "width", this.cm(this.width), "fontSize", this.fs(10.0), "table", new (IdentityMapOfStringL$dynamic()).from(["widths", widths, "body", body])])]), "pageBreak", ""]);
      return ret;
    }
    fillRow(row, f, firstCol, day, style) {
      this.addTableRow(true, this.cm(2.9), row, new (IdentityMapOfStringL$StringL()).from(["text", this.msgDate, "style", "total", "alignment", "center"]), new (IdentityMapOfStringL$StringL()).from(["text", firstCol, "style", "total", "alignment", "center"]));
      let text = this.msgDistribution;
      if (dart.test(this.showTDD)) text = dart.notNull(text) + ("\n" + dart.notNull(this.msgTDD));
      let tdd = dart.notNull(day.ieBasalSum(!dart.test(this.useDailyBasalrate))) + dart.notNull(day.ieBolusSum);
      this.addTableRow(true, this.cm(dart.notNull(f) * 100), row, new (IdentityMapOfStringL$StringL()).from(["text", text, "style", "total", "alignment", "center"]), new (IdentityMapOfStringL$ObjectL()).from(["style", style, "canvas", JSArrayOfMapL().of([new (IdentityMapOfStringL$ObjectL()).from(["type", "rect", "color", this.colLow, "x", this.cm(0), "y", this.cm(0), "w", this.cm(dart.notNull(day.lowPrz(this.g)) * dart.notNull(f)), "h", this.cm(dart.test(this.showTDD) ? 0.25 : 0.5)]), new (IdentityMapOfStringL$ObjectL()).from(["type", "rect", "color", this.colNorm, "x", this.cm(dart.notNull(day.lowPrz(this.g)) * dart.notNull(f)), "y", this.cm(0), "w", this.cm(dart.notNull(day.normPrz(this.g)) * dart.notNull(f)), "h", this.cm(dart.test(this.showTDD) ? 0.25 : 0.5)]), new (IdentityMapOfStringL$ObjectL()).from(["type", "rect", "color", this.colHigh, "x", this.cm((dart.notNull(day.lowPrz(this.g)) + dart.notNull(day.normPrz(this.g))) * dart.notNull(f)), "y", this.cm(0), "w", this.cm(dart.notNull(day.highPrz(this.g)) * dart.notNull(f)), "h", this.cm(dart.test(this.showTDD) ? 0.25 : 0.5)]), dart.test(this.showTDD) ? new (IdentityMapOfStringL$ObjectL()).from(["type", "rect", "color", this.colBasalDay, "x", this.cm(0), "y", this.cm(0.3), "w", this.cm(dart.notNull(style === "total" ? this[_basalSum] : day.ieBasalSum(!dart.test(this.useDailyBasalrate))) * dart.notNull(f) * 100 / tdd), "h", this.cm(0.25)]) : new _js_helper.LinkedMap.new(), dart.test(this.showTDD) ? new (IdentityMapOfStringL$ObjectL()).from(["type", "rect", "color", this.colBolus, "x", this.cm(dart.notNull(style === "total" ? this[_basalSum] : day.ieBasalSum(!dart.test(this.useDailyBasalrate))) * dart.notNull(f) * 100 / tdd), "y", this.cm(0.3), "w", this.cm(dart.notNull(day.ieBolusSum) * dart.notNull(f) * 100 / tdd), "h", this.cm(0.25)]) : new _js_helper.LinkedMap.new()])]));
      this.addTableRow(true, "*", row, new (IdentityMapOfStringL$StringL()).from(["text", this.msgLow(dart.dsend(this.targets(this.repData), '_get', ["low"])), "style", "total", "alignment", "center", "fillColor", this.colLow]), new (IdentityMapOfStringL$StringL()).from(["text", dart.str(this.g.fmtNumber(day.lowPrz(this.g), 1)) + " (" + dart.str(this.g.fmtNumber(day.lowerPrz(this.g), 1)) + ") %", "style", style, "alignment", "right", "fillColor", style === "total" ? this.colLow : null]));
      this.addTableRow(true, "*", row, new (IdentityMapOfStringL$StringL()).from(["text", this.msgNormal, "style", "total", "alignment", "center", "fillColor", this.colNorm]), new (IdentityMapOfStringL$StringL()).from(["text", dart.str(this.g.fmtNumber(day.normPrz(this.g), 1)) + " %", "style", style, "alignment", "right", "fillColor", style === "total" ? this.colNorm : null]));
      this.addTableRow(true, "*", row, new (IdentityMapOfStringL$StringL()).from(["text", this.msgHigh(dart.dsend(this.targets(this.repData), '_get', ["high"])), "style", "total", "alignment", "center", "fillColor", this.colHigh]), new (IdentityMapOfStringL$StringL()).from(["text", dart.str(this.g.fmtNumber(day.highPrz(this.g), 1)) + " (" + dart.str(this.g.fmtNumber(day.higherPrz(this.g), 1)) + " %)", "style", style, "alignment", "right", "fillColor", style === "total" ? this.colHigh : null]));
      this.addTableRow(this.showBasal, "auto", row, new (IdentityMapOfStringL$StringL()).from(["text", dart.str(this.msgBasal) + " " + dart.str(this.msgInsulinUnit), "style", "total", "alignment", "center"]), new (IdentityMapOfStringL$StringL()).from(["text", dart.str(this.g.fmtNumber(day.ieBasalSum(!dart.test(this.useDailyBasalrate)), 1)), "style", style, "alignment", "right"]));
      this.addTableRow(this.showBolus, "auto", row, new (IdentityMapOfStringL$StringL()).from(["text", dart.str(this.msgBolus) + " " + dart.str(this.msgInsulinUnit), "style", "total", "alignment", "center"]), new (IdentityMapOfStringL$StringL()).from(["text", dart.str(this.g.fmtNumber(day.ieBolusSum, 1)), "style", style, "alignment", "right"]));
      this.addTableRow(this.showTDD, "auto", row, new (IdentityMapOfStringL$StringL()).from(["text", dart.str(this.msgTDD) + " " + dart.str(this.msgInsulinUnit), "style", "total", "alignment", "center"]), new (IdentityMapOfStringL$StringL()).from(["text", dart.str(this.g.fmtNumber(dart.notNull(day.ieBolusSum) + dart.notNull(day.ieBasalSum(!dart.test(this.useDailyBasalrate))), 1)), "style", style, "alignment", "right"]));
      this.addTableRow(this.showCount, "auto", row, new (IdentityMapOfStringL$StringL()).from(["text", this.msgValues, "style", "total", "alignment", "center"]), new (IdentityMapOfStringL$StringL()).from(["text", dart.str(this.g.fmtNumber(day.entryCountValid, 0)), "style", style, "alignment", "right"]));
      this.addTableRow(this.showActiveSensor, "auto", row, new (IdentityMapOfStringL$StringL()).from(["text", this.msgSensorAV, "style", "total", "alignment", "center"]), new (IdentityMapOfStringL$StringL()).from(["text", dart.str(this.g.fmtNumber(day.getSensorActive, 0)) + " %", "style", style, "alignment", "right"]));
      this.addTableRow(this.showValueStats, "auto", row, new (IdentityMapOfStringL$StringL()).from(["text", this.msgMin, "style", "total", "alignment", "center"]), new (IdentityMapOfStringL$StringL()).from(["text", dart.str(this.g.glucFromData(day.min)), "style", style, "alignment", "right"]));
      this.addTableRow(this.showValueStats, "auto", row, new (IdentityMapOfStringL$StringL()).from(["text", this.msgMax, "style", "total", "alignment", "center"]), new (IdentityMapOfStringL$StringL()).from(["text", dart.str(this.g.glucFromData(day.max)), "style", style, "alignment", "right"]));
      this.addTableRow(this.showValueStats, "auto", row, new (IdentityMapOfStringL$StringL()).from(["text", this.msgAverage, "style", "total", "alignment", "center"]), new (IdentityMapOfStringL$StringL()).from(["text", dart.str(this.g.glucFromData(day.mid, 1.0)), "style", style, "alignment", "right"]));
      this.addTableRow(this.showCarbs, "auto", row, new (IdentityMapOfStringL$StringL()).from(["text", "KH\nin g", "style", "total", "alignment", "center"]), new (IdentityMapOfStringL$StringL()).from(["text", dart.str(this.carbFromData(day.carbs)), "style", style, "alignment", "right"]));
      this.addTableRow(this.showCarbs, "auto", row, new (IdentityMapOfStringL$StringL()).from(["text", this.msgKHPerMeal, "style", "total", "alignment", "center"]), new (IdentityMapOfStringL$StringL()).from(["text", dart.str(this.carbFromData(day.avgCarbs)), "style", style, "alignment", "right"]));
      this.addTableRow(this.showStdabw, "auto", row, new (IdentityMapOfStringL$StringL()).from(["text", this.msgDeviation, "style", "total", "alignment", "center"]), new (IdentityMapOfStringL$StringL()).from(["text", dart.str(this.g.fmtNumber(day.stdAbw(this.g.glucMGDL), 1)), "style", style, "alignment", "right"]));
      this.addTableRow(this.showVarK, "auto", row, new (IdentityMapOfStringL$StringL()).from(["text", this.msgVarK, "style", "total", "alignment", "center"]), new (IdentityMapOfStringL$StringL()).from(["text", dart.str(this.g.fmtNumber(day.varK, 1)), "style", style, "alignment", "right"]));
      this.addTableRow(this.showPercentile, this.cm(1.5), row, new (IdentityMapOfStringL$StringL()).from(["text", this.msg25, "style", "total", "alignment", "center"]), new (IdentityMapOfStringL$StringL()).from(["text", dart.str(this.percentileFor(globals.Globals.percentile(day.entries, 25))), "style", style, "alignment", "right"]));
      this.addTableRow(this.showPercentile, this.cm(1.5), row, new (IdentityMapOfStringL$StringL()).from(["text", this.msgMedian, "style", "total", "alignment", "center"]), new (IdentityMapOfStringL$StringL()).from(["text", dart.str(this.percentileFor(globals.Globals.percentile(day.entries, 50))), "style", style, "alignment", "right"]));
      this.addTableRow(this.showPercentile, this.cm(1.5), row, new (IdentityMapOfStringL$StringL()).from(["text", this.msg75, "style", "total", "alignment", "center"]), new (IdentityMapOfStringL$StringL()).from(["text", dart.str(this.percentileFor(globals.Globals.percentile(day.entries, 75))), "style", style, "alignment", "right"]));
      this.addTableRow(this.showHbA1c, this.cm(1.5), row, new (IdentityMapOfStringL$StringL()).from(["text", this.msgHbA1C, "style", "total", "alignment", "center", "color", this.colHbA1c]), new (IdentityMapOfStringL$StringL()).from(["text", dart.str(this.hba1c(day.mid)) + " %", "style", style, "alignment", "right", "color", this.colHbA1c]));
      this.tableHeadFilled = true;
    }
    percentileFor(value) {
      if (value === -1) return "";
      return this.g.glucFromData(value, 1.0);
    }
    fillPages(pages) {
      let oldLength = pages[$length];
      this[_fillPages](pages);
      if (dart.test(this.g.showBothUnits)) {
        this.g.glucMGDLIdx = 1;
        this[_fillPages](pages);
        this.g.glucMGDLIdx = 2;
      }
      if (dart.test(this.repData.isForThumbs) && dart.notNull(pages[$length]) - dart.notNull(oldLength) > 1) pages[$removeRange](dart.notNull(oldLength) + 1, pages[$length]);
    }
    [_fillPages](pages) {
      let t31;
      this.tableHeadFilled = false;
      this.tableHeadLine = [];
      this.tableWidths = [];
      this.titleInfo = this.titleInfoBegEnd();
      let f = 3.3;
      let body = [];
      f = f / 100;
      let prevProfile = null;
      let lineCount = 0;
      let page = [];
      let totalDay = new json_data.DayData.new(null, new json_data.ProfileGlucData.new(new json_data.ProfileStoreData.new("Intern")));
      totalDay.basalData.store.listBasal = JSArrayOfProfileEntryDataL().of([]);
      totalDay.basalData.targetHigh = 0.0;
      totalDay.basalData.targetLow = 1000.0;
      totalDay.totalCount = 0;
      let totalDays = 0;
      this[_maxTDD] = 0.0;
      this[_basalSum] = 0.0;
      for (let i = 0; i < dart.notNull(this.repData.data.days[$length]); i = i + 1) {
        let day = this.repData.data.days[$_get](dart.test(this.g.ppLatestFirst) ? dart.notNull(this.repData.data.days[$length]) - 1 - i : i);
        day.init();
        if (day.entryCountValid === 0) continue;
        this[_basalSum] = dart.notNull(this[_basalSum]) + dart.notNull(day.ieBasalSum(!dart.test(this.useDailyBasalrate)));
        this[_maxTDD] = math.max(doubleL(), this[_maxTDD], dart.notNull(day.ieBasalSum(!dart.test(this.useDailyBasalrate))) + dart.notNull(day.ieBolusSum));
      }
      for (let i = 0; i < dart.notNull(this.repData.data.days[$length]); i = i + 1) {
        let day = this.repData.data.days[$_get](dart.test(this.g.ppLatestFirst) ? dart.notNull(this.repData.data.days[$length]) - 1 - i : i);
        if (day.entryCountValid === 0) continue;
        totalDays = totalDays + 1;
        totalDay.entries[$addAll](day.entries);
        t31 = totalDay;
        t31.totalCount = dart.notNull(t31.totalCount) + dart.notNull(day.totalCount);
        totalDay.bloody[$addAll](day.bloody);
        totalDay.treatments[$addAll](day.treatments);
        totalDay.profile[$addAll](day.profile);
        totalDay.basalData.store.listBasal[$addAll](day.basalData.store.listBasal);
        totalDay.basalData.targetHigh = math.max(doubleL(), totalDay.basalData.targetHigh, day.basalData.targetHigh);
        totalDay.basalData.targetLow = math.min(doubleL(), totalDay.basalData.targetLow, day.basalData.targetLow);
        let row = [];
        this.fillRow(row, f, this.fmtDate(day.date, null, true), day, "row");
        let profile = this.repData.profile(new core.DateTime.new(day.date.year, day.date.month, day.date.day));
        if (prevProfile == null || profile.targetLow != prevProfile.targetLow || profile.targetHigh != prevProfile.targetHigh) {
          body[$add](this.tableHeadLine);
          lineCount = lineCount + 2;
        }
        prevProfile = profile;
        body[$add](row);
        lineCount = lineCount + 1;
        if (lineCount === 21) {
          page[$add](this.headerFooter());
          page[$add](this.getTable(this.tableWidths, body));
          lineCount = 0;
          pages[$add](new base_print.Page.new(this.isPortrait, page));
          page = [];
          body = [];
          prevProfile = null;
        }
      }
      let row = [];
      totalDay.init({nextDay: null, keepProfile: true});
      this.fillRow(row, f, this.msgDaySum(totalDays), totalDay, "total");
      body[$add](row);
      if (prevProfile != null) {
        page[$add](this.headerFooter());
        page[$add](this.getTable(this.tableWidths, body));
        pages[$add](new base_print.Page.new(this.isPortrait, page));
      } else {
        let test = MapL().as(pages[$last].content[$last]);
        dart.dsend(dart.dsend(dart.dsend(dart.dload(test[$_get]("columns"), 'last'), '_get', ["table"]), '_get', ["body"]), 'add', [body[$last]]);
      }
    }
  };
  (print_daily_statistics.PrintDailyStatistics.new = function() {
    this[help$1] = intl.Intl.message("Dieses Formular zeigt die statistischen Werte für die Tage des ausgewählten Zeitraums\nan. Für jeden Tag wird eine Zeile erzeugt. Die Spalten kann man teilweise konfigurieren. Auch hier wird der geschätzte \nHbA1c ausgegeben. Dieser hat wie auch im Formular @01@ nur sehr wenig Aussagekraft, weshalb er auch hier nur mit \nschwächerer Schrift angezeigt wird.\n", {desc: "help for daystats"});
    this[id$4] = "daystats";
    this[idx$1] = "04";
    this[showHbA1c] = null;
    this[showStdabw] = null;
    this[showCount] = null;
    this[showValueStats] = null;
    this[showPercentile] = null;
    this[showVarK] = null;
    this[showBasal] = null;
    this[useDailyBasalrate$] = null;
    this[showCarbs] = null;
    this[showBolus] = null;
    this[showTDD] = null;
    this[showActiveSensor] = null;
    this[_maxTDD] = 0.0;
    this[_basalSum] = 0.0;
    this[params$1] = JSArrayOfParamInfoL().of([new base_print.ParamInfo.new(0, print_daily_statistics.PrintDailyStatistics.msgParam1, {boolValue: true}), new base_print.ParamInfo.new(3, print_daily_statistics.PrintDailyStatistics.msgParam2, {boolValue: true}), new base_print.ParamInfo.new(4, print_daily_statistics.PrintDailyStatistics.msgParam3, {boolValue: true}), new base_print.ParamInfo.new(5, print_daily_statistics.PrintDailyStatistics.msgParam4, {boolValue: true}), new base_print.ParamInfo.new(6, print_daily_statistics.PrintDailyStatistics.msgParam5, {boolValue: false}), new base_print.ParamInfo.new(7, print_daily_statistics.PrintDailyStatistics.msgParam6, {boolValue: false, subParams: JSArrayOfParamInfoL().of([new base_print.ParamInfo.new(0, base_print.BasePrint.msgUseDailyBasalrate, {boolValue: true, isLoopValue: true})])}), new base_print.ParamInfo.new(10, print_daily_statistics.PrintDailyStatistics.msgParam7, {boolValue: false}), new base_print.ParamInfo.new(1, print_daily_statistics.PrintDailyStatistics.msgParam8, {boolValue: false}), new base_print.ParamInfo.new(8, print_daily_statistics.PrintDailyStatistics.msgParam9, {boolValue: false}), new base_print.ParamInfo.new(9, print_daily_statistics.PrintDailyStatistics.msgParam10, {boolValue: false}), new base_print.ParamInfo.new(9, print_daily_statistics.PrintDailyStatistics.msgParam11, {boolValue: false})]);
    print_daily_statistics.PrintDailyStatistics.__proto__.new.call(this);
    this.init();
  }).prototype = print_daily_statistics.PrintDailyStatistics.prototype;
  dart.addTypeTests(print_daily_statistics.PrintDailyStatistics);
  dart.addTypeCaches(print_daily_statistics.PrintDailyStatistics);
  dart.setMethodSignature(print_daily_statistics.PrintDailyStatistics, () => ({
    __proto__: dart.getMethods(print_daily_statistics.PrintDailyStatistics.__proto__),
    fillRow: dart.fnType(dart.void, [dart.dynamic, dart.legacy(core.double), dart.legacy(core.String), dart.legacy(json_data.DayData), dart.legacy(core.String)]),
    percentileFor: dart.fnType(dart.legacy(core.String), [dart.legacy(core.double)]),
    fillPages: dart.fnType(dart.void, [dart.legacy(core.List$(dart.legacy(base_print.Page)))]),
    [_fillPages]: dart.fnType(dart.void, [dart.legacy(core.List$(dart.legacy(base_print.Page)))])
  }));
  dart.setGetterSignature(print_daily_statistics.PrintDailyStatistics, () => ({
    __proto__: dart.getGetters(print_daily_statistics.PrintDailyStatistics.__proto__),
    estimatePageCount: dart.dynamic,
    title: dart.legacy(core.String),
    scale: dart.legacy(core.double)
  }));
  dart.setLibraryUri(print_daily_statistics.PrintDailyStatistics, L10);
  dart.setFieldSignature(print_daily_statistics.PrintDailyStatistics, () => ({
    __proto__: dart.getFields(print_daily_statistics.PrintDailyStatistics.__proto__),
    help: dart.fieldType(dart.legacy(core.String)),
    id: dart.fieldType(dart.legacy(core.String)),
    idx: dart.fieldType(dart.legacy(core.String)),
    showHbA1c: dart.fieldType(dart.legacy(core.bool)),
    showStdabw: dart.fieldType(dart.legacy(core.bool)),
    showCount: dart.fieldType(dart.legacy(core.bool)),
    showValueStats: dart.fieldType(dart.legacy(core.bool)),
    showPercentile: dart.fieldType(dart.legacy(core.bool)),
    showVarK: dart.fieldType(dart.legacy(core.bool)),
    showBasal: dart.fieldType(dart.legacy(core.bool)),
    useDailyBasalrate: dart.fieldType(dart.legacy(core.bool)),
    showCarbs: dart.fieldType(dart.legacy(core.bool)),
    showBolus: dart.fieldType(dart.legacy(core.bool)),
    showTDD: dart.fieldType(dart.legacy(core.bool)),
    showActiveSensor: dart.fieldType(dart.legacy(core.bool)),
    [_maxTDD]: dart.fieldType(dart.legacy(core.double)),
    [_basalSum]: dart.fieldType(dart.legacy(core.double)),
    params: dart.fieldType(dart.legacy(core.List$(dart.legacy(base_print.ParamInfo))))
  }));
  var firstGluc = dart.privateName(base_profile, "CalcData.firstGluc");
  var firstTime = dart.privateName(base_profile, "CalcData.firstTime");
  var lastTime = dart.privateName(base_profile, "CalcData.lastTime");
  var bolusTime = dart.privateName(base_profile, "CalcData.bolusTime");
  var glucMax = dart.privateName(base_profile, "CalcData.glucMax");
  var brBolusTime = dart.privateName(base_profile, "CalcData.brBolusTime");
  var endDate$0 = dart.privateName(base_profile, "CalcData.endDate");
  var nextBRTimes = dart.privateName(base_profile, "CalcData.nextBRTimes");
  base_profile.CalcData = class CalcData extends core.Object {
    get firstGluc() {
      return this[firstGluc];
    }
    set firstGluc(value) {
      this[firstGluc] = value;
    }
    get firstTime() {
      return this[firstTime];
    }
    set firstTime(value) {
      this[firstTime] = value;
    }
    get lastTime() {
      return this[lastTime];
    }
    set lastTime(value) {
      this[lastTime] = value;
    }
    get bolusTime() {
      return this[bolusTime];
    }
    set bolusTime(value) {
      this[bolusTime] = value;
    }
    get glucMax() {
      return this[glucMax];
    }
    set glucMax(value) {
      this[glucMax] = value;
    }
    get brBolusTime() {
      return this[brBolusTime];
    }
    set brBolusTime(value) {
      this[brBolusTime] = value;
    }
    get endDate() {
      return this[endDate$0];
    }
    set endDate(value) {
      this[endDate$0] = value;
    }
    get nextBRTimes() {
      return this[nextBRTimes];
    }
    set nextBRTimes(value) {
      this[nextBRTimes] = value;
    }
  };
  (base_profile.CalcData.new = function() {
    this[firstGluc] = 0.0;
    this[firstTime] = 0;
    this[lastTime] = 0;
    this[bolusTime] = 0;
    this[glucMax] = 0;
    this[brBolusTime] = null;
    this[endDate$0] = null;
    this[nextBRTimes] = JSArrayOfProfileEntryDataL().of([]);
    ;
  }).prototype = base_profile.CalcData.prototype;
  dart.addTypeTests(base_profile.CalcData);
  dart.addTypeCaches(base_profile.CalcData);
  dart.setLibraryUri(base_profile.CalcData, L11);
  dart.setFieldSignature(base_profile.CalcData, () => ({
    __proto__: dart.getFields(base_profile.CalcData.__proto__),
    firstGluc: dart.fieldType(dart.legacy(core.double)),
    firstTime: dart.fieldType(dart.legacy(core.int)),
    lastTime: dart.fieldType(dart.legacy(core.int)),
    bolusTime: dart.fieldType(dart.legacy(core.int)),
    glucMax: dart.fieldType(dart.legacy(core.int)),
    brBolusTime: dart.fieldType(dart.legacy(core.int)),
    endDate: dart.fieldType(dart.legacy(core.DateTime)),
    nextBRTimes: dart.fieldType(dart.legacy(core.List$(dart.legacy(json_data.ProfileEntryData))))
  }));
  var onlyLast = dart.privateName(base_profile, "BaseProfile.onlyLast");
  var params$2 = dart.privateName(base_profile, "BaseProfile.params");
  var mayShowBothUnits = dart.privateName(base_profile, "BaseProfile.mayShowBothUnits");
  var profStartTime = dart.privateName(base_profile, "BaseProfile.profStartTime");
  var profEndTime = dart.privateName(base_profile, "BaseProfile.profEndTime");
  base_profile.BaseProfile = class BaseProfile extends base_print.BasePrint {
    get onlyLast() {
      return this[onlyLast];
    }
    set onlyLast(value) {
      this[onlyLast] = value;
    }
    get params() {
      return this[params$2];
    }
    set params(value) {
      this[params$2] = value;
    }
    get mayShowBothUnits() {
      return this[mayShowBothUnits];
    }
    set mayShowBothUnits(value) {
      this[mayShowBothUnits] = value;
    }
    get profStartTime() {
      return this[profStartTime];
    }
    set profStartTime(value) {
      this[profStartTime] = value;
    }
    get profEndTime() {
      return this[profEndTime];
    }
    set profEndTime(value) {
      this[profEndTime] = value;
    }
    msgProfileSwitch(oldName, newName) {
      return intl.Intl.message("Profilwechsel - " + dart.str(oldName) + " => " + dart.str(newName), {args: JSArrayOfObjectL().of([oldName, newName]), name: "msgProfileSwitch"});
    }
    msgProfileSwitchDuration(oldName, newName, duration) {
      return intl.Intl.message("Profilwechsel - " + dart.str(oldName) + " => " + dart.str(newName) + " für " + dart.str(duration) + " Minuten", {args: JSArrayOfObjectL().of([oldName, newName, duration]), name: "msgProfileSwitchDuration"});
    }
    msgChangedEntry(name, from, to) {
      return intl.Intl.message(dart.str(name) + " " + dart.str(from) + " => " + dart.str(to), {args: JSArrayOfObjectL().of([name, from, to]), name: "msgChangedEntry"});
    }
    get msgNoChange() {
      return intl.Intl.message("Keine Änderung");
    }
    get isPortrait() {
      return false;
    }
    hasData(src) {
      return src.profiles[$isNotEmpty];
    }
    fillPages(pages) {
      let startDate = new core.DateTime.new(this.repData.begDate.year, this.repData.begDate.month, this.repData.begDate.day);
      let endDate = new core.DateTime.new(this.repData.endDate.year, this.repData.endDate.month, dart.notNull(this.repData.endDate.day) + 1);
      let profiles = this.repData.profiles;
      let _alreadyDone = JSArrayOfStringL().of([]);
      let pageList = JSArrayOfPageL().of([]);
      let lastIdx = -1;
      for (let i = 0; i < dart.notNull(this.repData.profiles[$length]); i = i + 1) {
        this.profEndTime;
        this.profStartTime = this.repData.profiles[$_get](i).startDate;
        if (i < dart.notNull(this.repData.profiles[$length]) - 1) {
          this.profEndTime = this.repData.profiles[$_get](i + 1).startDate.add(new core.Duration.new({minutes: -1}));
        } else {
          this.profEndTime = null;
        }
        if (this.profEndTime != null && dart.test(this.profEndTime.isBefore(startDate))) continue;
        if (dart.test(this.profStartTime.isAfter(endDate))) continue;
        let done = false;
        let calc = new base_profile.CalcData.new();
        if (i < dart.notNull(this.repData.profiles[$length]) - 1) {
          calc.nextBRTimes = this.repData.profiles[$_get](i + 1).current.listBasal;
          calc.endDate = this.repData.profiles[$_get](i + 1).startDate.add(new core.Duration.new({days: -1}));
          if (dart.notNull(startDate.difference(this.repData.profiles[$_get](i + 1).startDate).inHours) >= 0) continue;
        } else {
          calc.nextBRTimes = this.repData.profiles[$_get](i).current.listBasal;
          calc.endDate = null;
        }
        let hash = this.repData.profiles[$_get](i).current.hash;
        if (dart.test(_alreadyDone[$contains](hash))) {
          continue;
        }
        _alreadyDone[$add](hash);
        lastIdx = pageList[$length];
        for (let p = 0; !done; p = p + 1) {
          let page = this.getPage(p, this.repData.profile(profiles[$_get](i).startDate, null, false), calc);
          done = page == null;
          if (!done) {
            pageList[$add](page);
            if (dart.test(this.g.showBothUnits) && dart.test(this.mayShowBothUnits)) {
              this.g.glucMGDLIdx = 1;
              pageList[$add](this.getPage(p, this.repData.profile(profiles[$_get](i).startDate, null, false), calc));
              this.g.glucMGDLIdx = 2;
            }
          }
        }
      }
      if ((dart.test(this.onlyLast) || dart.test(this.repData.isForThumbs)) && dart.test(pageList[$isNotEmpty])) pageList[$removeRange](0, lastIdx);
      pages[$addAll](pageList);
    }
    get isSingleDay() {
      return this.profEndTime != null && dart.notNull(this.profEndTime.difference(this.profStartTime).inHours) < 24;
    }
    isSingleDayRange(startTime, endTime) {
      if (dart.test(startTime.isAfter(this.profEndTime))) {
        return false;
      } else if (dart.test(endTime.isBefore(this.profStartTime))) {
        return false;
      }
      return true;
    }
    getProfileSwitch(src, day, t, showDetails) {
      let ret = JSArrayOfStringL().of([]);
      let before = src.profile(t.createdAt.add(new core.Duration.new({days: -1})));
      let current = src.profile(t.createdAt);
      if (dart.notNull(t.duration) > 0) {
        ret[$add](this.msgProfileSwitchDuration(before.store.name, current.store.name, (dart.notNull(t.duration) / 60)[$truncate]()));
      } else {
        ret[$add](this.msgProfileSwitch(before.store.name, current.store.name));
      }
      if (!dart.test(showDetails)) return ret[$join]("\n");
      if (before.store.dia != current.store.dia) {
        ret[$add](this.msgChangedEntry(this.msgDIA, dart.str(this.g.fmtNumber(before.store.dia, 2)) + " " + dart.str(this.msgDIAUnit), dart.str(this.g.fmtNumber(current.store.dia, 2)) + " " + dart.str(this.msgDIAUnit)));
      }
      if (before.store.carbsHr != current.store.carbsHr) {
        ret[$add](this.msgChangedEntry(this.msgKHA, dart.str(this.g.fmtNumber(before.store.carbsHr)) + " " + dart.str(this.msgKHAUnit), dart.str(this.g.fmtNumber(current.store.carbsHr)) + " " + dart.str(this.msgKHAUnit)));
      }
      let temp = JSArrayOfStringL().of([]);
      temp[$add](this.msgTargetTitle);
      if (current.store.listTargetHigh[$length] == current.store.listTargetLow[$length]) {
        for (let i = 0; i < dart.notNull(current.store.listTargetHigh[$length]); i = i + 1) {
          let currHigh = current.store.listTargetHigh[$_get](i);
          let currLow = current.store.listTargetLow[$_get](i);
          let highTime = currHigh.time(day.date);
          let lowTime = currLow.time(day.date);
          if (!dart.equals(highTime, lowTime)) continue;
          let lowChanged = false;
          let highChanged = false;
          let oldLow = null;
          let oldHigh = null;
          let idx = before.store.listTargetLow[$indexWhere](dart.fn(entry => dart.equals(entry.time(day.date), lowTime), ProfileEntryDataLToboolL()));
          if (dart.notNull(idx) < 0) {
            lowChanged = true;
          } else {
            lowChanged = before.store.listTargetLow[$_get](idx).value != currLow.value;
          }
          if (lowChanged && dart.notNull(idx) >= 0) oldLow = before.store.listTargetLow[$_get](idx).value;
          idx = before.store.listTargetHigh[$indexWhere](dart.fn(entry => dart.equals(entry.time(day.date), highTime), ProfileEntryDataLToboolL()));
          if (dart.notNull(idx) < 0) {
            highChanged = true;
          } else {
            highChanged = before.store.listTargetHigh[$_get](idx).value != currHigh.value;
          }
          if (highChanged && dart.notNull(idx) >= 0) oldHigh = before.store.listTargetHigh[$_get](idx).value;
          if (lowChanged || highChanged) {
            if (oldLow == null || oldHigh == null) {
              temp[$add]("ab " + dart.str(this.fmtTime(highTime, {withUnit: true})) + " neuer Bereich " + dart.str(this.g.fmtBasal(currLow.value)) + " - " + dart.str(this.g.fmtBasal(currHigh.value)));
            } else {
              temp[$add]("ab " + dart.str(this.fmtTime(highTime, {withUnit: true})) + " " + dart.str(oldLow) + " - " + dart.str(this.g.fmtBasal(oldHigh)) + " => " + dart.str(currLow.value) + " - " + dart.str(this.g.fmtBasal(currHigh.value)));
            }
          }
        }
        if (dart.notNull(temp[$length]) > 1) ret[$addAll](temp);
        this.getProfileEntriesChanged(ret, day, this.msgBasalTitle, current.store.listBasal, before.store.listBasal);
        this.getProfileEntriesChanged(ret, day, this.msgISFTitle, current.store.listSens, before.store.listSens);
        this.getProfileEntriesChanged(ret, day, this.msgICRTitle, current.store.listCarbratio, before.store.listCarbratio);
      }
      if (ret[$length] === 1) ret[$add](this.msgNoChange);
      return ret[$join]("\n");
    }
    getProfileEntriesChanged(list, day, title, current, before) {
      let t31;
      let ret = JSArrayOfStringL().of([]);
      for (let i = 0; i < dart.notNull(current[$length]); i = i + 1) {
        let entry = current[$_get](i);
        let time = current[$_get](i).time(day.date);
        let old = before[$firstWhere](dart.fn(entry => dart.equals(entry.time(day.date), time), ProfileEntryDataLToboolL()), {orElse: dart.fn(() => null, VoidToNullN())});
        let hasChanged = false;
        if (old == null) {
          hasChanged = true;
        } else if (old.value != entry.value) hasChanged = true;
        if (hasChanged) {
          if (old == null) {
            ret[$add]("ab " + dart.str(this.fmtTime(time, {withUnit: true})) + ": neuer Wert " + dart.str(this.g.fmtBasal((t31 = entry, t31 == null ? null : t31.value))));
          } else if (entry == null) {
            ret[$add]("ab " + dart.str(this.fmtTime(time, {withUnit: true})) + ": " + dart.str(this.g.fmtBasal(old.value)) + " gelöscht");
          } else {
            ret[$add]("ab " + dart.str(this.fmtTime(time, {withUnit: true})) + ": " + dart.str(this.g.fmtBasal(old.value)) + " => " + dart.str(this.g.fmtBasal(entry.value)));
          }
        }
      }
      if (dart.test(ret[$isNotEmpty])) {
        list[$add](title);
        list[$addAll](ret);
      }
    }
  };
  (base_profile.BaseProfile.new = function() {
    this[onlyLast] = null;
    this[params$2] = JSArrayOfParamInfoL().of([]);
    this[mayShowBothUnits] = true;
    this[profStartTime] = null;
    this[profEndTime] = null;
    base_profile.BaseProfile.__proto__.new.call(this);
    this.init();
  }).prototype = base_profile.BaseProfile.prototype;
  dart.addTypeTests(base_profile.BaseProfile);
  dart.addTypeCaches(base_profile.BaseProfile);
  dart.setMethodSignature(base_profile.BaseProfile, () => ({
    __proto__: dart.getMethods(base_profile.BaseProfile.__proto__),
    msgProfileSwitch: dart.fnType(dart.legacy(core.String), [dart.legacy(core.String), dart.legacy(core.String)]),
    msgProfileSwitchDuration: dart.fnType(dart.legacy(core.String), [dart.legacy(core.String), dart.legacy(core.String), dart.legacy(core.int)]),
    msgChangedEntry: dart.fnType(dart.legacy(core.String), [dart.legacy(core.String), dart.legacy(core.String), dart.legacy(core.String)]),
    fillPages: dart.fnType(dart.void, [dart.legacy(core.List$(dart.legacy(base_print.Page)))]),
    isSingleDayRange: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.DateTime), dart.legacy(core.DateTime)]),
    getProfileSwitch: dart.fnType(dart.legacy(core.String), [dart.legacy(json_data.ReportData), dart.legacy(json_data.DayData), dart.legacy(json_data.TreatmentData), dart.legacy(core.bool)]),
    getProfileEntriesChanged: dart.fnType(dart.void, [dart.legacy(core.List$(dart.legacy(core.String))), dart.legacy(json_data.DayData), dart.legacy(core.String), dart.legacy(core.List$(dart.legacy(json_data.ProfileEntryData))), dart.legacy(core.List$(dart.legacy(json_data.ProfileEntryData)))])
  }));
  dart.setGetterSignature(base_profile.BaseProfile, () => ({
    __proto__: dart.getGetters(base_profile.BaseProfile.__proto__),
    msgNoChange: dart.legacy(core.String),
    isSingleDay: dart.legacy(core.bool)
  }));
  dart.setLibraryUri(base_profile.BaseProfile, L11);
  dart.setFieldSignature(base_profile.BaseProfile, () => ({
    __proto__: dart.getFields(base_profile.BaseProfile.__proto__),
    onlyLast: dart.fieldType(dart.legacy(core.bool)),
    params: dart.fieldType(dart.legacy(core.List$(dart.legacy(base_print.ParamInfo)))),
    mayShowBothUnits: dart.fieldType(dart.legacy(core.bool)),
    profStartTime: dart.fieldType(dart.legacy(core.DateTime)),
    profEndTime: dart.fieldType(dart.legacy(core.DateTime))
  }));
  var help$2 = dart.privateName(print_basalrate, "PrintBasalrate.help");
  var id$5 = dart.privateName(print_basalrate, "PrintBasalrate.id");
  var idx$2 = dart.privateName(print_basalrate, "PrintBasalrate.idx");
  var mayShowBothUnits$ = dart.privateName(print_basalrate, "PrintBasalrate.mayShowBothUnits");
  var params$3 = dart.privateName(print_basalrate, "PrintBasalrate.params");
  var lineWidth = dart.privateName(print_basalrate, "PrintBasalrate.lineWidth");
  print_basalrate.PrintBasalrate = class PrintBasalrate extends base_profile.BaseProfile {
    get help() {
      return this[help$2];
    }
    set help(value) {
      this[help$2] = value;
    }
    get id() {
      return this[id$5];
    }
    set id(value) {
      this[id$5] = value;
    }
    get idx() {
      return this[idx$2];
    }
    set idx(value) {
      this[idx$2] = value;
    }
    get mayShowBothUnits() {
      return this[mayShowBothUnits$];
    }
    set mayShowBothUnits(value) {
      this[mayShowBothUnits$] = value;
    }
    get params() {
      return this[params$3];
    }
    set params(value) {
      this[params$3] = value;
    }
    get lineWidth() {
      return this[lineWidth];
    }
    set lineWidth(value) {
      this[lineWidth] = value;
    }
    get title() {
      return this.msgBasalrate;
    }
    set title(value) {
      super.title = value;
    }
    static get msgParam1() {
      return intl.Intl.message("Nur letzte Basalrate ausgeben");
    }
    get isPortrait() {
      return false;
    }
    get imgList() {
      return JSArrayOfStringL().of(["nightscout"]);
    }
    extractParams() {
      this.onlyLast = this.params[$_get](0).boolValue;
    }
    get estimatePageCount() {
      return new (IdentityMapOfStringL$ObjectL()).from(["count", 1, "isEstimated", !dart.test(this.onlyLast)]);
    }
    glucX(time) {
      return dart.notNull(print_basalrate.PrintBasalrate.graphWidth) / 1440 * (dart.notNull(time.hour) * 60 + dart.notNull(time.minute));
    }
    getPage(page, profile, calc) {
      if (dart.notNull(page) > 0) return null;
      this.subtitle = profile.store.name;
      this.titleInfo = this.msgValidFrom(this.fmtDateTime(profile.store.startDate));
      let xo = this.xorg;
      let yo = this.yorg;
      let brMax = 0.0;
      let brtimes = profile.store.listBasal;
      for (let i = 0; i < dart.notNull(brtimes[$length]); i = i + 1) {
        brMax = math.max(doubleL(), brtimes[$_get](i).value, brMax);
      }
      let step = brMax > 6 ? 0.5 : brMax > 3 ? 0.2 : 0.1;
      let gridLines = (brMax / step + 1)[$floor]();
      let lineHeight = dart.notNull(print_basalrate.PrintBasalrate.gridHeight) / gridLines;
      let colWidth = dart.notNull(print_basalrate.PrintBasalrate.gridWidth) / 25;
      let lw = this.cm(0.03);
      let lc = "#a0a0a0";
      let vertLines = new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(xo), "y", this.cm(yo)]), "canvas", []]);
      let horzLines = new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(dart.notNull(xo) - 0.2), "y", this.cm(yo)]), "canvas", []]);
      let horzLegend = new (IdentityMapOfStringL$ListL()).from(["stack", []]);
      let vertCvs = ListL().as(vertLines[$_get]("canvas"));
      let horzCvs = ListL().as(vertLines[$_get]("canvas"));
      let horzStack = horzLegend[$_get]("stack");
      for (let i = 0; i < 25; i = i + 1) {
        vertCvs[$add](new (IdentityMapOfStringL$ObjectL()).from(["type", "line", "x1", this.cm(i * colWidth), "y1", this.cm(0), "x2", this.cm(i * colWidth), "y2", this.cm(lineHeight * gridLines + 0.25), "lineWidth", lw, "lineColor", i > 0 && i < 24 ? lc : this.lcFrame]));
        if (i < 24) {
          vertCvs[$add](new (IdentityMapOfStringL$ObjectL()).from(["type", "line", "x1", this.cm((i + 0.5) * colWidth), "y1", this.cm(lineHeight * gridLines), "x2", this.cm((i + 0.5) * colWidth), "y2", this.cm(lineHeight * gridLines + 0.1), "lineWidth", lw, "lineColor", lc]));
          horzCvs[$add](new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(dart.notNull(xo) + i * colWidth), "y", this.cm(dart.notNull(yo) + gridLines * lineHeight + 0.3)]), "text", this.g.fmtNumber(i, 0), "fontSize", this.fs(8.0)]));
          horzStack[$add](new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(dart.notNull(xo) + i * colWidth), "y", this.cm(dart.notNull(yo) + gridLines * lineHeight + 0.3)]), "text", this.fmtTime(i, {def: "0"}), "fontSize", this.fs(8.0)]));
        }
      }
      let vertLegend = new (IdentityMapOfStringL$ListL()).from(["stack", []]);
      let vertStack = vertLegend[$_get]("stack");
      for (let i = 0; i <= gridLines; i = i + 1) {
        horzCvs[$add](new (IdentityMapOfStringL$ObjectL()).from(["type", "line", "x1", this.cm(-0.2), "y1", dart.notNull(this.cm((gridLines - i) * lineHeight)) - dart.notNull(lw) / 2, "x2", this.cm(24 * colWidth + 0.2), "y2", dart.notNull(this.cm((gridLines - i) * lineHeight)) - dart.notNull(lw) / 2, "lineWidth", lw, "lineColor", i > 0 ? lc : this.lcFrame]));
        let text = dart.str(this.g.fmtNumber(i * step, 1)) + " " + dart.str(this.msgInsulinUnit);
        vertStack[$add](new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(dart.notNull(xo) - 1.0), "y", this.cm(dart.notNull(yo) + (gridLines - i) * lineHeight - 0.15)]), "text", text, "fontSize", this.fs(8.0)]));
        vertStack[$add](new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(dart.notNull(xo) + colWidth * 24 + 0.3), "y", this.cm(dart.notNull(yo) + (gridLines - i) * lineHeight - 0.15)]), "text", text, "fontSize", this.fs(8.0)]));
      }
      let testArea = new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(xo), "y", this.cm(yo)]), "canvas", []]);
      let glucArea = new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(xo), "y", this.cm(yo)]), "canvas", []]);
      let glucValues = new (IdentityMapOfStringL$ListL()).from(["stack", []]);
      let brArea = new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(xo), "y", this.cm(yo)]), "canvas", []]);
      let brAreaCvs = ListL().as(brArea[$_get]("canvas"));
      let date = new date$.Date.new(this.profStartTime.year, this.profStartTime.month, this.profStartTime.day);
      for (let i = 0; i < dart.notNull(brtimes[$length]); i = i + 1) {
        let x = this.glucX(brtimes[$_get](i).time(date));
        let w = 0.0;
        if (i < dart.notNull(brtimes[$length]) - 1) {
          w = dart.notNull(this.glucX(brtimes[$_get](i + 1).time(date))) - dart.notNull(x);
        } else {
          w = dart.notNull(print_basalrate.PrintBasalrate.graphWidth) - dart.notNull(x);
        }
        let showBar = true;
        if (showBar) {
          brAreaCvs[$add](new (IdentityMapOfStringL$ObjectL()).from(["type", "rect", "x", this.cm(x), "y", this.cm(lineHeight * gridLines), "w", this.cm(w), "h", this.cm(-dart.notNull(brtimes[$_get](i).value) / step * lineHeight), "color", this.colBasalProfile]));
        }
      }
      xo = dart.notNull(xo) - 1.0;
      yo = dart.notNull(yo) + (lineHeight * gridLines + 1.5);
      lineHeight = 0.7;
      let brTable = new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(xo), "y", this.cm(yo)]), "canvas", []]);
      let brTableCvs = ListL().as(brTable[$_get]("canvas"));
      brTableCvs[$add](new (IdentityMapOfStringL$ObjectL()).from(["type", "rect", "x", this.cm(0), "y", this.cm(0), "w", this.cm(24 * colWidth + 2.0), "h", this.cm(lineHeight), "color", this.colBasalProfile]));
      brTableCvs[$add](new (IdentityMapOfStringL$ObjectL()).from(["type", "rect", "x", this.cm(0), "y", this.cm(lineHeight), "w", this.cm(24 * colWidth + 2.0), "h", this.cm(lineHeight), "color", this.blendColor(this.colBasalProfile, "#ffffff", 0.5)]));
      brTableCvs[$add](new (IdentityMapOfStringL$ObjectL()).from(["type", "line", "x1", this.cm(0), "y1", this.cm(0), "x2", this.cm(0), "y2", this.cm(2 * lineHeight), "lineWidth", lw, "lineColor", lc]));
      brTableCvs[$add](new (IdentityMapOfStringL$ObjectL()).from(["type", "line", "x1", this.cm(24 * colWidth + 2.0), "y1", this.cm(0), "x2", this.cm(24 * colWidth + 2.0), "y2", this.cm(2 * lineHeight), "lineWidth", lw, "lineColor", lc]));
      for (let i = 0; i < 3; i = i + 1) {
        brTableCvs[$add](new (IdentityMapOfStringL$ObjectL()).from(["type", "line", "x1", this.cm(0), "y1", this.cm(i * lineHeight), "x2", this.cm(24 * colWidth + 2.0), "y2", this.cm(i * lineHeight), "lineWidth", lw, "lineColor", lc]));
      }
      let brLegend = new (IdentityMapOfStringL$ObjectL()).from(["lineHeight", lineHeight, "stack", JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(xo), "y", this.cm(dart.notNull(yo) + 0.05)]), "columns", JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$ObjectL()).from(["width", this.cm(1), "text", this.msgTimeShort, "fontSize", this.fs(8.0), "color", this.colBasalFont, "alignment", "center"])])]), new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(xo), "y", this.cm(dart.notNull(yo) + lineHeight + 0.2)]), "columns", JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$ObjectL()).from(["width", this.cm(1), "text", this.msgInsulinUnit, "fontSize", this.fs(8.0), "alignment", "center"])])])])]);
      let legendTime = ListL().as(dart.dsend(ListL().as(brLegend[$_get]("stack"))[$_get](0), '_get', ["columns"]));
      let legendIE = ListL().as(dart.dsend(ListL().as(brLegend[$_get]("stack"))[$_get](1), '_get', ["columns"]));
      let ieSum = 0.0;
      let m = JSArrayOfdoubleL().of([this.cm(0.1), this.cm(0.17), this.cm(0), this.cm(0)]);
      for (let i = 0; i < 25; i = i + 1) {
        m[$_set](0, this.cm(0.5));
        brTableCvs[$add](new (IdentityMapOfStringL$ObjectL()).from(["type", "line", "x1", this.cm(1 + i * colWidth), "y1", this.cm(0), "x2", this.cm(1 + i * colWidth), "y2", this.cm(2 * lineHeight), "lineWidth", lw, "lineColor", lc]));
        let text = new (IdentityMapOfStringL$ObjectL()).from(["width", this.cm(colWidth), "margin", JSArrayOfdoubleL().of([i < 24 ? this.cm(0.15) : this.cm(0), this.cm(0.15), this.cm(0), this.cm(0)]), "text", i < 24 ? this.g.fmtNumber(i) : this.msgTotal, "fontSize", this.fs(8.0), "color", this.colBasalFont, "alignment", i < 24 ? "left" : "center"]);
        legendTime[$add](text);
      }
      let m1 = JSArrayOfdoubleL().of([this.cm(0), this.cm(0), this.cm(0), this.cm(0)]);
      let m2 = JSArrayOfdoubleL().of([this.cm(0), this.cm(0.15), this.cm(0), this.cm(0)]);
      let lastHour = 0;
      for (let i = 0; i < dart.notNull(brtimes[$length]); i = i + 1) {
        let hour = brtimes[$_get](i).time(date).hour;
        let w = 0;
        m1[$_set](0, (dart.notNull(hour) - dart.notNull(lastHour))[$toDouble]());
        m2[$_set](0, m1[$_get](0));
        lastHour = hour;
        if (i < dart.notNull(brtimes[$length]) - 1) {
          w = dart.notNull(brtimes[$_get](i + 1).time(date).hour) - dart.notNull(brtimes[$_get](i).time(date).hour);
        } else {
          w = 24 - dart.notNull(brtimes[$_get](i).time(date).hour);
        }
        legendIE[$add](new (IdentityMapOfStringL$ObjectL()).from(["width", this.cm(w * colWidth), "margin", m1, "text", this.g.fmtBasal(brtimes[$_get](i).value), "fontSize", this.fs(8.0), "alignment", "left"]));
        ieSum = ieSum + dart.notNull(brtimes[$_get](i).value) * w;
      }
      legendIE[$add](new (IdentityMapOfStringL$dynamic()).from(["width", this.cm(colWidth), "margin", this.m0, "text", this.g.fmtBasal(ieSum), "fontSize", this.fs(8.0), "alignment", "center"]));
      let content = JSArrayOfObjectL().of([this.headerFooter(), brArea, testArea, vertLegend, vertLines, horzLegend, horzLines, glucArea, glucValues, new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(13.5), "y", this.cm(dart.notNull(print_basalrate.PrintBasalrate.gridHeight) + 4.65)]), "text", this.msgTime, "fontSize", this.fs(12.0)]), brTable, brLegend]);
      return new base_print.Page.new(this.isPortrait, content);
    }
    getIllegalMark(xo, yo, x, y) {
      return JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(xo), "y", this.cm(yo)]), "type", "ellipse", "x", this.cm(x), "y", this.cm(y), "r1", 3, "r2", 3])]);
    }
    getBRMark(xo, yo, x, y, gluc, calc) {
      let ret = JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(xo), "y", this.cm(yo)]), "type", "ellipse", "x", this.cm(x), "y", this.cm(y), "r1", 3, "r2", 3, "color", "#f15741"])]);
      if (dart.dtest(dart.dsend(dart.dsend(dart.dsend(gluc, '-', [dart.dload(calc, 'firstGluc')]), 'abs', []), '>', [30]))) {
        ret[$_get](0)[$_set]("color", "#f00");
        ret[$add](new (IdentityMapOfStringL$ObjectL()).from(["type", "line", "x1", this.cm(dart.dsend(x, '-', [0.1])), "y1", this.cm(dart.dsend(y, '-', [0.1])), "x2", this.cm(dart.dsend(x, '+', [0.1])), "y2", this.cm(dart.dsend(y, '+', [0.1])), "lineColor", "#000", "lineWidth", this.cm(0.01)]));
        ret[$add](new (IdentityMapOfStringL$ObjectL()).from(["type", "line", "x1", this.cm(dart.dsend(x, '+', [0.1])), "y1", this.cm(dart.dsend(y, '-', [0.1])), "x2", this.cm(dart.dsend(x, '-', [0.1])), "y2", this.cm(dart.dsend(y, '+', [0.1])), "lineColor", "#000", "lineWidth", this.cm(0.01)]));
      }
      return ret;
    }
  };
  (print_basalrate.PrintBasalrate.new = function() {
    this[help$2] = intl.Intl.message("Dieses Formular zeigt die Basalrate, die im Profil eingestellt ist in graphischer Form an.\nEs werden normalerweise alle Basalraten des ausgewählten Zeitraums ausgegeben. Wenn sich in dem Zeitraum\ndie Basalrate geändert hat, wird eine neue Seite erzeugt.\n\nEs gibt aber eine Option, welche nur die letzte Basalrate des Zeitraums ausgibt.", {desc: "help for basal"});
    this[id$5] = "basal";
    this[idx$2] = "09";
    this[mayShowBothUnits$] = false;
    this[params$3] = JSArrayOfParamInfoL().of([new base_print.ParamInfo.new(0, print_basalrate.PrintBasalrate.msgParam1, {boolValue: false})]);
    this[lineWidth] = null;
    print_basalrate.PrintBasalrate.__proto__.new.call(this);
    ;
  }).prototype = print_basalrate.PrintBasalrate.prototype;
  dart.addTypeTests(print_basalrate.PrintBasalrate);
  dart.addTypeCaches(print_basalrate.PrintBasalrate);
  dart.setMethodSignature(print_basalrate.PrintBasalrate, () => ({
    __proto__: dart.getMethods(print_basalrate.PrintBasalrate.__proto__),
    glucX: dart.fnType(dart.legacy(core.double), [dart.legacy(core.DateTime)]),
    getPage: dart.fnType(dart.legacy(base_print.Page), [dart.legacy(core.int), dart.legacy(json_data.ProfileGlucData), dart.legacy(base_profile.CalcData)]),
    getIllegalMark: dart.fnType(dart.dynamic, [dart.dynamic, dart.dynamic, dart.dynamic, dart.dynamic]),
    getBRMark: dart.fnType(dart.dynamic, [dart.dynamic, dart.dynamic, dart.dynamic, dart.dynamic, dart.dynamic, dart.dynamic])
  }));
  dart.setGetterSignature(print_basalrate.PrintBasalrate, () => ({
    __proto__: dart.getGetters(print_basalrate.PrintBasalrate.__proto__),
    title: dart.legacy(core.String),
    estimatePageCount: dart.dynamic
  }));
  dart.setLibraryUri(print_basalrate.PrintBasalrate, L12);
  dart.setFieldSignature(print_basalrate.PrintBasalrate, () => ({
    __proto__: dart.getFields(print_basalrate.PrintBasalrate.__proto__),
    help: dart.fieldType(dart.legacy(core.String)),
    id: dart.fieldType(dart.legacy(core.String)),
    idx: dart.fieldType(dart.legacy(core.String)),
    mayShowBothUnits: dart.fieldType(dart.legacy(core.bool)),
    params: dart.fieldType(dart.legacy(core.List$(dart.legacy(base_print.ParamInfo)))),
    lineWidth: dart.fieldType(dart.legacy(core.num))
  }));
  dart.defineLazy(print_basalrate.PrintBasalrate, {
    /*print_basalrate.PrintBasalrate.gridHeight*/get gridHeight() {
      return 11.5;
    },
    set gridHeight(_) {},
    /*print_basalrate.PrintBasalrate.gridWidth*/get gridWidth() {
      return 24.0;
    },
    set gridWidth(_) {},
    /*print_basalrate.PrintBasalrate.graphWidth*/get graphWidth() {
      return dart.notNull(print_basalrate.PrintBasalrate.gridWidth) / 25.0 * 24.0;
    },
    set graphWidth(_) {}
  }, true);
  var _trigger$1 = dart.privateName(infoview_component, "_trigger");
  var g$4 = dart.privateName(infoview_component, "InfoViewComponent.g");
  var tileHelp = dart.privateName(infoview_component, "InfoViewComponent.tileHelp");
  var isVisible$ = dart.privateName(infoview_component, "InfoViewComponent.isVisible");
  infoview_component.InfoViewComponent = class InfoViewComponent extends core.Object {
    get g() {
      return this[g$4];
    }
    set g(value) {
      this[g$4] = value;
    }
    get tileHelp() {
      return this[tileHelp];
    }
    set tileHelp(value) {
      this[tileHelp] = value;
    }
    get isVisible() {
      return this[isVisible$];
    }
    set isVisible(value) {
      this[isVisible$] = value;
    }
    get trigger() {
      return this[_trigger$1].stream;
    }
    get msgTitle() {
      if (this.g.info.errors !== "") return intl.Intl.message("Fehler");
      if (this.g.info.warnings !== "") return intl.Intl.message("Warnung");
      return intl.Intl.message("Information");
    }
    get type() {
      if (this.g.info.errors !== "") return "error";
      if (this.g.info.warnings !== "") return "warning";
      return "notification";
    }
    fire(type, detail = 0) {
      return async.async(dart.void, (function* fire() {
        switch (type) {
          case "close":
          {
            this.g.info.clear();
            break;
          }
        }
        this[_trigger$1].add(html.UIEvent.new(type, {detail: detail}));
      }).bind(this));
    }
  };
  (infoview_component.InfoViewComponent.new = function() {
    this[g$4] = globals.Globals.new();
    this[tileHelp] = null;
    this[_trigger$1] = StreamControllerOfUIEventL().broadcast({sync: true});
    this[isVisible$] = true;
    ;
  }).prototype = infoview_component.InfoViewComponent.prototype;
  dart.addTypeTests(infoview_component.InfoViewComponent);
  dart.addTypeCaches(infoview_component.InfoViewComponent);
  dart.setMethodSignature(infoview_component.InfoViewComponent, () => ({
    __proto__: dart.getMethods(infoview_component.InfoViewComponent.__proto__),
    fire: dart.fnType(dart.void, [dart.legacy(core.String)], [dart.legacy(core.int)])
  }));
  dart.setGetterSignature(infoview_component.InfoViewComponent, () => ({
    __proto__: dart.getGetters(infoview_component.InfoViewComponent.__proto__),
    trigger: dart.legacy(async.Stream$(dart.legacy(html.UIEvent))),
    msgTitle: dart.legacy(core.String),
    type: dart.legacy(core.String)
  }));
  dart.setLibraryUri(infoview_component.InfoViewComponent, L13);
  dart.setFieldSignature(infoview_component.InfoViewComponent, () => ({
    __proto__: dart.getFields(infoview_component.InfoViewComponent.__proto__),
    g: dart.fieldType(dart.legacy(globals.Globals)),
    tileHelp: dart.fieldType(dart.legacy(core.List$(dart.legacy(base_print.FormConfig)))),
    [_trigger$1]: dart.finalFieldType(dart.legacy(async.StreamController$(dart.legacy(html.UIEvent)))),
    isVisible: dart.fieldType(dart.legacy(core.bool))
  }));
  var _title = dart.privateName(print_user_data, "_title");
  var needed$ = dart.privateName(print_user_data, "PrintUserData.needed");
  var isLocalOnly = dart.privateName(print_user_data, "PrintUserData.isLocalOnly");
  var id$6 = dart.privateName(print_user_data, "PrintUserData.id");
  var idx$3 = dart.privateName(print_user_data, "PrintUserData.idx");
  var params$4 = dart.privateName(print_user_data, "PrintUserData.params");
  print_user_data.PrintUserData = class PrintUserData extends base_print.BasePrint {
    get needed() {
      return this[needed$];
    }
    set needed(value) {
      this[needed$] = value;
    }
    get isLocalOnly() {
      return this[isLocalOnly];
    }
    set isLocalOnly(value) {
      this[isLocalOnly] = value;
    }
    get id() {
      return this[id$6];
    }
    set id(value) {
      this[id$6] = value;
    }
    get idx() {
      return this[idx$3];
    }
    set idx(value) {
      this[idx$3] = value;
    }
    get params() {
      return this[params$4];
    }
    set params(value) {
      this[params$4] = value;
    }
    get isPortrait() {
      return true;
    }
    static get msgNoData() {
      return intl.Intl.message("Es sind keine Daten vorhanden.");
    }
    static get msgParam1() {
      return intl.Intl.message("Alle Benutzer ausgeben");
    }
    extractParams() {
      this.needed.status.anybody = this.params[$_get](0).boolValue;
    }
    get estimatePageCount() {
      let t31, t31$, t31$0;
      let count = dart.test(this.needed.status.anybody) ? (t31$0 = (t31$ = (t31 = this.g, t31 == null ? null : t31.userList), t31$ == null ? null : t31$[$length]), t31$0 == null ? 0 : t31$0) : 1;
      return new (IdentityMapOfStringL$ObjectL()).from(["count", count, "isEstimated", false]);
    }
    fillPages(pages) {
      if (dart.test(this.repData.isForThumbs)) {
        this.getPage(this.repData.user, pages);
        return;
      }
      for (let user of this.g.userList) {
        if (dart.test(this.needed.status.anybody) || dart.equals(user, this.g.user)) {
          this.getPage(user, pages);
        }
      }
      this.title = this[_title];
    }
    getPage(user, pages) {
      let t31, t31$, t31$0, t31$1, t31$2, t31$3, t31$4, t31$5;
      this.title = user.name;
      this.subtitle = "";
      let pos = this.title[$indexOf]("(");
      if (pos > 0) {
        this.subtitle = this.title[$substring](pos + 1, this.title.length - 1);
        this.title = this.title[$substring](0, pos - 1);
      }
      this.titleInfo = user.apiUrl(null, "", {noApi: true});
      if (!dart.test(user.isReachable) || (t31$ = (t31 = user.status, t31 == null ? null : t31.status), t31$ == null ? "401" : t31$) === "401") {
        pages[$add](this.getEmptyForm(this.isPortrait, (t31$1 = (t31$0 = user.status, t31$0 == null ? null : t31$0.status), t31$1 == null ? "401" : t31$1), {skipFooter: true}));
        return;
      }
      let table = [];
      let x = this.xframe;
      let y = dart.notNull(this.yorg) - 0.5;
      let ret = JSArrayOfObjectL().of([this.headerFooter({skipFooter: true}), new (IdentityMapOfStringL$ObjectL()).from(["absolutePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(x), "y", this.cm(y)]), "layout", "noBorders", "table", new (IdentityMapOfStringL$ListL()).from(["widths", JSArrayOfdoubleL().of([this.cm(2.5), this.cm(dart.notNull(this.width) - 2.5 - 2 * dart.notNull(this.xframe))]), "body", table])])]);
      if (user.status == null) {
        table[$add](JSArrayOfMapLOfStringL$StringL().of([new (IdentityMapOfStringL$StringL()).from(["text", print_user_data.PrintUserData.msgNoData, "colSpan", "2", "color", "red"])]));
        pages[$add](new base_print.Page.new(this.isPortrait, ret));
        return;
      }
      table[$add](JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$ObjectL()).from(["text", "Name", "fontSize", this.fs(12.0)]), new (IdentityMapOfStringL$ObjectL()).from(["text", dart.str(user.status.name), "fontSize", this.fs(10.0)])]));
      table[$add](JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$ObjectL()).from(["text", "Version", "fontSize", this.fs(12.0)]), new (IdentityMapOfStringL$ObjectL()).from(["text", dart.str(user.status.version), "fontSize", this.fs(10.0)])]));
      let units = dart.test(this.g.isMGDL(user.status)) ? globals.Settings.msgUnitMGDL : globals.Settings.msgUnitMMOL;
      table[$add](JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$ObjectL()).from(["text", "Einheiten", "fontSize", this.fs(12.0)]), new (IdentityMapOfStringL$ObjectL()).from(["text", units, "fontSize", this.fs(10.0)])]));
      table[$add](JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$ObjectL()).from(["text", "Enabled", "fontSize", this.fs(12.0)]), new (IdentityMapOfStringL$ObjectL()).from(["text", dart.str(user.status.settings.enable), "fontSize", this.fs(10.0)])]));
      table[$add](JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$ObjectL()).from(["text", "Eigene Grenzwerte", "fontSize", this.fs(12.0)]), new (IdentityMapOfStringL$ObjectL()).from(["text", dart.str(this.glucFromData(user, (t31$3 = (t31$2 = user.status.settings.thresholds, t31$2 == null ? null : t31$2.bgTargetBottom), t31$3 == null ? 0.0 : t31$3))) + " " + dart.str(units) + " - " + dart.str(this.glucFromData(user, (t31$5 = (t31$4 = user.status.settings.thresholds, t31$4 == null ? null : t31$4.bgTargetTop), t31$5 == null ? 0.0 : t31$5))) + " " + dart.str(units), "fontSize", this.fs(10.0), "margin", JSArrayOfdoubleL().of([this.cm(0), this.cm(0.3), this.cm(0), this.cm(0)])])]));
      pages[$add](new base_print.Page.new(this.isPortrait, ret));
    }
    glucFromData(user, value) {
      if (!dart.test(this.g.isMGDL(user.status))) {
        return this.g.fmtNumber(dart.notNull(value) / 18.02, 1);
      }
      return this.g.fmtNumber(value, 0);
    }
  };
  (print_user_data.PrintUserData.new = function() {
    this[needed$] = new base_print.DataNeeded.new({statusCurr: true, statusAny: true, dataCurr: false, dataAny: false});
    this[isLocalOnly] = true;
    this[id$6] = "userdata";
    this[idx$3] = "14";
    this[_title] = intl.Intl.message("Benutzerdaten");
    this[params$4] = JSArrayOfParamInfoL().of([new base_print.ParamInfo.new(0, print_user_data.PrintUserData.msgParam1, {boolValue: true})]);
    print_user_data.PrintUserData.__proto__.new.call(this);
    this.title = this[_title];
    this.init();
  }).prototype = print_user_data.PrintUserData.prototype;
  dart.addTypeTests(print_user_data.PrintUserData);
  dart.addTypeCaches(print_user_data.PrintUserData);
  dart.setMethodSignature(print_user_data.PrintUserData, () => ({
    __proto__: dart.getMethods(print_user_data.PrintUserData.__proto__),
    fillPages: dart.fnType(dart.void, [dart.legacy(core.List$(dart.legacy(base_print.Page)))]),
    getPage: dart.fnType(dart.void, [dart.legacy(globals.UserData), dart.legacy(core.List$(dart.legacy(base_print.Page)))]),
    glucFromData: dart.fnType(dart.legacy(core.String), [dart.legacy(globals.UserData), dart.legacy(core.double)])
  }));
  dart.setGetterSignature(print_user_data.PrintUserData, () => ({
    __proto__: dart.getGetters(print_user_data.PrintUserData.__proto__),
    estimatePageCount: dart.dynamic
  }));
  dart.setLibraryUri(print_user_data.PrintUserData, L14);
  dart.setFieldSignature(print_user_data.PrintUserData, () => ({
    __proto__: dart.getFields(print_user_data.PrintUserData.__proto__),
    needed: dart.fieldType(dart.legacy(base_print.DataNeeded)),
    isLocalOnly: dart.fieldType(dart.legacy(core.bool)),
    id: dart.fieldType(dart.legacy(core.String)),
    idx: dart.fieldType(dart.legacy(core.String)),
    [_title]: dart.finalFieldType(dart.legacy(core.String)),
    params: dart.fieldType(dart.legacy(core.List$(dart.legacy(base_print.ParamInfo))))
  }));
  var _isFirst = dart.privateName(print_test, "_isFirst");
  var _body = dart.privateName(print_test, "_body");
  var _root = dart.privateName(print_test, "_root");
  var _lastRootTitle = dart.privateName(print_test, "_lastRootTitle");
  var _lastRootType = dart.privateName(print_test, "_lastRootType");
  var _rawLineCount = dart.privateName(print_test, "_rawLineCount");
  var _rawCurrLines = dart.privateName(print_test, "_rawCurrLines");
  var _page = dart.privateName(print_test, "_page");
  var _pages$ = dart.privateName(print_test, "_pages");
  var id$7 = dart.privateName(print_test, "PrintTest.id");
  var idx$4 = dart.privateName(print_test, "PrintTest.idx");
  var showEntries = dart.privateName(print_test, "PrintTest.showEntries");
  var showTreatments = dart.privateName(print_test, "PrintTest.showTreatments");
  var showRawStatus = dart.privateName(print_test, "PrintTest.showRawStatus");
  var showRawEntries = dart.privateName(print_test, "PrintTest.showRawEntries");
  var showRawTreatments = dart.privateName(print_test, "PrintTest.showRawTreatments");
  var showRawProfiles = dart.privateName(print_test, "PrintTest.showRawProfiles");
  var showDayProfile = dart.privateName(print_test, "PrintTest.showDayProfile");
  var rawCols = dart.privateName(print_test, "PrintTest.rawCols");
  var params$5 = dart.privateName(print_test, "PrintTest.params");
  print_test.PrintTest = class PrintTest extends base_print.BasePrint {
    get id() {
      return this[id$7];
    }
    set id(value) {
      this[id$7] = value;
    }
    get idx() {
      return this[idx$4];
    }
    set idx(value) {
      this[idx$4] = value;
    }
    get showEntries() {
      return this[showEntries];
    }
    set showEntries(value) {
      this[showEntries] = value;
    }
    get showTreatments() {
      return this[showTreatments];
    }
    set showTreatments(value) {
      this[showTreatments] = value;
    }
    get showRawStatus() {
      return this[showRawStatus];
    }
    set showRawStatus(value) {
      this[showRawStatus] = value;
    }
    get showRawEntries() {
      return this[showRawEntries];
    }
    set showRawEntries(value) {
      this[showRawEntries] = value;
    }
    get showRawTreatments() {
      return this[showRawTreatments];
    }
    set showRawTreatments(value) {
      this[showRawTreatments] = value;
    }
    get showRawProfiles() {
      return this[showRawProfiles];
    }
    set showRawProfiles(value) {
      this[showRawProfiles] = value;
    }
    get showDayProfile() {
      return this[showDayProfile];
    }
    set showDayProfile(value) {
      this[showDayProfile] = value;
    }
    get rawCols() {
      return this[rawCols];
    }
    set rawCols(value) {
      this[rawCols] = value;
    }
    get params() {
      return this[params$5];
    }
    set params(value) {
      this[params$5] = value;
    }
    extractParams() {
      this.showEntries = this.params[$_get](0).boolValue;
      this.showTreatments = this.params[$_get](1).boolValue;
      this.showRawStatus = this.params[$_get](2).boolValue;
      this.showRawEntries = this.params[$_get](3).boolValue;
      this.showRawTreatments = this.params[$_get](4).boolValue;
      this.showRawProfiles = this.params[$_get](5).boolValue;
      this.rawCols = this.params[$_get](6).intValue;
      this.showDayProfile = this.params[$_get](7).boolValue;
    }
    get estimatePageCount() {
      return new (IdentityMapOfStringL$ObjectL()).from(["count", 0, "isEstimated", true]);
    }
    get isDebugOnly() {
      return true;
    }
    get title() {
      return "Datensätze";
    }
    set title(value) {
      super.title = value;
    }
    createRoot(type, opts) {
      let title = opts && 'title' in opts ? opts.title : null;
      let color = "#eee";
      if (type == null) type = this[_lastRootType];
      this[_lastRootType] = StringL().as(type);
      if (title == null) title = this[_lastRootTitle];
      this[_lastRootTitle] = title;
      switch (type) {
        case "entries":
        {
          dart.dsend(this[_body], 'add', [JSArrayOfMapLOfStringL$StringL().of([new (IdentityMapOfStringL$StringL()).from(["text", "Uhrzeit", "fillColor", color]), new (IdentityMapOfStringL$StringL()).from(["text", "Art", "fillColor", color]), new (IdentityMapOfStringL$StringL()).from(["text", "sgv", "fillColor", color]), new (IdentityMapOfStringL$StringL()).from(["text", "gluc", "fillColor", color])])]);
          break;
        }
        case "treatments":
        {
          dart.dsend(this[_body], 'add', [JSArrayOfMapLOfStringL$StringL().of([new (IdentityMapOfStringL$StringL()).from(["text", "Uhrzeit", "fillColor", color]), new (IdentityMapOfStringL$StringL()).from(["text", "Art", "fillColor", color]), new (IdentityMapOfStringL$StringL()).from(["text", "Anpassung", "fillColor", color]), new (IdentityMapOfStringL$StringL()).from(["text", "Dauer", "fillColor", color]), new (IdentityMapOfStringL$StringL()).from(["text", "KH", "fillColor", color]), new (IdentityMapOfStringL$StringL()).from(["text", "IE", "fillColor", color])])]);
          break;
        }
        case "profiles":
        {
          dart.dsend(this[_body], 'add', [JSArrayOfMapLOfStringL$StringL().of([new (IdentityMapOfStringL$StringL()).from(["text", title, "fillColor", color])])]);
          break;
        }
        case "raw":
        {
          this[_rawLineCount] = dart.notNull(this[_rawLineCount]) + 6;
          dart.dsend(this[_body], 'add', [JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$ObjectL()).from(["text", title, "fontSize", this.fs(12.0), "colSpan", this.rawCols])])]);
          for (let i = 0; i < dart.notNull(this.rawCols) - 1; i = i + 1)
            dart.dsend(dart.dsend(this[_body], '_get', [0]), 'add', [new (IdentityMapOfStringL$StringL()).from(["text", ""])]);
          dart.dsend(this[_body], 'add', [[]]);
          break;
        }
      }
      let widths = [];
      for (let i = 0; i < dart.notNull(core.num.as(dart.dload(dart.dsend(this[_body], '_get', [0]), 'length'))); i = i + 1)
        widths[$add](this.cm((dart.notNull(this.width) - 4.0) / dart.notNull(core.num.as(dart.dload(dart.dsend(this[_body], '_get', [0]), 'length')))));
      let ret = new (IdentityMapOfStringL$ObjectL()).from(["margin", JSArrayOfdoubleL().of([this.cm(2.0), this.cm(dart.test(this[_isFirst]) ? this.yorg : 0.5), this.cm(2.0), this.cm(0.5)]), "layout", dart.equals(type, "raw") ? "" : "noBorders", "table", new (IdentityMapOfStringL$dynamic()).from(["headerRows", 1, "widths", widths, "body", this[_body]])]);
      this[_isFirst] = false;
      return ret;
    }
    fillPages(pages) {
      this[_rawLineCount] = 0;
      this[_rawCurrLines] = 0;
      this[_pages$] = pages;
      this[_page] = new base_print.Page.new(this.isPortrait, [this.headerFooter({skipFooter: true})]);
      this[_body] = [];
      this[_isFirst] = true;
      let oldLength = pages[$length];
      if (dart.test(this.showEntries)) {
        this[_root] = this.createRoot("entries");
        for (let i = 0; i < dart.notNull(this.repData.ns.entries[$length]); i = i + 1) {
          let entry = this.repData.ns.entries[$_get](i);
          let row = JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$ObjectL()).from(["text", this.fmtDateTime(entry.time, "??.??.???? ??:?? Uhr"), "colspan", 4]), new (IdentityMapOfStringL$StringL()).from(["text", entry.type]), new (IdentityMapOfStringL$StringL()).from(["text", this.g.fmtNumber(entry.sgv)]), new (IdentityMapOfStringL$StringL()).from(["text", this.g.fmtNumber(entry.gluc)])]);
          dart.dsend(this[_body], 'add', [row]);
          if (dart.dtest(dart.dsend(dart.dload(this[_body], 'length'), '>', [35]))) this.addPage();
        }
        if (dart.dtest(dart.dsend(dart.dload(this[_body], 'length'), '>', [0]))) this.addPage();
      }
      if (dart.test(this.showTreatments)) {
        this[_body] = [];
        this[_root] = this.createRoot("treatments");
        let data = this.repData.ns.treatments;
        let lines = intL().as(dart.dload(this[_body], 'length'));
        for (let i = 0; i < dart.notNull(data[$length]); i = i + 1) {
          let entry = data[$_get](i);
          lines = dart.notNull(lines) + 2;
          let row = JSArrayOfMapLOfStringL$StringL().of([new (IdentityMapOfStringL$StringL()).from(["text", this.fmtDateTime(entry.createdAt, "??.??.???? ??:?? Uhr")])]);
          row[$add](new (IdentityMapOfStringL$StringL()).from(["text", entry.eventType]));
          row[$add](new (IdentityMapOfStringL$StringL()).from(["text", dart.str(this.g.fmtNumber(entry.adjustedValue(1.0), 0, 0, "")), "alignment", "right"]));
          row[$add](new (IdentityMapOfStringL$StringL()).from(["text", dart.notNull(entry.duration) > 0 ? this.g.fmtNumber(entry.duration, 0, 0, " ") : " ", "alignment", "right"]));
          let carbs = dart.test(entry.isECarb) ? entry.eCarbs : entry.carbs;
          let text = dart.notNull(carbs) > 0.0 ? this.g.fmtNumber(carbs, 0, 0, " ") : " ";
          if (dart.test(entry.isECarb)) text = "e" + dart.str(text);
          row[$add](new (IdentityMapOfStringL$StringL()).from(["text", text, "alignment", "right"]));
          text = dart.notNull(entry.insulin) > 0.0 ? this.g.fmtNumber(entry.insulin, 1, 0, " ") : " ";
          row[$add](new (IdentityMapOfStringL$StringL()).from(["text", text, "alignment", "right"]));
          switch (entry.eventType[$toLowerCase]()) {
            case "temp basal":
            {
              row[$_get](1)[$_set]("color", "#f00");
              break;
            }
            case "announcement":
            case "note":
            {
              row[$_get](1)[$_set]("text", dart.str(row[$_get](1)[$_get]("text")) + "\n" + dart.str(entry.notes));
              lines = dart.notNull(lines) + (entry.notes != null ? dart.notNull(entry.notes[$split]("\n")[$length]) - 1 : 0);
              break;
            }
          }
          dart.dsend(this[_body], 'add', [row]);
          if (dart.notNull(lines) > 35) {
            this.addPage();
            lines = 0;
          }
        }
        if (dart.dtest(dart.dsend(dart.dload(this[_body], 'length'), '>', [0]))) this.addPage();
      }
      if (dart.test(this.showRawStatus)) {
        this[_body] = [];
        this[_root] = this.createRoot("raw", {title: "Status"});
        this.addRawData(this.repData.status.raw);
        this.finalizeRawData();
      }
      if (dart.test(this.showRawEntries)) {
        this[_body] = [];
        this[_root] = this.createRoot("raw", {title: "Entries (sgv)"});
        for (let entry of this.repData.ns.entries)
          this.addRawData(entry.raw, this.fmtDateTime(entry.time.toLocal()));
        this.finalizeRawData();
        this[_body] = [];
        this[_root] = this.createRoot("raw", {title: "Entries (mbg)"});
        for (let entry of this.repData.ns.bloody)
          this.addRawData(entry.raw, this.fmtDateTime(entry.time.toLocal()));
        this.finalizeRawData();
        this[_body] = [];
        this[_root] = this.createRoot("raw", {title: "Entries (remaining)"});
        for (let entry of this.repData.ns.remaining)
          this.addRawData(entry.raw, this.fmtDateTime(entry.time.toLocal()));
        this.finalizeRawData();
      }
      if (dart.test(this.showRawTreatments)) {
        this[_body] = [];
        this[_root] = this.createRoot("raw", {title: "Treatments"});
        for (let entry of this.repData.ns.treatments)
          this.addRawData(entry.raw, this.fmtDateTime(entry.createdAt.toLocal(), null, true));
        this.finalizeRawData();
      }
      if (dart.test(this.showRawProfiles)) {
        this[_body] = [];
        this[_root] = this.createRoot("raw", {title: "Profiles"});
        for (let entry of this.repData.profiles)
          this.addRawData(entry.raw, this.fmtDateTime(entry.createdAt.toLocal()));
        this.finalizeRawData();
      }
      if (dart.test(this.showDayProfile)) {
        for (let day of this.repData.data.days) {
          this[_body] = [];
          this[_root] = this.createRoot("profiles", {title: "Tagesprofil für " + dart.str(this.fmtDate(day.date))});
          let text = "";
          for (let entry of day.profile) {
            text = text + dart.str(this.fmtTime(entry.time(day.date), {withSeconds: true})) + " " + dart.str(this.g.fmtNumber(dart.notNull(entry.tempAdjusted) * 100, 0, 3, "null", false, true)) + " / " + dart.str(entry.duration) + " min\n";
          }
          let row = JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$ObjectL()).from(["text", text, "fontSize", this.fs(8.0)])]);
          dart.dsend(this[_body], 'add', [row]);
          this[_page].content[$add](this[_root]);
        }
      }
      this[_pages$][$add](this[_page]);
      if (dart.test(this.repData.isForThumbs) && dart.notNull(pages[$length]) - dart.notNull(oldLength) > 1) pages[$removeRange](dart.notNull(oldLength) + 1, pages[$length]);
    }
    addRawData(raw, title = null) {
      let text = convert.json.encode(raw);
      text = text[$substring](1, text.length - 1);
      text = text[$replaceAll](",'", ",\n'");
      text = text[$replaceAll]("},", "},\n");
      if (title != null) text = dart.str(title) + "\n" + dart.str(text);
      this[_rawCurrLines] = math.max(intL(), this[_rawCurrLines], dart.notNull(text[$split]("\n")[$length]) + 1);
      dart.dsend(dart.dload(this[_body], 'last'), 'add', [new (IdentityMapOfStringL$ObjectL()).from(["text", text, "fontSize", this.fs(8.0)])]);
      if (dart.dtest(dart.dsend(dart.dload(dart.dload(this[_body], 'last'), 'length'), '>=', [this.rawCols]))) {
        this[_rawLineCount] = dart.notNull(this[_rawLineCount]) + dart.notNull(this[_rawCurrLines]);
        if (dart.notNull(this[_rawLineCount]) > 66) {
          while (dart.notNull(this[_rawLineCount]) > 66) {
            let maxLines = 66 - (dart.notNull(this[_rawLineCount]) - dart.notNull(this[_rawCurrLines]));
            let newRow = [];
            let lineCount = 0;
            for (let cell of IterableL().as(dart.dload(this[_body], 'last'))) {
              newRow[$add](new (IdentityMapOfStringL$ObjectL()).from(["text", "", "fontSize", this.fs(8.0)]));
              let lines = ListLOfStringL().as(dart.dsend(dart.dsend(cell, '_get', ["text"]), 'split', ["\n"]));
              let oldText = JSArrayOfStringL().of([]);
              let newText = JSArrayOfStringL().of([]);
              if (dart.notNull(lines[$length]) > maxLines && maxLines > 0) {
                for (let i = 0; i < maxLines; i = i + 1)
                  oldText[$add](lines[$_get](i));
                for (let i = maxLines; i < dart.notNull(lines[$length]); i = i + 1)
                  newText[$add](lines[$_get](i));
              } else {
                oldText = lines;
              }
              let text = oldText[$join]("\n");
              dart.dsend(cell, '_set', ["text", text]);
              dart.dsend(newRow[$last], '_set', ["text", newText[$join]("\n")]);
              lineCount = math.max(intL(), lineCount, dart.notNull(newText[$length]) + 1);
            }
            this.addPage();
            dart.dput(this[_body], 'last', newRow);
            this[_rawLineCount] = dart.notNull(this[_rawLineCount]) + lineCount;
            this[_rawCurrLines] = lineCount;
          }
          dart.dsend(this[_body], 'add', [[]]);
        } else {
          dart.dsend(this[_body], 'add', [[]]);
        }
      }
    }
    addPage() {
      this[_rawLineCount] = 0;
      this[_rawCurrLines] = 0;
      this[_page].content[$add](this[_root]);
      this[_pages$][$add](this[_page]);
      this[_isFirst] = true;
      this[_page] = new base_print.Page.new(this.isPortrait, [this.headerFooter({skipFooter: true})]);
      this[_body] = [];
      this[_root] = this.createRoot(null);
    }
    finalizeRawData() {
      while (dart.dtest(dart.dsend(dart.dload(dart.dload(this[_body], 'last'), 'length'), '<', [this.rawCols])))
        dart.dsend(dart.dload(this[_body], 'last'), 'add', [new (IdentityMapOfStringL$StringL()).from(["text", ""])]);
      this[_page].content[$add](this[_root]);
    }
  };
  (print_test.PrintTest.new = function() {
    this[id$7] = "test";
    this[idx$4] = "00";
    this[showEntries] = false;
    this[showTreatments] = true;
    this[showRawStatus] = false;
    this[showRawEntries] = false;
    this[showRawTreatments] = false;
    this[showRawProfiles] = false;
    this[showDayProfile] = false;
    this[rawCols] = 3;
    this[params$5] = JSArrayOfParamInfoL().of([new base_print.ParamInfo.new(0, "Einträge", {boolValue: false}), new base_print.ParamInfo.new(1, "Behandlungen", {boolValue: false}), new base_print.ParamInfo.new(2, "Rohdaten Status", {boolValue: true, thumbValue: false}), new base_print.ParamInfo.new(3, "Rohdaten Einträge", {boolValue: false}), new base_print.ParamInfo.new(4, "Rohdaten Behandlungen", {boolValue: false, thumbValue: true}), new base_print.ParamInfo.new(5, "Rohdaten Profile", {boolValue: false}), new base_print.ParamInfo.new(7, "Rohdaten Spalten", {intValue: 2, min: 1, max: 3}), new base_print.ParamInfo.new(6, "Tagesprofil", {boolValue: false})]);
    this[_isFirst] = true;
    this[_body] = null;
    this[_root] = null;
    this[_lastRootTitle] = null;
    this[_lastRootType] = null;
    this[_rawLineCount] = 0;
    this[_rawCurrLines] = 0;
    this[_page] = null;
    this[_pages$] = null;
    print_test.PrintTest.__proto__.new.call(this);
    this.init();
  }).prototype = print_test.PrintTest.prototype;
  dart.addTypeTests(print_test.PrintTest);
  dart.addTypeCaches(print_test.PrintTest);
  dart.setMethodSignature(print_test.PrintTest, () => ({
    __proto__: dart.getMethods(print_test.PrintTest.__proto__),
    createRoot: dart.fnType(dart.dynamic, [dart.dynamic], {title: dart.legacy(core.String)}, {}),
    fillPages: dart.fnType(dart.void, [dart.legacy(core.List$(dart.legacy(base_print.Page)))]),
    addRawData: dart.fnType(dart.void, [dart.dynamic], [dart.legacy(core.String)]),
    addPage: dart.fnType(dart.dynamic, []),
    finalizeRawData: dart.fnType(dart.dynamic, [])
  }));
  dart.setGetterSignature(print_test.PrintTest, () => ({
    __proto__: dart.getGetters(print_test.PrintTest.__proto__),
    estimatePageCount: dart.dynamic,
    title: dart.legacy(core.String)
  }));
  dart.setLibraryUri(print_test.PrintTest, L15);
  dart.setFieldSignature(print_test.PrintTest, () => ({
    __proto__: dart.getFields(print_test.PrintTest.__proto__),
    id: dart.fieldType(dart.legacy(core.String)),
    idx: dart.fieldType(dart.legacy(core.String)),
    showEntries: dart.fieldType(dart.legacy(core.bool)),
    showTreatments: dart.fieldType(dart.legacy(core.bool)),
    showRawStatus: dart.fieldType(dart.legacy(core.bool)),
    showRawEntries: dart.fieldType(dart.legacy(core.bool)),
    showRawTreatments: dart.fieldType(dart.legacy(core.bool)),
    showRawProfiles: dart.fieldType(dart.legacy(core.bool)),
    showDayProfile: dart.fieldType(dart.legacy(core.bool)),
    rawCols: dart.fieldType(dart.legacy(core.int)),
    params: dart.fieldType(dart.legacy(core.List$(dart.legacy(base_print.ParamInfo)))),
    [_isFirst]: dart.fieldType(dart.legacy(core.bool)),
    [_body]: dart.fieldType(dart.dynamic),
    [_root]: dart.fieldType(dart.dynamic),
    [_lastRootTitle]: dart.fieldType(dart.legacy(core.String)),
    [_lastRootType]: dart.fieldType(dart.legacy(core.String)),
    [_rawLineCount]: dart.fieldType(dart.legacy(core.int)),
    [_rawCurrLines]: dart.fieldType(dart.legacy(core.int)),
    [_page]: dart.fieldType(dart.legacy(base_print.Page)),
    [_pages$]: dart.fieldType(dart.legacy(core.List$(dart.legacy(base_print.Page))))
  }));
  var start$ = dart.privateName(print_daily_graphic, "CollectInfo.start");
  var end$0 = dart.privateName(print_daily_graphic, "CollectInfo.end");
  var sum1$ = dart.privateName(print_daily_graphic, "CollectInfo.sum1");
  var sum2$ = dart.privateName(print_daily_graphic, "CollectInfo.sum2");
  var max1 = dart.privateName(print_daily_graphic, "CollectInfo.max1");
  var max2 = dart.privateName(print_daily_graphic, "CollectInfo.max2");
  var count = dart.privateName(print_daily_graphic, "CollectInfo.count");
  print_daily_graphic.CollectInfo = class CollectInfo extends core.Object {
    get start() {
      return this[start$];
    }
    set start(value) {
      this[start$] = value;
    }
    get end() {
      return this[end$0];
    }
    set end(value) {
      this[end$0] = value;
    }
    get sum1() {
      return this[sum1$];
    }
    set sum1(value) {
      this[sum1$] = value;
    }
    get sum2() {
      return this[sum2$];
    }
    set sum2(value) {
      this[sum2$] = value;
    }
    get max1() {
      return this[max1];
    }
    set max1(value) {
      this[max1] = value;
    }
    get max2() {
      return this[max2];
    }
    set max2(value) {
      this[max2] = value;
    }
    get count() {
      return this[count];
    }
    set count(value) {
      this[count] = value;
    }
    fill(date, value1, value2) {
      this.end = new core.DateTime.new(date.year, date.month, date.day, date.hour, date.minute, date.second);
      this.sum1 = dart.notNull(this.sum1) + dart.notNull(value1);
      this.sum2 = dart.notNull(this.sum2) + dart.notNull(value2);
      this.max1 = math.max(doubleL(), value1, this.max1);
      this.max2 = math.max(doubleL(), value2, this.max2);
      this.count = dart.notNull(this.count) + 1;
    }
  };
  (print_daily_graphic.CollectInfo.new = function(start, sum1 = 0, sum2 = 0) {
    this[end$0] = null;
    this[max1] = -1.0;
    this[max2] = -1.0;
    this[count] = 0;
    this[start$] = start;
    this[sum1$] = sum1;
    this[sum2$] = sum2;
    this.end = new core.DateTime.new(this.start.year, this.start.month, this.start.day, this.start.hour, this.start.minute, this.start.second);
    this.count = dart.notNull(this.sum1) > 0.0 ? 1 : 0;
    this.max1 = this.sum1;
    this.max2 = this.sum2;
  }).prototype = print_daily_graphic.CollectInfo.prototype;
  dart.addTypeTests(print_daily_graphic.CollectInfo);
  dart.addTypeCaches(print_daily_graphic.CollectInfo);
  dart.setMethodSignature(print_daily_graphic.CollectInfo, () => ({
    __proto__: dart.getMethods(print_daily_graphic.CollectInfo.__proto__),
    fill: dart.fnType(dart.void, [dart.legacy(core.DateTime), dart.legacy(core.double), dart.legacy(core.double)])
  }));
  dart.setLibraryUri(print_daily_graphic.CollectInfo, L16);
  dart.setFieldSignature(print_daily_graphic.CollectInfo, () => ({
    __proto__: dart.getFields(print_daily_graphic.CollectInfo.__proto__),
    start: dart.fieldType(dart.legacy(core.DateTime)),
    end: dart.fieldType(dart.legacy(core.DateTime)),
    sum1: dart.fieldType(dart.legacy(core.double)),
    sum2: dart.fieldType(dart.legacy(core.double)),
    max1: dart.fieldType(dart.legacy(core.double)),
    max2: dart.fieldType(dart.legacy(core.double)),
    count: dart.fieldType(dart.legacy(core.int))
  }));
  var _titleGraphic = dart.privateName(print_daily_graphic, "_titleGraphic");
  var _getPage = dart.privateName(print_daily_graphic, "_getPage");
  var help$3 = dart.privateName(print_daily_graphic, "PrintDailyGraphic.help");
  var id$8 = dart.privateName(print_daily_graphic, "PrintDailyGraphic.id");
  var idx$5 = dart.privateName(print_daily_graphic, "PrintDailyGraphic.idx");
  var showPictures = dart.privateName(print_daily_graphic, "PrintDailyGraphic.showPictures");
  var showInsulin = dart.privateName(print_daily_graphic, "PrintDailyGraphic.showInsulin");
  var showCarbs$ = dart.privateName(print_daily_graphic, "PrintDailyGraphic.showCarbs");
  var showBasalDay = dart.privateName(print_daily_graphic, "PrintDailyGraphic.showBasalDay");
  var showBasalProfile = dart.privateName(print_daily_graphic, "PrintDailyGraphic.showBasalProfile");
  var showLegend = dart.privateName(print_daily_graphic, "PrintDailyGraphic.showLegend");
  var isPrecise = dart.privateName(print_daily_graphic, "PrintDailyGraphic.isPrecise");
  var showNotes = dart.privateName(print_daily_graphic, "PrintDailyGraphic.showNotes");
  var showGlucTable = dart.privateName(print_daily_graphic, "PrintDailyGraphic.showGlucTable");
  var showNoteLinesAtGluc = dart.privateName(print_daily_graphic, "PrintDailyGraphic.showNoteLinesAtGluc");
  var sumNarrowValues = dart.privateName(print_daily_graphic, "PrintDailyGraphic.sumNarrowValues");
  var splitBolus = dart.privateName(print_daily_graphic, "PrintDailyGraphic.splitBolus");
  var showExercises = dart.privateName(print_daily_graphic, "PrintDailyGraphic.showExercises");
  var showCarbIE = dart.privateName(print_daily_graphic, "PrintDailyGraphic.showCarbIE");
  var showCGP = dart.privateName(print_daily_graphic, "PrintDailyGraphic.showCGP");
  var showProfileStart = dart.privateName(print_daily_graphic, "PrintDailyGraphic.showProfileStart");
  var showHTMLNotes = dart.privateName(print_daily_graphic, "PrintDailyGraphic.showHTMLNotes");
  var showZeroBasal = dart.privateName(print_daily_graphic, "PrintDailyGraphic.showZeroBasal");
  var showCOB = dart.privateName(print_daily_graphic, "PrintDailyGraphic.showCOB");
  var showIOB = dart.privateName(print_daily_graphic, "PrintDailyGraphic.showIOB");
  var roundToProfile = dart.privateName(print_daily_graphic, "PrintDailyGraphic.roundToProfile");
  var spareBool1 = dart.privateName(print_daily_graphic, "PrintDailyGraphic.spareBool1");
  var showTargetValue = dart.privateName(print_daily_graphic, "PrintDailyGraphic.showTargetValue");
  var params$6 = dart.privateName(print_daily_graphic, "PrintDailyGraphic.params");
  var lineWidth$ = dart.privateName(print_daily_graphic, "PrintDailyGraphic.lineWidth");
  var glucMax$ = dart.privateName(print_daily_graphic, "PrintDailyGraphic.glucMax");
  var profMax = dart.privateName(print_daily_graphic, "PrintDailyGraphic.profMax");
  var carbMax = dart.privateName(print_daily_graphic, "PrintDailyGraphic.carbMax");
  var bolusMax = dart.privateName(print_daily_graphic, "PrintDailyGraphic.bolusMax");
  var ieMax = dart.privateName(print_daily_graphic, "PrintDailyGraphic.ieMax");
  var graphBottom = dart.privateName(print_daily_graphic, "PrintDailyGraphic.graphBottom");
  var glucTableHeight = dart.privateName(print_daily_graphic, "PrintDailyGraphic.glucTableHeight");
  var glucTableTop = dart.privateName(print_daily_graphic, "PrintDailyGraphic.glucTableTop");
  var glucExerciseHeight = dart.privateName(print_daily_graphic, "PrintDailyGraphic.glucExerciseHeight");
  var glucExerciseTop = dart.privateName(print_daily_graphic, "PrintDailyGraphic.glucExerciseTop");
  var collInsulin = dart.privateName(print_daily_graphic, "PrintDailyGraphic.collInsulin");
  var collCarbs = dart.privateName(print_daily_graphic, "PrintDailyGraphic.collCarbs");
  var hasExercises = dart.privateName(print_daily_graphic, "PrintDailyGraphic.hasExercises");
  print_daily_graphic.PrintDailyGraphic = class PrintDailyGraphic extends base_daily.BaseDaily {
    get help() {
      return this[help$3];
    }
    set help(value) {
      this[help$3] = value;
    }
    get id() {
      return this[id$8];
    }
    set id(value) {
      this[id$8] = value;
    }
    get idx() {
      return this[idx$5];
    }
    set idx(value) {
      this[idx$5] = value;
    }
    get showPictures() {
      return this[showPictures];
    }
    set showPictures(value) {
      this[showPictures] = value;
    }
    get showInsulin() {
      return this[showInsulin];
    }
    set showInsulin(value) {
      this[showInsulin] = value;
    }
    get showCarbs() {
      return this[showCarbs$];
    }
    set showCarbs(value) {
      this[showCarbs$] = value;
    }
    get showBasalDay() {
      return this[showBasalDay];
    }
    set showBasalDay(value) {
      this[showBasalDay] = value;
    }
    get showBasalProfile() {
      return this[showBasalProfile];
    }
    set showBasalProfile(value) {
      this[showBasalProfile] = value;
    }
    get showLegend() {
      return this[showLegend];
    }
    set showLegend(value) {
      this[showLegend] = value;
    }
    get isPrecise() {
      return this[isPrecise];
    }
    set isPrecise(value) {
      this[isPrecise] = value;
    }
    get showNotes() {
      return this[showNotes];
    }
    set showNotes(value) {
      this[showNotes] = value;
    }
    get showGlucTable() {
      return this[showGlucTable];
    }
    set showGlucTable(value) {
      this[showGlucTable] = value;
    }
    get showNoteLinesAtGluc() {
      return this[showNoteLinesAtGluc];
    }
    set showNoteLinesAtGluc(value) {
      this[showNoteLinesAtGluc] = value;
    }
    get sumNarrowValues() {
      return this[sumNarrowValues];
    }
    set sumNarrowValues(value) {
      this[sumNarrowValues] = value;
    }
    get splitBolus() {
      return this[splitBolus];
    }
    set splitBolus(value) {
      this[splitBolus] = value;
    }
    get showExercises() {
      return this[showExercises];
    }
    set showExercises(value) {
      this[showExercises] = value;
    }
    get showCarbIE() {
      return this[showCarbIE];
    }
    set showCarbIE(value) {
      this[showCarbIE] = value;
    }
    get showCGP() {
      return this[showCGP];
    }
    set showCGP(value) {
      this[showCGP] = value;
    }
    get showProfileStart() {
      return this[showProfileStart];
    }
    set showProfileStart(value) {
      this[showProfileStart] = value;
    }
    get showHTMLNotes() {
      return this[showHTMLNotes];
    }
    set showHTMLNotes(value) {
      this[showHTMLNotes] = value;
    }
    get showZeroBasal() {
      return this[showZeroBasal];
    }
    set showZeroBasal(value) {
      this[showZeroBasal] = value;
    }
    get showCOB() {
      return this[showCOB];
    }
    set showCOB(value) {
      this[showCOB] = value;
    }
    get showIOB() {
      return this[showIOB];
    }
    set showIOB(value) {
      this[showIOB] = value;
    }
    get roundToProfile() {
      return this[roundToProfile];
    }
    set roundToProfile(value) {
      this[roundToProfile] = value;
    }
    get spareBool1() {
      return this[spareBool1];
    }
    set spareBool1(value) {
      this[spareBool1] = value;
    }
    get showTargetValue() {
      return this[showTargetValue];
    }
    set showTargetValue(value) {
      this[showTargetValue] = value;
    }
    get params() {
      return this[params$6];
    }
    set params(value) {
      this[params$6] = value;
    }
    get lineWidth() {
      return this[lineWidth$];
    }
    set lineWidth(value) {
      this[lineWidth$] = value;
    }
    get glucMax() {
      return this[glucMax$];
    }
    set glucMax(value) {
      this[glucMax$] = value;
    }
    get profMax() {
      return this[profMax];
    }
    set profMax(value) {
      this[profMax] = value;
    }
    get carbMax() {
      return this[carbMax];
    }
    set carbMax(value) {
      this[carbMax] = value;
    }
    get bolusMax() {
      return this[bolusMax];
    }
    set bolusMax(value) {
      this[bolusMax] = value;
    }
    get ieMax() {
      return this[ieMax];
    }
    set ieMax(value) {
      this[ieMax] = value;
    }
    get graphBottom() {
      return this[graphBottom];
    }
    set graphBottom(value) {
      this[graphBottom] = value;
    }
    get glucTableHeight() {
      return this[glucTableHeight];
    }
    set glucTableHeight(value) {
      this[glucTableHeight] = value;
    }
    get glucTableTop() {
      return this[glucTableTop];
    }
    set glucTableTop(value) {
      this[glucTableTop] = value;
    }
    get glucExerciseHeight() {
      return this[glucExerciseHeight];
    }
    set glucExerciseHeight(value) {
      this[glucExerciseHeight] = value;
    }
    get glucExerciseTop() {
      return this[glucExerciseTop];
    }
    set glucExerciseTop(value) {
      this[glucExerciseTop] = value;
    }
    get collInsulin() {
      return this[collInsulin];
    }
    set collInsulin(value) {
      this[collInsulin] = value;
    }
    get collCarbs() {
      return this[collCarbs];
    }
    set collCarbs(value) {
      this[collCarbs] = value;
    }
    get hasExercises() {
      return this[hasExercises];
    }
    set hasExercises(value) {
      this[hasExercises] = value;
    }
    extractParams() {
      this.showPictures = this.params[$_get](0).boolValue;
      this.showInsulin = this.params[$_get](1).boolValue;
      this.showCarbs = this.params[$_get](2).boolValue;
      this.showBasalDay = this.params[$_get](3).boolValue;
      this.showProfileStart = this.params[$_get](3).subParams[$_get](0).boolValue;
      this.showBasalProfile = this.params[$_get](4).boolValue;
      this.isPrecise = this.params[$_get](5).boolValue;
      this.showLegend = this.params[$_get](7).boolValue;
      this.showNotes = this.params[$_get](8).boolValue;
      this.showNoteLinesAtGluc = this.params[$_get](8).subParams[$_get](0).boolValue;
      this.showHTMLNotes = this.params[$_get](8).subParams[$_get](1).boolValue;
      this.spareBool1 = this.params[$_get](9).boolValue;
      this.showGlucTable = this.params[$_get](10).boolValue;
      this.sumNarrowValues = this.params[$_get](11).boolValue;
      this.showSMB = this.params[$_get](12).boolValue;
      this.showSMBAtGluc = this.params[$_get](12).subParams[$_get](0).boolValue;
      this.splitBolus = this.params[$_get](13).boolValue;
      this.showExercises = this.params[$_get](14).boolValue;
      this.showCarbIE = this.params[$_get](15).boolValue;
      this.showCGP = this.params[$_get](16).boolValue;
      this.showZeroBasal = this.params[$_get](17).boolValue;
      this.roundToProfile = this.params[$_get](18).boolValue;
      this.showCOB = this.params[$_get](19).boolValue;
      this.showIOB = this.params[$_get](20).boolValue;
      this.showTargetValue = this.params[$_get](21).boolValue;
      switch (this.params[$_get](6).intValue) {
        case 1:
        {
          this.pagesPerSheet = 2;
          break;
        }
        case 2:
        {
          this.pagesPerSheet = 4;
          break;
        }
        case 3:
        {
          this.pagesPerSheet = 8;
          break;
        }
        case 4:
        {
          this.pagesPerSheet = 16;
          break;
        }
        default:
        {
          this.pagesPerSheet = 1;
          break;
        }
      }
    }
    get estimatePageCount() {
      let t31, t31$, t31$0, t31$1;
      let count = (t31$0 = (t31$ = (t31 = this.g, t31 == null ? null : t31.period), t31$ == null ? null : t31$.dayCount), t31$0 == null ? 0 : t31$0);
      if (dart.test((t31$1 = this.showCGP, t31$1 == null ? false : t31$1))) count = dart.notNull(count) * 2;
      return new (IdentityMapOfStringL$ObjectL()).from(["count", count, "isEstimated", false]);
    }
    get backsuffix() {
      return dart.test(this.showCGP) ? "cgp" : "";
    }
    get [_titleGraphic]() {
      return intl.Intl.message("Tagesgrafik");
    }
    get title() {
      return this[_titleGraphic];
    }
    set title(value) {
      super.title = value;
    }
    static get msgParam1() {
      return intl.Intl.message("Symbole (Katheter etc.)");
    }
    static get msgParam2() {
      return intl.Intl.message("Insulin");
    }
    static get msgParam3() {
      return intl.Intl.message("Kohlenhydrate");
    }
    static get msgParam4() {
      return intl.Intl.message("Tages-Basalrate");
    }
    static get msgParam5() {
      return intl.Intl.message("Profil-Basalrate");
    }
    static get msgParam6() {
      return intl.Intl.message("Basal mit zwei Nachkommastellen");
    }
    static get msgParam8() {
      return intl.Intl.message("Legende");
    }
    static get msgParam9() {
      return intl.Intl.message("Notizen");
    }
    static get msgParam11() {
      return intl.Intl.message("Tabelle mit Glukosewerten");
    }
    static get msgParam13() {
      return intl.Intl.message("Notiz-Linien bis zur Kurve zeichnen");
    }
    static get msgParam14() {
      return intl.Intl.message("Nahe zusammen liegende Werte aufsummieren");
    }
    static get msgParam16() {
      return intl.Intl.message("Bolusarten anzeigen");
    }
    static get msgParam17() {
      return intl.Intl.message("Bewegung anzeigen");
    }
    static get msgParam18() {
      return intl.Intl.message("Berechnete IE für Kohlenhydrate anzeigen");
    }
    static get msgParam19() {
      return intl.Intl.message("Glukose Pentagon erzeugen");
    }
    static get msgParam20() {
      return intl.Intl.message("Tagesstartprofil anzeigen");
    }
    static get msgParam21() {
      return intl.Intl.message("HTML-Notizen anzeigen");
    }
    static get msgParam22() {
      return intl.Intl.message("Dauer der abgeschalteten Basalrate anzeigen");
    }
    static get msgParam23() {
      return intl.Intl.message("Insulin auf maximale Stellen im Profil runden");
    }
    static get msgParam24() {
      return intl.Intl.message("COB (Carbs On Board) anzeigen");
    }
    static get msgParam25() {
      return intl.Intl.message("IOB (Insulin On Board) anzeigen");
    }
    static get msgParam26() {
      return intl.Intl.message("Zielwert anzeigen");
    }
    get msgBasalSum() {
      return intl.Intl.message("Basal ges.");
    }
    get msgBolusSum() {
      return intl.Intl.message("Bolus ges.");
    }
    get msgBasalZero() {
      return intl.Intl.message("Basal 0%");
    }
    get msgExercises() {
      return intl.Intl.message("Bewegung");
    }
    get msgBloody() {
      return intl.Intl.message("Blutige Messung");
    }
    get imgList() {
      return JSArrayOfStringL().of(["nightscout", "katheter.print", "sensor.print", "ampulle.print"]);
    }
    get isPortrait() {
      return false;
    }
    glucX(time) {
      return dart.notNull(print_daily_graphic.PrintDailyGraphic.graphWidth) / 1440 * (dart.notNull(time.hour) * 60 + dart.notNull(time.minute));
    }
    glucY(value) {
      return dart.notNull(this.graphHeight) / dart.notNull(this.glucMax) * (dart.notNull(this.glucMax) - dart.notNull(value));
    }
    carbY(value) {
      return dart.notNull(this.graphHeight) / dart.notNull(this.carbMax) * (dart.notNull(this.carbMax) - dart.notNull(value));
    }
    bolusY(value) {
      return dart.notNull(this.graphHeight) / 4 * dart.notNull(value) / dart.notNull(this.ieMax);
    }
    basalX(time) {
      return dart.notNull(print_daily_graphic.PrintDailyGraphic.basalWidth) / 1440 * (dart.notNull(time.hour) * 60 + dart.notNull(time.minute));
    }
    basalY(value) {
      return this.profMax !== 0 && value != null ? dart.notNull(print_daily_graphic.PrintDailyGraphic.basalHeight) / dart.notNull(this.profMax) * (dart.notNull(this.profMax) - dart.notNull(value)) : 0.0;
    }
    fillPages(pages) {
      return async.async(dart.void, (function* fillPages() {
        let data = this.repData.data;
        print_daily_graphic.PrintDailyGraphic.graphWidth = 23.25;
        this.graphHeight = 6.5;
        if (!dart.test(this.showBasalDay) && !dart.test(this.showBasalProfile)) this.graphHeight = dart.notNull(this.graphHeight) + (dart.notNull(print_daily_graphic.PrintDailyGraphic.basalHeight) + 1);
        if (!dart.test(this.showLegend)) this.graphHeight = dart.notNull(this.graphHeight) + 2.5;
        print_daily_graphic.PrintDailyGraphic.basalTop = 2.0;
        if (!dart.test(this.showNotes)) print_daily_graphic.PrintDailyGraphic.basalTop = dart.notNull(print_daily_graphic.PrintDailyGraphic.basalTop) - dart.notNull(print_daily_graphic.PrintDailyGraphic.notesHeight);
        this.graphBottom = this.graphHeight;
        if (dart.test(this.showGlucTable)) {
          this.graphHeight = dart.notNull(this.graphHeight) - dart.notNull(this.glucTableHeight);
        } else {
          print_daily_graphic.PrintDailyGraphic.basalTop = dart.notNull(print_daily_graphic.PrintDailyGraphic.basalTop) - dart.notNull(this.glucTableHeight);
        }
        this.glucTableTop = this.graphHeight;
        this.lineWidth = this.cm(0.03);
        for (let i = 0; dart.notNull(i) < dart.notNull(data.days[$length]); i = dart.notNull(i) + 1) {
          let day = data.days[$_get](dart.test(this.g.ppLatestFirst) ? dart.notNull(data.days[$length]) - 1 - dart.notNull(i) : i);
          if (dart.test(this.g.period.isDowActive(dart.notNull(day.date.weekday) - 1))) {
            if (dart.test(day.entries[$isNotEmpty]) || dart.test(day.treatments[$isNotEmpty])) {
              pages[$add](this.getPage(day));
              if (dart.test(this.showCGP) || dart.test(this.repData.isForThumbs)) pages[$add](this.getCGPPage(day));
              if (dart.test(this.g.showBothUnits)) {
                this.g.glucMGDLIdx = 1;
                pages[$add](this.getPage(day));
                if (dart.test(this.showCGP)) pages[$add](this.getCGPPage(day));
                this.g.glucMGDLIdx = 2;
              }
            } else {
              pages[$add](this.getEmptyForm(this.isPortrait, this.repData.status.status));
            }
          }
          if (dart.test(this.repData.isForThumbs)) i = data.days[$length];
        }
        this.title = this[_titleGraphic];
        this.subtitle = null;
      }).bind(this));
    }
    glucLine(points) {
      return new (IdentityMapOfStringL$dynamic()).from(["type", "polyline", "lineWidth", this.cm(this.lw), "closePath", false, "lineColor", this.colValue, "points", points]);
    }
    getPage(day) {
      this.title = this[_titleGraphic];
      this.subtitle = null;
      this.footerTextAboveLine[$_set]("text", "");
      let graphHeightSave = this.graphHeight;
      this.hasExercises = day.treatments[$firstWhere](dart.fn(t => t.isExercise, TreatmentDataLToboolL()), {orElse: dart.fn(() => null, VoidToNullN())}) != null;
      if (dart.test(this.showExercises) && dart.test(this.hasExercises)) this.graphHeight = dart.notNull(this.graphHeight) - dart.notNull(this.glucExerciseHeight);
      this.glucExerciseTop = this.graphHeight;
      let ret = this[_getPage](day, this.repData);
      this.graphHeight = graphHeightSave;
      return ret;
    }
    carbsForIE(src, t) {
      if (t.boluscalc != null) return t.boluscalc.insulinCarbs;
      let check = (dart.notNull(t.createdAt.hour) * 60 + dart.notNull(t.createdAt.minute)) * 60;
      let ret = 0.0;
      for (let entry of src.profile(t.createdAt).store.listCarbratio) {
        if (dart.notNull(entry.timeForCalc) < check) ret = entry.value !== 0 ? dart.notNull(t.carbs) / dart.notNull(entry.value) : 0.0;
      }
      return ret;
    }
    [_getPage](day, src) {
      let t31, t31$, t31$0, t31$1;
      this.title = this[_titleGraphic];
      let collMinutes = dart.test(this.sumNarrowValues) ? 60 : -1;
      let xo = this.xorg;
      let yo = this.yorg;
      this.titleInfo = this.fmtDate(day.date, null, false, true);
      this.glucMax = -1000.0;
      this.ieMax = 0.0;
      this.collInsulin[$clear]();
      this.collCarbs[$clear]();
      this.collInsulin[$add](new print_daily_graphic.CollectInfo.new(new core.DateTime.new(day.date.year, day.date.month, day.date.day, 0, 0, 0)));
      this.collCarbs[$add](new print_daily_graphic.CollectInfo.new(new core.DateTime.new(day.date.year, day.date.month, day.date.day, 0, 0, 0)));
      for (let entry of day.entries) {
        this.glucMax = math.max(doubleL(), entry.gluc, this.glucMax);
      }
      for (let entry of day.bloody) {
        this.glucMax = math.max(doubleL(), entry.gluc, this.glucMax);
      }
      this.profMax = -1000.0;
      if (dart.test(this.showBasalProfile)) {
        for (let entry of day.basalData.store.listBasal) {
          this.profMax = math.max(doubleL(), (t31 = entry.value, t31 == null ? 0.0 : t31), this.profMax);
        }
      }
      if (dart.test(this.showBasalDay)) {
        for (let entry of day.profile) {
          this.profMax = math.max(doubleL(), (t31$ = entry.value, t31$ == null ? 0.0 : t31$), this.profMax);
        }
      }
      for (let entry of day.treatments) {
        if (dart.test(entry.isBloody)) {
          this.glucMax = math.max(doubleL(), entry.glucose, this.glucMax);
        }
        this.ieMax = math.max(doubleL(), entry.bolusInsulin, this.ieMax);
      }
      if (this.g.glucMaxValue != null) this.glucMax = this.g.glucMaxValues[$_get](this.g.ppGlucMaxIdx);
      this.ieMax = math.max(doubleL(), this.ieMax, 3.0);
      let vertLines = new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(xo), "y", this.cm(yo)]), "canvas", []]);
      let horzLines = new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(xo), "y", this.cm(yo)]), "canvas", []]);
      let horzLegend = new (IdentityMapOfStringL$ListL()).from(["stack", []]);
      let vertLegend = new (IdentityMapOfStringL$ListL()).from(["stack", []]);
      let graphGluc = new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(xo), "y", this.cm(yo)]), "canvas", []]);
      let graphLegend = new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(xo), "y", this.cm(yo)]), "stack", []]);
      let glucTable = new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(xo), "y", this.cm(dart.notNull(yo) + dart.notNull(this.glucTableTop))]), "stack", []]);
      let glucTableCvs = new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(xo), "y", this.cm(dart.notNull(yo) + dart.notNull(this.glucTableTop))]), "canvas", []]);
      let exerciseCvs = new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(xo), "y", this.cm(dart.notNull(yo) + dart.notNull(this.graphHeight))]), "canvas", []]);
      let graphCarbs = new (IdentityMapOfStringL$ListLOfMapLOfStringL$ObjectL()).from(["stack", JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(xo), "y", this.cm(yo)]), "canvas", []]), new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(xo), "y", this.cm(yo)]), "stack", []])])]);
      let graphInsulin = new (IdentityMapOfStringL$ListLOfMapLOfStringL$ObjectL()).from(["stack", JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(xo), "y", this.cm(yo)]), "canvas", []]), new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(xo), "y", this.cm(yo)]), "stack", []])])]);
      let pictures = new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(xo), "y", this.cm(yo)]), "stack", []]);
      let vertCvs = ListL().as(vertLines[$_get]("canvas"));
      let horzCvs = ListL().as(horzLines[$_get]("canvas"));
      let horzStack = horzLegend[$_get]("stack");
      let vertStack = vertLegend[$_get]("stack");
      let graphGlucCvs = ListL().as(graphGluc[$_get]("canvas"));
      let grid = this.drawGraphicGrid(this.glucMax, this.graphHeight, print_daily_graphic.PrintDailyGraphic.graphWidth, vertCvs, horzCvs, horzStack, vertStack, {graphBottom: this.graphBottom});
      if (grid.lineHeight === 0) {
        return new base_print.Page.new(this.isPortrait, [this.headerFooter({date: day.date}), new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(this.xorg), "y", this.cm(this.yorg)]), "text", this.msgMissingData])]);
      }
      this.glucMax = dart.notNull(grid.gridLines) * dart.notNull(grid.glucScale);
      let hasBloody = false;
      for (let entry of day.bloody) {
        let x = this.glucX(entry.time);
        let y = this.glucY(entry.mbg);
        y = this.glucY(entry.mbg);
        graphGlucCvs[$add](new (IdentityMapOfStringL$ObjectL()).from(["type", "rect", "x", this.cm(x), "y", this.cm(y), "w", this.cm(0.1), "h", this.cm(0.1), "color", this.colBloodValues]));
        hasBloody = true;
      }
      for (let t of day.treatments) {
        if (dart.test(t.isBloody)) {
          let x = this.glucX(t.createdAt);
          let y = this.glucY(dart.notNull(this.g.glucFactor) * dart.notNull(t.glucose));
          graphGlucCvs[$add](new (IdentityMapOfStringL$ObjectL()).from(["type", "rect", "x", this.cm(x), "y", this.cm(y), "w", this.cm(0.1), "h", this.cm(0.1), "color", this.colBloodValues]));
          hasBloody = true;
        }
      }
      let points = [];
      let last = null;
      for (let entry of day.entries) {
        let x = this.glucX(entry.time);
        let y = this.glucY(entry.gluc);
        if (dart.notNull(entry.gluc) < 0) {
          if (last != null && dart.notNull(last.gluc) >= 0) {
            graphGlucCvs[$add](this.glucLine(points));
            points = [];
          }
        } else {
          dart.dsend(points, 'add', [new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(x), "y", this.cm(y)])]);
        }
        last = entry;
      }
      graphGlucCvs[$add](this.glucLine(points));
      let hasLowGluc = false;
      let hasNormGluc = false;
      let hasHighGluc = false;
      if (dart.test(this.showGlucTable)) {
        for (let i = 0; i < 48; i = i + 1) {
          let hours = (i / 2)[$truncate]();
          let minutes = i[$modulo](2) * 30;
          let check = new core.DateTime.new(0, 1, 1, hours, minutes);
          let entry = EntryDataL().as(day.findNearest(day.entries, null, check, {maxMinuteDiff: 15}));
          let x = dart.notNull(this.glucX(check)) + 0.02;
          if (entry != null) {
            let col = this.colNorm;
            if (dart.notNull(entry.gluc) > dart.notNull(core.num.as(dart.dsend(this.targets(this.repData), '_get', ["high"])))) {
              col = this.colHigh;
              hasHighGluc = true;
            } else if (dart.notNull(entry.gluc) < dart.notNull(core.num.as(dart.dsend(this.targets(this.repData), '_get', ["low"])))) {
              col = this.colLow;
              hasLowGluc = true;
            } else {
              hasNormGluc = true;
            }
            ListL().as(glucTableCvs[$_get]("canvas"))[$add](new (IdentityMapOfStringL$ObjectL()).from(["type", "rect", "x", this.cm(this.glucX(check)), "y", this.cm(0), "w", this.cm(dart.notNull(print_daily_graphic.PrintDailyGraphic.graphWidth) / 1440 * 30), "h", this.cm(this.glucTableHeight), "color", col]));
            ListL().as(glucTable[$_get]("stack"))[$add](new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(x), "y", this.cm(i[$modulo](2) === 0 ? 0 : dart.notNull(this.glucTableHeight) / 2)]), "text", this.g.glucFromData(entry.gluc), "color", this.colGlucValues, "fontSize", this.fs(7.0)]));
          }
          if (i[$modulo](2) === 1) {
            ListL().as(glucTableCvs[$_get]("canvas"))[$add](new (IdentityMapOfStringL$ObjectL()).from(["type", "line", "x1", this.cm(this.glucX(check)), "y1", this.cm(dart.notNull(this.glucTableHeight) * 0.75), "x2", this.cm(this.glucX(check)), "y2", this.cm(this.glucTableHeight), "lineWidth", this.cm(this.lw), "lineColor", this.lc]));
          }
          if (entry != null) {
            let found = day.findNearest(day.bloody, day.treatments, check, {maxMinuteDiff: 15});
            if (EntryDataL().is(found)) {
              ListL().as(glucTable[$_get]("stack"))[$add](new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(x), "y", this.cm(i[$modulo](2) !== 0 ? 0 : dart.notNull(this.glucTableHeight) / 2)]), "text", this.g.glucFromData(found.mbg), "color", this.colBloodValues, "fontSize", this.fs(7.0)]));
            } else if (TreatmentDataL().is(found)) {
              let value = dart.notNull(this.g.glucFactor) * dart.notNull(found.glucose);
              ListL().as(glucTable[$_get]("stack"))[$add](new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(x), "y", this.cm(i[$modulo](2) !== 0 ? 0 : dart.notNull(this.glucTableHeight) / 2)]), "text", this.g.glucFromData(value), "color", this.colBloodValues, "fontSize", this.fs(7.0)]));
            }
          }
        }
        ListL().as(glucTableCvs[$_get]("canvas"))[$add](new (IdentityMapOfStringL$ObjectL()).from(["type", "line", "x1", this.cm(0), "y1", this.cm(this.glucTableHeight), "x2", this.cm(print_daily_graphic.PrintDailyGraphic.graphWidth), "y2", this.cm(this.glucTableHeight), "lineWidth", this.cm(this.lw), "lineColor", this.lcFrame]));
      }
      let hasCatheterChange = false;
      let hasSensorChange = false;
      let hasAmpulleChange = false;
      let hasCarbs = false;
      let hasBolus = false;
      let hasCarbBolus = false;
      let hasCollectedValues = false;
      let hasCarbIE = false;
      let hasBolusExt = false;
      let noteLines = JSArrayOfdoubleL().of([]);
      for (let t of day.treatments) {
        let x = null;
        let y = null;
        if (dart.test(t.isTempBasal)) continue;
        if ((dart.notNull(t.carbs) > 0 || dart.notNull(t.eCarbs) > 0) && dart.test(this.showCarbs)) {
          x = this.glucX(t.createdAt);
          if (dart.test(t.isECarb)) {
            this.paintECarbs(t.eCarbs, x, dart.notNull(this.graphHeight) - dart.notNull(this.lw), ListL().as(graphCarbs[$_get]("stack")[$_get](0)[$_get]("canvas")));
          } else {
            y = this.carbY(t.carbs);
            ListL().as(graphCarbs[$_get]("stack")[$_get](0)[$_get]("canvas"))[$add](new (IdentityMapOfStringL$ObjectL()).from(["type", "line", "x1", this.cm(x), "y1", this.cm(y), "x2", this.cm(x), "y2", this.cm(dart.notNull(this.graphHeight) - dart.notNull(this.lw)), "lineColor", this.colCarbs, "lineWidth", this.cm(0.1)]));
            let carbsIE = this.carbsForIE(src, t);
            if (dart.notNull(t.createdAt.difference(this.collCarbs[$last].start).inMinutes) < collMinutes) {
              this.collCarbs[$last].fill(t.createdAt, t.carbs, carbsIE);
            } else {
              this.collCarbs[$add](new print_daily_graphic.CollectInfo.new(t.createdAt, t.carbs, carbsIE));
            }
          }
          hasCarbs = true;
        }
        if (dart.test(this.showInsulin)) {
          if (dart.notNull(t.bolusInsulin) > 0 && !dart.test(t.isSMB)) {
            let insulin = t.bolusInsulin;
            let insulinExt = 0.0;
            if (dart.notNull(t.splitExt) > 0 || dart.notNull(t.splitNow) > 0) {
              insulinExt = dart.notNull(t.splitExt) * dart.notNull(insulin) / 100.0;
              insulin = dart.notNull(t.splitNow) * dart.notNull(insulin) / 100.0;
            }
            x = this.glucX(t.createdAt);
            y = this.bolusY(insulin);
            if (dart.notNull(insulin) > 0) {
              ListL().as(graphInsulin[$_get]("stack")[$_get](0)[$_get]("canvas"))[$add](new (IdentityMapOfStringL$ObjectL()).from(["type", "line", "x1", this.cm(x), "y1", this.cm(0), "x2", this.cm(x), "y2", this.cm(y), "lineColor", dart.test(this.splitBolus) && dart.test(t.isCarbBolus) ? this.colCarbBolus : this.colBolus, "lineWidth", this.cm(0.1)]));
            }
            if (insulinExt > 0) {
              let w = dart.notNull(this.glucX(t.createdAt.add(new core.Duration.new({seconds: t.duration})))) - dart.notNull(x);
              if (w < 0) w = dart.notNull(print_daily_graphic.PrintDailyGraphic.graphWidth) - dart.notNull(x);
              let h = this.bolusY(insulinExt);
              ListL().as(graphInsulin[$_get]("stack")[$_get](0)[$_get]("canvas"))[$add](new (IdentityMapOfStringL$ObjectL()).from(["type", "rect", "x", this.cm(x), "y", this.cm(0), "w", this.cm(w), "h", this.cm(h), "color", this.colBolusExt]));
              hasBolusExt = true;
            }
            if (dart.notNull(t.createdAt.difference(this.collInsulin[$last].start).inMinutes) < collMinutes) {
              this.collInsulin[$last].fill(t.createdAt, t.bolusInsulin, 0.0);
            } else {
              this.collInsulin[$add](new print_daily_graphic.CollectInfo.new(t.createdAt, t.bolusInsulin));
            }
            if (dart.test(this.splitBolus) && dart.test(t.isCarbBolus)) {
              hasCarbBolus = true;
            } else {
              hasBolus = true;
            }
          }
          if (dart.test(this.showSMB) && dart.test(t.isSMB) && dart.notNull(t.insulin) > 0) {
            let entry = EntryDataL().as(day.findNearest(day.entries, null, t.createdAt));
            x = this.glucX(t.createdAt);
            if (entry != null && dart.test(this.showSMBAtGluc)) {
              y = this.glucY(entry.gluc);
            } else {
              y = dart.notNull(this.glucY(src.targetValue(t.createdAt))) + dart.notNull(this.lw) / 2;
            }
            this.paintSMB(t.insulin, x, y, ListL().as(graphInsulin[$_get]("stack")[$_get](0)[$_get]("canvas")));
          }
        }
        if (dart.test(t.isSiteChange) && dart.test(this.showPictures)) {
          let x = dart.notNull(this.glucX(t.createdAt)) - 0.3;
          let y = dart.notNull(this.graphHeight) - 0.6;
          ListL().as(pictures[$_get]("stack"))[$add](new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(x), "y", this.cm(y)]), "image", "katheter.print", "width", this.cm(0.8)]));
          ListL().as(pictures[$_get]("stack"))[$add](new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(x + 0.33), "y", this.cm(y + 0.04)]), "text", dart.str(this.fmtTime(t.createdAt)), "fontSize", this.fs(5.0), "color", "white"]));
          hasCatheterChange = true;
        } else if (dart.test(t.isSensorChange) && dart.test(this.showPictures)) {
          let x = dart.notNull(this.glucX(t.createdAt)) - 0.3;
          let y = dart.notNull(this.graphHeight) - 0.6;
          ListL().as(pictures[$_get]("stack"))[$add](new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(x), "y", this.cm(y)]), "image", "sensor.print", "width", this.cm(0.6)]));
          ListL().as(pictures[$_get]("stack"))[$add](new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(x + 0.0), "y", this.cm(y + 0.34)]), "columns", JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$ObjectL()).from(["width", this.cm(0.6), "text", dart.str(this.fmtTime(t.createdAt)), "fontSize", this.fs(5.0), "color", "white", "alignment", "center"])])]));
          hasSensorChange = true;
        } else if (dart.test(t.isInsulinChange) && dart.test(this.showPictures)) {
          let x = dart.notNull(this.glucX(t.createdAt)) - 0.3;
          let y = dart.notNull(this.graphHeight) - 0.6;
          ListL().as(pictures[$_get]("stack"))[$add](new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(x), "y", this.cm(y)]), "image", "ampulle.print", "width", this.cm(0.8)]));
          ListL().as(pictures[$_get]("stack"))[$add](new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(x + 0.33), "y", this.cm(y + 0.1)]), "text", dart.str(this.fmtTime(t.createdAt)), "fontSize", this.fs(5.0), "color", "white"]));
          hasAmpulleChange = true;
        }
        if (dart.test(t.isExercise) && dart.test(this.showExercises)) {
          let x = this.glucX(t.createdAt);
          let wid = this.glucX(new core.DateTime.new(0, 0, 0, 0, 0, t.duration));
          ListL().as(exerciseCvs[$_get]("canvas"))[$add](new (IdentityMapOfStringL$ObjectL()).from(["type", "rect", "x", this.cm(x), "y", this.cm(0.05), "w", this.cm(wid), "h", this.cm(dart.notNull(this.glucExerciseHeight) - 0.1), "color", this.colExercises]));
          if ((t31$0 = t.notes, t31$0 == null ? "" : t31$0)[$isNotEmpty]) {
            ListL().as(graphLegend[$_get]("stack"))[$add](new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(dart.notNull(x) + 0.05), "y", this.cm(dart.notNull(this.glucExerciseTop) + dart.notNull(this.glucExerciseHeight) / 2 - 0.13)]), "text", t.notes, "fontSize", this.fs(6.0), "alignment", "left", "color", this.colExerciseText]));
          }
        } else if (dart.test(this.showNotes) && (t31$1 = t.notes, t31$1 == null ? "" : t31$1)[$isNotEmpty] && !dart.test(t.isECarb)) {
          let notes = t.notes;
          if (!dart.test(this.showHTMLNotes)) {
            notes = t.notes[$replaceAll](core.RegExp.new("<.*>"), "");
          }
          let x = this.glucX(t.createdAt);
          let idx = noteLines[$indexWhere](dart.fn(v => dart.notNull(v) < dart.notNull(x), doubleLToboolL()));
          let isMultiline = notes[$indexOf]("\n") > 0;
          let len = notes[$indexOf]("\n") > 0 ? notes[$indexOf]("\n") : notes.length;
          let pos = dart.notNull(x) + len * 0.15;
          if (dart.notNull(idx) < 0) {
            noteLines[$add](pos);
            idx = dart.notNull(noteLines[$length]) - 1;
          } else {
            noteLines[$_set](idx, pos);
          }
          if (isMultiline) {
            let lines = notes[$split]("\n");
            for (let i = 0; i < dart.notNull(lines[$length]); i = i + 1) {
              pos = dart.notNull(x) + lines[$_get](i).length * 0.15;
              if (dart.notNull(idx) + i >= dart.notNull(noteLines[$length])) noteLines[$add](0.0);
              noteLines[$_set](dart.notNull(idx) + i, math.max(doubleL(), noteLines[$_get](dart.notNull(idx) + i), pos));
            }
          }
          if (dart.notNull(idx) < (isMultiline ? 1 : 3)) {
            let y = dart.notNull(this.graphBottom) + dart.notNull(print_daily_graphic.PrintDailyGraphic.notesTop) + dart.notNull(idx) * dart.notNull(print_daily_graphic.PrintDailyGraphic.notesHeight);
            let top = this.graphBottom;
            if (dart.test(this.showNoteLinesAtGluc)) {
              let e = EntryDataL().as(day.findNearest(day.entries, null, t.createdAt));
              if (e != null) top = this.glucY(e.gluc);
            }
            graphGlucCvs[$add](new (IdentityMapOfStringL$ObjectL()).from(["type", "line", "x1", this.cm(x), "y1", this.cm(top), "x2", this.cm(x), "y2", this.cm(y + dart.notNull(print_daily_graphic.PrintDailyGraphic.notesHeight)), "lineWidth", this.cm(this.lw), "lineColor", dart.notNull(t.duration) > 0 ? this.colDurationNotesLine : this.colNotesLine]));
            ListL().as(graphLegend[$_get]("stack"))[$add](new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(dart.notNull(x) + 0.05), "y", this.cm(y + dart.notNull(print_daily_graphic.PrintDailyGraphic.notesHeight) - 0.25)]), "text", notes, "fontSize", this.fs(8.0), "alignment", "left", "color", dart.notNull(t.duration) > 0 ? this.colDurationNotes : this.colNotes]));
            if (dart.notNull(t.duration) > 0) {
              x = this.glucX(t.createdAt.add(new core.Duration.new({seconds: t.duration})));
              graphGlucCvs[$add](new (IdentityMapOfStringL$ObjectL()).from(["type", "line", "x1", this.cm(x), "y1", this.cm(dart.notNull(this.graphBottom) + 0.35), "x2", this.cm(x), "y2", this.cm(y + 0.1), "lineWidth", this.cm(this.lw), "lineColor", this.colDurationNotesLine]));
            }
          }
        }
      }
      if (dart.test(this.showExercises) && dart.test(this.hasExercises)) {
        ListL().as(exerciseCvs[$_get]("canvas"))[$add](new (IdentityMapOfStringL$ObjectL()).from(["type", "line", "x1", this.cm(0), "y1", this.cm(this.glucExerciseHeight), "x2", this.cm(print_daily_graphic.PrintDailyGraphic.graphWidth), "y2", this.cm(this.glucExerciseHeight), "lineWidth", this.cm(this.lw), "lineColor", this.lcFrame]));
      }
      for (let info of this.collInsulin) {
        if (info.sum1 === 0.0) continue;
        let y = dart.test(this.sumNarrowValues) ? -0.5 : this.bolusY(info.max1);
        let text = dart.str(this.g.fmtBasal(info.sum1, {dontRound: !dart.test(this.roundToProfile)})) + " " + dart.str(this.msgInsulinUnit);
        if (dart.notNull(info.count) > 1) {
          text = "[" + text + "]";
          hasCollectedValues = true;
        }
        ListL().as(graphInsulin[$_get]("stack")[$_get](1)[$_get]("stack"))[$add](new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(dart.notNull(this.glucX(info.start)) - 0.05), "y", this.cm(y)]), "text", text, "fontSize", this.fs(dart.notNull(this.g.basalPrecision) > 2 ? 7.0 : 8.0), "color", this.colBolus]));
      }
      for (let info of this.collCarbs) {
        if (info.sum1 === 0.0) continue;
        let y = this.carbY(info.max1);
        let text = dart.str(this.msgKH(this.g.fmtNumber(info.sum1)));
        if (dart.notNull(info.count) > 1) {
          text = "[" + text + "]";
          hasCollectedValues = true;
        }
        y = dart.notNull(y) - 0.35;
        if (dart.test(this.showCarbIE) && dart.notNull(info.sum2) > 0.0) {
          let text1 = dart.str(this.g.fmtBasal(info.sum2, {dontRound: !dart.test(this.roundToProfile)})) + " " + dart.str(this.msgInsulinUnit);
          if (dart.notNull(info.count) > 1) text1 = "[" + text1 + "]";
          ListL().as(graphCarbs[$_get]("stack")[$_get](1)[$_get]("stack"))[$add](new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(dart.notNull(this.glucX(info.start)) - 0.05), "y", this.cm(y)]), "text", text1, "fontSize", this.fs(7.0), "color", this.colCarbsText]));
          hasCarbIE = true;
          y = dart.notNull(y) - 0.35;
        }
        ListL().as(graphCarbs[$_get]("stack")[$_get](1)[$_get]("stack"))[$add](new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(dart.notNull(this.glucX(info.start)) - 0.05), "y", this.cm(y)]), "text", text, "fontSize", this.fs(8.0)]));
      }
      let date = new core.DateTime.new(day.date.year, day.date.month, day.date.day);
      let profile = src.profile(date, day.treatments);
      let targetValues = [];
      let lastTarget = -1.0;
      let yHigh = this.glucY(math.min(doubleL(), this.glucMax, doubleL().as(dart.dsend(this.targets(this.repData), '_get', ["high"]))));
      let yLow = this.glucY(doubleL().as(dart.dsend(this.targets(this.repData), '_get', ["low"])));
      for (let i = 0; i < dart.notNull(profile.store.listTargetLow[$length]); i = i + 1) {
        if (i < dart.notNull(profile.store.listTargetHigh[$length])) {
          let low = profile.store.listTargetLow[$_get](i).value;
          let high = profile.store.listTargetHigh[$_get](i).value;
          if (!dart.test(this.g.glucMGDLFromStatus)) {
            low = dart.notNull(low) * 18.02;
            high = dart.notNull(high) * 18.02;
          }
          let x = this.glucX(profile.store.listTargetLow[$_get](i).time(day.date));
          let y = this.glucY((dart.notNull(low) + dart.notNull(high)) / 2);
          if (dart.notNull(lastTarget) >= 0) targetValues[$add](new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(x), "y", this.cm(lastTarget)]));
          targetValues[$add](new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(x), "y", this.cm(y)]));
          lastTarget = y;
        }
      }
      targetValues[$add](new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(this.glucX(new core.DateTime.new(0, 1, 1, 23, 59, 59, 999))), "y", this.cm(lastTarget)]));
      let limitLines = new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(xo), "y", this.cm(yo)]), "canvas", JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$ObjectL()).from(["type", "rect", "x", this.cm(0.0), "y", this.cm(yHigh), "w", this.cm(24 * dart.notNull(grid.colWidth)), "h", this.cm(dart.notNull(yLow) - dart.notNull(yHigh)), "color", this.colTargetArea, "fillOpacity", 0.3]), new (IdentityMapOfStringL$ObjectL()).from(["type", "line", "x1", this.cm(0.0), "y1", this.cm(yHigh), "x2", this.cm(24 * dart.notNull(grid.colWidth)), "y2", this.cm(yHigh), "lineWidth", this.cm(this.lw), "lineColor", this.colTargetArea]), new (IdentityMapOfStringL$ObjectL()).from(["type", "line", "x1", this.cm(0.0), "y1", this.cm(yLow), "x2", this.cm(24 * dart.notNull(grid.colWidth)), "y2", this.cm(yLow), "lineWidth", this.cm(this.lw), "lineColor", this.colTargetArea]), new (IdentityMapOfStringL$ObjectL()).from(["type", "rect", "x", 0, "y", 0, "w", 0, "h", 0, "color", "#000", "fillOpacity", 1])])]);
      if (dart.test(this.showTargetValue)) {
        ListL().as(limitLines[$_get]("canvas"))[$add](new (IdentityMapOfStringL$ObjectL()).from(["type", "polyline", "lineWidth", this.cm(dart.notNull(this.lw) * 2), "closePath", false, "lineColor", this.colTargetValue, "points", targetValues]));
      }
      let y = dart.notNull(yo) + dart.notNull(grid.lineHeight) * dart.notNull(grid.gridLines);
      if (dart.test(this.showBasalProfile) || dart.test(this.showBasalDay)) {
        y = y + (1.2 + dart.notNull(print_daily_graphic.PrintDailyGraphic.basalHeight) + dart.notNull(print_daily_graphic.PrintDailyGraphic.basalTop));
      } else {
        y = y + dart.notNull(print_daily_graphic.PrintDailyGraphic.basalTop);
      }
      let legend = new base_print.LegendData.new(this.cm(xo), this.cm(y), this.cm(7.0), 6);
      let tdd = dart.notNull(day.ieBasalSum(!dart.test(this.showBasalDay))) + dart.notNull(day.ieBolusSum);
      let infoTable = new _js_helper.LinkedMap.new();
      if (dart.test(this.showLegend)) {
        this.addLegendEntry(legend, this.colValue, this.msgGlucosekurve, {isArea: false});
        if (hasBloody) {
          this.addLegendEntry(legend, this.colBloodValues, this.msgBloody, {points: JSArrayOfMapLOfStringL$doubleL().of([new (IdentityMapOfStringL$doubleL()).from(["x", 0.3, "y", 0.2]), new (IdentityMapOfStringL$doubleL()).from(["x", 0.4, "y", 0.2]), new (IdentityMapOfStringL$doubleL()).from(["x", 0.4, "y", 0.3]), new (IdentityMapOfStringL$doubleL()).from(["x", 0.3, "y", 0.3])]), isArea: false});
        }
        let text = null;
        if (hasCarbs) {
          text = dart.str(this.g.fmtNumber(day.carbs, 0));
          this.addLegendEntry(legend, this.colCarbs, this.msgCarbs(text), {isArea: false, lineWidth: 0.1});
        }
        if (hasCarbIE) this.addLegendEntry(legend, "", this.msgCarbIE, {graphText: "1,0 IE", colGraphText: this.colCarbsText});
        if (dart.test(this.splitBolus)) {
          let sum = day.ieCorrectionSum;
          if (!dart.test(this.showSMB)) sum = dart.notNull(sum) + dart.notNull(day.ieSMBSum);
          if (dart.notNull(sum) > 0.0) {
            this.addLegendEntry(legend, this.colBolus, this.msgCorrectBolusInsulin(dart.str(this.g.fmtBasal(sum, {dontRound: !dart.test(this.roundToProfile)})) + " " + dart.str(this.msgInsulinUnit)), {isArea: false, lineWidth: 0.1});
          }
          if (hasCarbBolus) {
            this.addLegendEntry(legend, this.colCarbBolus, this.msgCarbBolusInsulin(dart.str(this.g.fmtBasal(day.ieCarbSum, {dontRound: !dart.test(this.roundToProfile)})) + " " + dart.str(this.msgInsulinUnit)), {isArea: false, lineWidth: 0.1});
          }
          if (dart.test(this.showSMB) && dart.notNull(day.ieSMBSum) > 0.0) {
            this.addLegendEntry(legend, this.colBolus, this.msgSMBInsulin(dart.str(this.g.fmtBasal(day.ieSMBSum, {dontRound: !dart.test(this.roundToProfile)})) + " " + dart.str(this.msgInsulinUnit)), {points: JSArrayOfMapLOfStringL$doubleL().of([new (IdentityMapOfStringL$doubleL()).from(["x", 0.1, "y", 0.1]), new (IdentityMapOfStringL$doubleL()).from(["x", 0.5, "y", 0.1]), new (IdentityMapOfStringL$doubleL()).from(["x", 0.3, "y", 0.4])]), isArea: false, lineWidth: 0.1});
          }
        } else if (hasBolus) {
          this.addLegendEntry(legend, this.colBolus, this.msgBolusInsulin(dart.str(this.g.fmtBasal(day.ieBolusSum, {dontRound: !dart.test(this.roundToProfile)})) + " " + dart.str(this.msgInsulinUnit)), {isArea: false, lineWidth: 0.1});
        }
        if (hasBolusExt) {
          this.addLegendEntry(legend, this.colBolusExt, this.msgBolusExtInsulin, {isArea: false, lineWidth: 0.1});
        }
        if (dart.test(this.showExercises) && dart.test(this.hasExercises)) {
          this.addLegendEntry(legend, this.colExercises, this.msgExercises, {isArea: false, lineWidth: 0.3});
        }
        if (dart.test(this.showBasalDay)) {
          text = dart.str(this.g.fmtBasal(day.ieBasalSum(!dart.test(this.showBasalDay)), {dontRound: !dart.test(this.roundToProfile)})) + " " + dart.str(this.msgInsulinUnit);
          this.addLegendEntry(legend, this.colBasalDay, this.msgBasalrateDay(text), {isArea: true});
        }
        if (dart.test(this.showBasalProfile)) {
          text = dart.str(this.g.fmtBasal(day.basalData.store.ieBasalSum, {dontRound: !dart.test(this.roundToProfile)})) + " " + dart.str(this.msgInsulinUnit);
          this.addLegendEntry(legend, this.colProfileSwitch, this.msgBasalrateProfile(text), {isArea: false});
        }
        text = dart.str(this.g.fmtBasal(tdd, {dontRound: !dart.test(this.roundToProfile)})) + " " + dart.str(this.msgInsulinUnit);
        this.addLegendEntry(legend, "", this.msgLegendTDD(text), {graphText: this.msgTDD});
        let v1 = this.g.glucFromData(dart.dsend(dart.dsend(this.targets(this.repData), '_get', ["low"]), 'toDouble', []));
        let v2 = this.g.glucFromData(dart.dsend(dart.dsend(this.targets(this.repData), '_get', ["high"]), 'toDouble', []));
        this.addLegendEntry(legend, this.colTargetArea, this.msgTargetArea(v1, v2, StringL().as(dart.dsend(this.g.getGlucInfo(), '_get', ["unit"]))));
        if (dart.test(this.showTargetValue)) {
          this.addLegendEntry(legend, this.colTargetValue, this.msgTargetValue(dart.str(this.g.glucFromData((dart.notNull(profile.targetHigh) + dart.notNull(profile.targetLow)) / 2)) + " " + dart.str(dart.dsend(this.g.getGlucInfo(), '_get', ["unit"]))), {isArea: false});
        }
        if (hasCollectedValues) {
          this.addLegendEntry(legend, "", this.msgCollectedValues, {graphText: "[0,0]"});
        }
        if (hasCatheterChange) {
          this.addLegendEntry(legend, "", this.msgCatheterChange, {image: "katheter.print", imgWidth: 0.5, imgOffsetY: 0.15});
        }
        if (hasSensorChange) {
          this.addLegendEntry(legend, "", this.msgSensorChange, {image: "sensor.print", imgWidth: 0.5, imgOffsetY: -0.05});
        }
        if (hasAmpulleChange) {
          this.addLegendEntry(legend, "", this.msgAmpulleChange, {image: "ampulle.print", imgWidth: 0.4, imgOffsetY: 0.1});
        }
        if (dart.test(this.showGlucTable)) {
          if (hasLowGluc) {
            this.addLegendEntry(legend, this.colLow, this.msgGlucLow, {graphText: this.g.glucFromData(day.basalData.targetLow), newColumn: dart.notNull(legend.columns[$length]) < 3});
          }
          if (hasNormGluc) {
            this.addLegendEntry(legend, this.colNorm, this.msgGlucNorm, {graphText: this.g.glucFromData((dart.notNull(day.basalData.targetLow) + dart.notNull(day.basalData.targetHigh)) / 2), newColumn: !hasLowGluc && dart.notNull(legend.columns[$length]) < 3});
          }
          if (hasHighGluc) {
            this.addLegendEntry(legend, this.colHigh, this.msgGlucHigh, {graphText: this.g.glucFromData(day.basalData.targetHigh), newColumn: !hasLowGluc && !hasNormGluc && dart.notNull(legend.columns[$length]) < 3});
          }
        }
        let infoBody = [];
        infoTable = new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(dart.notNull(xo) + dart.notNull(print_daily_graphic.PrintDailyGraphic.graphWidth) - 4.5), "y", this.cm(y - 0.1)]), "table", new (IdentityMapOfStringL$ListL()).from(["margins", JSArrayOfintL().of([0, 0, 0, 0]), "widths", JSArrayOfdoubleL().of([this.cm(2.3), this.cm(2.2)]), "body", infoBody]), "layout", "noBorders"]);
        infoBody[$add](JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$ObjectL()).from(["text", this.msgHbA1C, "fontSize", this.fs(10.0)]), new (IdentityMapOfStringL$ObjectL()).from(["text", dart.str(this.hba1c(day.mid)) + " %", "color", this.colHbA1c, "fontSize", this.fs(10.0), "alignment", "right"])]));
        let prz = dart.notNull(day.ieBasalSum(!dart.test(this.showBasalDay))) / (dart.notNull(day.ieBasalSum(!dart.test(this.showBasalDay))) + dart.notNull(day.ieBolusSum)) * 100;
        infoBody[$add](JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$ObjectL()).from(["text", this.msgBasalSum, "fontSize", this.fs(10.0)]), new (IdentityMapOfStringL$ObjectL()).from(["text", dart.str(this.g.fmtNumber(prz, 1)) + " %", "color", this.colBasalDay, "fontSize", this.fs(10.0), "alignment", "right"])]));
        prz = dart.notNull(day.ieBolusSum) / (dart.notNull(day.ieBasalSum(!dart.test(this.showBasalDay))) + dart.notNull(day.ieBolusSum)) * 100;
        infoBody[$add](JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$ObjectL()).from(["text", this.msgBolusSum, "fontSize", this.fs(10.0)]), new (IdentityMapOfStringL$ObjectL()).from(["text", dart.str(this.g.fmtNumber(prz, 1)) + " %", "color", this.colBolus, "fontSize", this.fs(10.0), "alignment", "right"])]));
        if (dart.test(this.showZeroBasal)) {
          let duration = new core.Duration.new({seconds: day.basalZeroDuration});
          infoBody[$add](JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$ObjectL()).from(["text", this.msgBasalZero, "fontSize", this.fs(10.0)]), new (IdentityMapOfStringL$ObjectL()).from(["text", dart.str(this.msgDuration(duration.inHours, dart.notNull(duration.inMinutes) - dart.notNull(duration.inHours) * 60)), "color", this.colBasalDay, "fontSize", this.fs(10.0), "alignment", "right"])]));
        }
      }
      let profileBasal = dart.test(this.showBasalProfile) ? this.getBasalGraph(day, true, this.showBasalDay, xo, yo) : null;
      let dayBasal = dart.test(this.showBasalDay) ? this.getBasalGraph(day, false, false, xo, yo) : null;
      if (dart.test(this.showBasalProfile)) {
        dart.dsend(dart.dsend(profileBasal, '_get', ["stack"]), 'add', [new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(xo), "y", this.cm(dart.notNull(yo) + dart.notNull(this.graphHeight) + dart.notNull(print_daily_graphic.PrintDailyGraphic.basalHeight) + dart.notNull(print_daily_graphic.PrintDailyGraphic.basalTop) + 0.2)]), "columns", JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$ObjectL()).from(["width", this.cm(print_daily_graphic.PrintDailyGraphic.basalWidth), "text", dart.str(this.msgTDD) + " " + dart.str(this.g.fmtBasal(tdd, {dontRound: !dart.test(this.roundToProfile)})) + " " + dart.str(this.msgInsulinUnit), "fontSize", this.fs(20.0), "alignment", "center", "color", this.colBasalDay])])])]);
      }
      let stack = null;
      if (dart.test(this.showBasalProfile)) {
        stack = ListL().as(dart.dsend(profileBasal, '_get', ["stack"]));
      } else if (dart.test(this.showBasalDay)) {
        stack = ListL().as(dart.dsend(dayBasal, '_get', ["stack"]));
      }
      if (stack != null) {
        let startDate = new core.DateTime.new(day.date.year, day.date.month, day.date.day);
        startDate = startDate.add(new core.Duration.new({minutes: -1}));
        let startProfile = null;
        let lastProfile = null;
        for (let p of src.profiles) {
          if (dart.test(p.startDate.isBefore(startDate))) startProfile = p;
          if (dart.test(p.startDate.isAfter(startDate)) && dart.test(day.isSameDay(p.startDate))) {
            this.showProfileSwitch(src, p, lastProfile, stack, xo, yo);
            lastProfile = p;
          }
        }
        if (startProfile != null && dart.test(this.showProfileStart)) {
          this.showProfileSwitch(src, startProfile, lastProfile, stack, xo, yo, this.glucX(new core.DateTime.new(0)));
        }
      }
      let error = null;
      if (error != null) {
        return new base_print.Page.new(this.isPortrait, [this.headerFooter({date: day.date}), new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(xo), "y", this.cm(yo)]), "text", "Fehler bei " + dart.str(error), "color", "red"])]);
      }
      const graphArea = (points, colLine, colFill) => {
        return new (IdentityMapOfStringL$dynamic()).from(["type", "polyline", "lineWidth", this.cm(this.lw), "closePath", true, "color", colFill, "lineColor", colLine, "points", points]);
      };
      dart.fn(graphArea, dynamicAndStringLAndStringLTodynamic());
      let graphIob = new _js_helper.LinkedMap.new();
      let graphCob = new _js_helper.LinkedMap.new();
      if (dart.test(this.showCOB) || dart.test(this.showIOB)) {
        let hc = [];
        let vs = [];
        let pts = this.getIobCob(xo, yo, print_daily_graphic.PrintDailyGraphic.graphWidth, this.graphHeight, hc, vs, day, dart.notNull(this.ieMax) * 4, this.carbMax);
        if (dart.test(this.showIOB)) {
          graphIob = new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(xo), "y", this.cm(dart.notNull(yo) - dart.notNull(core.num.as(dart.dsend(pts, '_get', ["iobTop"]))))]), "canvas", []]);
          let graphIobCvs = ListL().as(dart.dsend(graphIob, '_get', ["canvas"]));
          graphIobCvs[$add](graphArea(dart.dsend(pts, '_get', ["iob"]), this.colIOBDaily, this.colIOBDaily));
        }
        if (dart.test(this.showCOB)) {
          graphCob = new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(xo), "y", this.cm(dart.notNull(yo) + dart.notNull(this.graphHeight) - dart.notNull(core.num.as(dart.dsend(pts, '_get', ["cobHeight"]))))]), "canvas", []]);
          let graphCobCvs = ListL().as(dart.dsend(graphCob, '_get', ["canvas"]));
          graphCobCvs[$add](graphArea(dart.dsend(pts, '_get', ["cob"]), this.colCOBDaily, this.colCOBDaily));
        }
      }
      let ret = new base_print.Page.new(this.isPortrait, [this.headerFooter({date: day.date}), graphIob, graphCob, glucTableCvs, exerciseCvs, vertLegend, vertLines, horzLegend, horzLines, limitLines, pictures, graphGluc, graphInsulin, graphCarbs, glucTable, dayBasal, profileBasal, graphLegend]);
      if (legend.asOutput != null) {
        ret.content[$add](legend.asOutput);
        ret.content[$add](infoTable);
      }
      return ret;
    }
    showProfileSwitch(src, p, last, stack, xo, yo, x = null) {
      if (last != null && p.storeHash == last.storeHash) return;
      x == null ? x = this.glucX(p.startDate) : null;
      let y = dart.notNull(this.graphHeight) + dart.notNull(print_daily_graphic.PrintDailyGraphic.basalTop) + dart.notNull(print_daily_graphic.PrintDailyGraphic.basalHeight);
      if (dart.notNull(x) < dart.notNull(this.width)) {
        ListL().as(dart.dsend(stack[$_get](0), '_get', ["canvas"]))[$add](new (IdentityMapOfStringL$ObjectL()).from(["type", "line", "x1", this.cm(x), "y1", this.cm(0), "x2", this.cm(x), "y2", this.cm(dart.notNull(print_daily_graphic.PrintDailyGraphic.basalHeight) + 0.25), "lineWidth", this.cm(this.lw), "lineColor", this.colProfileSwitch]));
        stack[$add](new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(dart.notNull(xo) + dart.notNull(x) + 0.1), "y", this.cm(dart.notNull(yo) + y)]), "text", src.profile(p.startDate).store.name, "fontSize", this.fs(8.0), "color", this.colProfileSwitch]));
      }
    }
    getBasalGraph(day, useProfile, displayProfile, xo, yo) {
      let data = null;
      let basalSum = null;
      let color = null;
      if (dart.test(useProfile)) {
        data = day.basalData.store.listBasal;
        color = this.colProfileSwitch;
      } else {
        data = day.profile;
        color = this.colBasalDay;
      }
      basalSum = day.ieBasalSum(!dart.test(useProfile));
      let basalCvs = [];
      let ret = new (IdentityMapOfStringL$ListLOfMapLOfStringL$ObjectL()).from(["stack", JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(xo), "y", this.cm(dart.notNull(yo) + dart.notNull(this.graphHeight) + dart.notNull(print_daily_graphic.PrintDailyGraphic.basalTop))]), "canvas", basalCvs])])]);
      if (basalSum !== 0) {
        ret[$_get]("stack")[$add](new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(xo), "y", this.cm(dart.notNull(yo) + dart.notNull(this.graphHeight) + dart.notNull(print_daily_graphic.PrintDailyGraphic.basalHeight) + dart.notNull(print_daily_graphic.PrintDailyGraphic.basalTop) + 0.2)]), "columns", JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$ObjectL()).from(["width", this.cm(print_daily_graphic.PrintDailyGraphic.basalWidth), "text", dart.str(this.g.fmtBasal(basalSum, {dontRound: !dart.test(this.roundToProfile)})) + " " + dart.str(this.msgInsulinUnit), "fontSize", this.fs(20.0), "alignment", dart.test(displayProfile) ? "right" : "left", "color", color])])]));
      }
      let lastY = -1.0;
      let areaPoints = [];
      let area = new (IdentityMapOfStringL$ObjectL()).from(["type", "polyline", "lineWidth", this.cm(this.lw), "closePath", !dart.test(displayProfile), "color", !dart.test(displayProfile) ? this.blendColor(color, "#ffffff", 0.7) : null, "lineColor", color, "dash", dart.test(displayProfile) ? new (IdentityMapOfStringL$doubleL()).from(["length", this.cm(0.1), "space", this.cm(0.05)]) : new _js_helper.LinkedMap.new(), "points", areaPoints]);
      let temp = JSArrayOfProfileEntryDataL().of([]);
      for (let entry of data) {
        temp[$add](entry);
      }
      if (dart.test(useProfile)) {
        temp[$sort](dart.fn((a, b) => a.time(day.date, useProfile).compareTo(b.time(day.date, useProfile)), ProfileEntryDataLAndProfileEntryDataLTointL()));
        if (dart.test(temp[$isEmpty])) temp[$add](new json_data.ProfileEntryData.new(new json_data.ProfileTimezone.new(globals.Globals.refTimezone)));
        if (temp[$_get](0).timeAsSeconds !== -dart.notNull(temp[$_get](0).localDiff) * 60 * 60) {
          let clone = temp[$_get](0).clone(new core.DateTime.new(0, 1, 1, -dart.notNull(temp[$_get](0).localDiff), 0));
          temp[$insert](0, clone);
        }
      }
      if (!dart.test(displayProfile)) areaPoints[$add](new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(this.basalX(new core.DateTime.new(0, 1, 1, 0, 0))), "y", this.cm(this.basalY(0.0))]));
      for (let entry of temp) {
        let x = this.basalX(entry.time(day.date, useProfile));
        let y = this.basalY(entry.value);
        if (dart.notNull(lastY) >= 0) areaPoints[$add](new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(x), "y", this.cm(lastY)]));
        areaPoints[$add](new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(x), "y", this.cm(y)]));
        lastY = y;
      }
      if (dart.notNull(lastY) >= 0) areaPoints[$add](new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(this.basalX(new core.DateTime.new(0, 1, 1, 23, 59))), "y", this.cm(lastY)]));
      if (!dart.test(displayProfile)) areaPoints[$add](new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(this.basalX(new core.DateTime.new(0, 1, 1, 23, 59))), "y", this.cm(this.basalY(0.0))]));
      basalCvs[$add](area);
      return ret;
    }
    paintECarbs(eCarbs, x, y, cvs) {
      let h = dart.notNull(this.graphHeight) - dart.notNull(this.carbY(eCarbs));
      cvs[$add](new (IdentityMapOfStringL$ObjectL()).from(["type", "polyline", "closePath", true, "_lineColor", "#000000", "color", this.colCarbs, "lineWidth", this.cm(0), "points", JSArrayOfMapLOfStringL$doubleL().of([new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(x), "y", this.cm(dart.notNull(y) - h - 0.1)]), new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(dart.notNull(x) + 0.1), "y", this.cm(y)]), new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(dart.notNull(x) - 0.1), "y", this.cm(y)])])]));
    }
  };
  (print_daily_graphic.PrintDailyGraphic.new = function() {
    this[help$3] = intl.Intl.message("Dieses Formular zeigt den Verlauf der Glukosekurve für einen Tag. Pro Tag im ausgewählten\nZeitraum wird eine Seite erzeugt. Es gibt sehr viele Optionen, mit denen dieses Formular angepasst werden kann.\nDie Optionen, die auf einen Loop hinweisen sind andersfarbig markiert, um sie schneller identifizieren zu \nkönnen. Die Optionen COB und IOB verlangsamen die Ausgabe teilweise erheblich, weshalb man diese nur dann\nverwenden sollte, wenn sie wirklich von Interesse sind.\n\nUnter der Grafik kann die Basalrate angezeigt werden. Ein laufender Loop wird diese immer wieder hoch und runter\nsetzen. Deshalb kann man sowohl die tatsächliche Basalrate als auch die im Profil eingestellte Basalrate \nanzeigen lassen. Für die Basalrate gibt es noch die Formulare @09@, @11@ und @02@, auf denen man sie genauer \nanalysieren kann. Man kann auch das @10@ für den Tag erzeugen lassen. Das wird dann auf einer neuen Seite ausgegeben.\n\nDieses Formular ist eines der seitenintensivsten Formulare in Nightscout Reporter. Deshalb gibt es hier \ndie Möglichkeit, mehrere Tagesgrafiken auf einer Seite ausgeben zu lassen. Darunter leidet natürlich die Lesbarkeit,\naber für einen Überblick über den Verlauf ist das ganz nützlich.", {desc: "help for daygraph"});
    this[id$8] = "daygraph";
    this[idx$5] = "05";
    this[showPictures] = null;
    this[showInsulin] = null;
    this[showCarbs$] = null;
    this[showBasalDay] = null;
    this[showBasalProfile] = null;
    this[showLegend] = null;
    this[isPrecise] = null;
    this[showNotes] = null;
    this[showGlucTable] = null;
    this[showNoteLinesAtGluc] = null;
    this[sumNarrowValues] = null;
    this[splitBolus] = null;
    this[showExercises] = null;
    this[showCarbIE] = null;
    this[showCGP] = null;
    this[showProfileStart] = null;
    this[showHTMLNotes] = null;
    this[showZeroBasal] = null;
    this[showCOB] = null;
    this[showIOB] = null;
    this[roundToProfile] = null;
    this[spareBool1] = null;
    this[showTargetValue] = null;
    this[params$6] = JSArrayOfParamInfoL().of([new base_print.ParamInfo.new(0, print_daily_graphic.PrintDailyGraphic.msgParam1, {boolValue: true}), new base_print.ParamInfo.new(1, print_daily_graphic.PrintDailyGraphic.msgParam2, {boolValue: true}), new base_print.ParamInfo.new(4, print_daily_graphic.PrintDailyGraphic.msgParam3, {boolValue: true}), new base_print.ParamInfo.new(6, print_daily_graphic.PrintDailyGraphic.msgParam4, {boolValue: true, isLoopValue: true, subParams: JSArrayOfParamInfoL().of([new base_print.ParamInfo.new(0, print_daily_graphic.PrintDailyGraphic.msgParam20, {boolValue: false, isLoopValue: true})])}), new base_print.ParamInfo.new(7, print_daily_graphic.PrintDailyGraphic.msgParam5, {boolValue: true}), new base_print.ParamInfo.new(8, print_daily_graphic.PrintDailyGraphic.msgParam6, {boolValue: false, isDeprecated: true}), new base_print.ParamInfo.new(12, base_print.BasePrint.msgGraphsPerPage, {list: JSArrayOfStringL().of([intl.Intl.message("Eine"), intl.Intl.message("Zwei"), intl.Intl.message("Vier"), intl.Intl.message("Acht"), intl.Intl.message("Sechzehn")])}), new base_print.ParamInfo.new(8, print_daily_graphic.PrintDailyGraphic.msgParam8, {boolValue: true}), new base_print.ParamInfo.new(9, print_daily_graphic.PrintDailyGraphic.msgParam9, {boolValue: true, subParams: JSArrayOfParamInfoL().of([new base_print.ParamInfo.new(0, print_daily_graphic.PrintDailyGraphic.msgParam13, {boolValue: false}), new base_print.ParamInfo.new(1, print_daily_graphic.PrintDailyGraphic.msgParam21, {boolValue: false})])}), new base_print.ParamInfo.new(11, "", {boolValue: false, isDeprecated: true}), new base_print.ParamInfo.new(13, print_daily_graphic.PrintDailyGraphic.msgParam11, {boolValue: true}), new base_print.ParamInfo.new(14, print_daily_graphic.PrintDailyGraphic.msgParam14, {boolValue: true}), new base_print.ParamInfo.new(3, base_daily.BaseDaily.msgDaily1, {boolValue: true, subParams: JSArrayOfParamInfoL().of([new base_print.ParamInfo.new(0, base_daily.BaseDaily.msgDaily2, {boolValue: true, isLoopValue: true})]), isLoopValue: true}), new base_print.ParamInfo.new(15, print_daily_graphic.PrintDailyGraphic.msgParam16, {boolValue: false}), new base_print.ParamInfo.new(16, print_daily_graphic.PrintDailyGraphic.msgParam17, {boolValue: false}), new base_print.ParamInfo.new(5, print_daily_graphic.PrintDailyGraphic.msgParam18, {boolValue: false}), new base_print.ParamInfo.new(17, print_daily_graphic.PrintDailyGraphic.msgParam19, {boolValue: false}), new base_print.ParamInfo.new(18, print_daily_graphic.PrintDailyGraphic.msgParam22, {boolValue: false}), new base_print.ParamInfo.new(2, print_daily_graphic.PrintDailyGraphic.msgParam23, {boolValue: true}), new base_print.ParamInfo.new(19, print_daily_graphic.PrintDailyGraphic.msgParam24, {boolValue: false}), new base_print.ParamInfo.new(20, print_daily_graphic.PrintDailyGraphic.msgParam25, {boolValue: false}), new base_print.ParamInfo.new(21, print_daily_graphic.PrintDailyGraphic.msgParam26, {boolValue: true, isLoopValue: true})]);
    this[lineWidth$] = null;
    this[glucMax$] = 0.0;
    this[profMax] = 0.0;
    this[carbMax] = 200.0;
    this[bolusMax] = 50.0;
    this[ieMax] = 0.0;
    this[graphBottom] = null;
    this[glucTableHeight] = 0.6;
    this[glucTableTop] = null;
    this[glucExerciseHeight] = 0.6;
    this[glucExerciseTop] = null;
    this[collInsulin] = JSArrayOfCollectInfoL().of([]);
    this[collCarbs] = JSArrayOfCollectInfoL().of([]);
    this[hasExercises] = null;
    print_daily_graphic.PrintDailyGraphic.__proto__.new.call(this);
    this.init();
  }).prototype = print_daily_graphic.PrintDailyGraphic.prototype;
  dart.addTypeTests(print_daily_graphic.PrintDailyGraphic);
  dart.addTypeCaches(print_daily_graphic.PrintDailyGraphic);
  dart.setMethodSignature(print_daily_graphic.PrintDailyGraphic, () => ({
    __proto__: dart.getMethods(print_daily_graphic.PrintDailyGraphic.__proto__),
    glucX: dart.fnType(dart.legacy(core.double), [dart.legacy(core.DateTime)]),
    glucY: dart.fnType(dart.legacy(core.double), [dart.legacy(core.double)]),
    carbY: dart.fnType(dart.legacy(core.double), [dart.legacy(core.double)]),
    bolusY: dart.fnType(dart.legacy(core.double), [dart.legacy(core.double)]),
    basalX: dart.fnType(dart.legacy(core.double), [dart.legacy(core.DateTime)]),
    basalY: dart.fnType(dart.legacy(core.double), [dart.legacy(core.double)]),
    fillPages: dart.fnType(dart.void, [dart.legacy(core.List$(dart.legacy(base_print.Page)))]),
    glucLine: dart.fnType(dart.dynamic, [dart.dynamic]),
    getPage: dart.fnType(dart.legacy(base_print.Page), [dart.legacy(json_data.DayData)]),
    carbsForIE: dart.fnType(dart.legacy(core.double), [dart.legacy(json_data.ReportData), dart.legacy(json_data.TreatmentData)]),
    [_getPage]: dart.fnType(dart.legacy(base_print.Page), [dart.legacy(json_data.DayData), dart.legacy(json_data.ReportData)]),
    showProfileSwitch: dart.fnType(dart.void, [dart.legacy(json_data.ReportData), dart.legacy(json_data.ProfileData), dart.legacy(json_data.ProfileData), dart.legacy(core.List), dart.legacy(core.double), dart.legacy(core.double)], [dart.legacy(core.double)]),
    getBasalGraph: dart.fnType(dart.dynamic, [dart.legacy(json_data.DayData), dart.legacy(core.bool), dart.legacy(core.bool), dart.legacy(core.double), dart.legacy(core.double)]),
    paintECarbs: dart.fnType(dart.void, [dart.legacy(core.double), dart.legacy(core.double), dart.legacy(core.double), dart.legacy(core.List)])
  }));
  dart.setGetterSignature(print_daily_graphic.PrintDailyGraphic, () => ({
    __proto__: dart.getGetters(print_daily_graphic.PrintDailyGraphic.__proto__),
    estimatePageCount: dart.dynamic,
    [_titleGraphic]: dart.legacy(core.String),
    title: dart.legacy(core.String),
    msgBolusSum: dart.legacy(core.String),
    msgBasalZero: dart.legacy(core.String),
    msgExercises: dart.legacy(core.String),
    msgBloody: dart.legacy(core.String)
  }));
  dart.setLibraryUri(print_daily_graphic.PrintDailyGraphic, L16);
  dart.setFieldSignature(print_daily_graphic.PrintDailyGraphic, () => ({
    __proto__: dart.getFields(print_daily_graphic.PrintDailyGraphic.__proto__),
    help: dart.fieldType(dart.legacy(core.String)),
    id: dart.fieldType(dart.legacy(core.String)),
    idx: dart.fieldType(dart.legacy(core.String)),
    showPictures: dart.fieldType(dart.legacy(core.bool)),
    showInsulin: dart.fieldType(dart.legacy(core.bool)),
    showCarbs: dart.fieldType(dart.legacy(core.bool)),
    showBasalDay: dart.fieldType(dart.legacy(core.bool)),
    showBasalProfile: dart.fieldType(dart.legacy(core.bool)),
    showLegend: dart.fieldType(dart.legacy(core.bool)),
    isPrecise: dart.fieldType(dart.legacy(core.bool)),
    showNotes: dart.fieldType(dart.legacy(core.bool)),
    showGlucTable: dart.fieldType(dart.legacy(core.bool)),
    showNoteLinesAtGluc: dart.fieldType(dart.legacy(core.bool)),
    sumNarrowValues: dart.fieldType(dart.legacy(core.bool)),
    splitBolus: dart.fieldType(dart.legacy(core.bool)),
    showExercises: dart.fieldType(dart.legacy(core.bool)),
    showCarbIE: dart.fieldType(dart.legacy(core.bool)),
    showCGP: dart.fieldType(dart.legacy(core.bool)),
    showProfileStart: dart.fieldType(dart.legacy(core.bool)),
    showHTMLNotes: dart.fieldType(dart.legacy(core.bool)),
    showZeroBasal: dart.fieldType(dart.legacy(core.bool)),
    showCOB: dart.fieldType(dart.legacy(core.bool)),
    showIOB: dart.fieldType(dart.legacy(core.bool)),
    roundToProfile: dart.fieldType(dart.legacy(core.bool)),
    spareBool1: dart.fieldType(dart.legacy(core.bool)),
    showTargetValue: dart.fieldType(dart.legacy(core.bool)),
    params: dart.fieldType(dart.legacy(core.List$(dart.legacy(base_print.ParamInfo)))),
    lineWidth: dart.fieldType(dart.legacy(core.num)),
    glucMax: dart.fieldType(dart.legacy(core.double)),
    profMax: dart.fieldType(dart.legacy(core.double)),
    carbMax: dart.fieldType(dart.legacy(core.double)),
    bolusMax: dart.fieldType(dart.legacy(core.double)),
    ieMax: dart.fieldType(dart.legacy(core.double)),
    graphBottom: dart.fieldType(dart.legacy(core.double)),
    glucTableHeight: dart.fieldType(dart.legacy(core.double)),
    glucTableTop: dart.fieldType(dart.legacy(core.double)),
    glucExerciseHeight: dart.fieldType(dart.legacy(core.double)),
    glucExerciseTop: dart.fieldType(dart.legacy(core.double)),
    collInsulin: dart.fieldType(dart.legacy(core.List$(dart.legacy(print_daily_graphic.CollectInfo)))),
    collCarbs: dart.fieldType(dart.legacy(core.List$(dart.legacy(print_daily_graphic.CollectInfo)))),
    hasExercises: dart.fieldType(dart.legacy(core.bool))
  }));
  dart.defineLazy(print_daily_graphic.PrintDailyGraphic, {
    /*print_daily_graphic.PrintDailyGraphic.graphWidth*/get graphWidth() {
      return null;
    },
    set graphWidth(_) {},
    /*print_daily_graphic.PrintDailyGraphic.notesTop*/get notesTop() {
      return 0.4;
    },
    set notesTop(_) {},
    /*print_daily_graphic.PrintDailyGraphic.notesHeight*/get notesHeight() {
      return 0.3;
    },
    set notesHeight(_) {},
    /*print_daily_graphic.PrintDailyGraphic.basalTop*/get basalTop() {
      return null;
    },
    set basalTop(_) {},
    /*print_daily_graphic.PrintDailyGraphic.basalHeight*/get basalHeight() {
      return 3.0;
    },
    set basalHeight(_) {},
    /*print_daily_graphic.PrintDailyGraphic.basalWidth*/get basalWidth() {
      return print_daily_graphic.PrintDailyGraphic.graphWidth;
    },
    set basalWidth(_) {}
  }, true);
  var _trigger$2 = dart.privateName(impressum_component, "_trigger");
  var g$5 = dart.privateName(impressum_component, "ImpressumComponent.g");
  impressum_component.ImpressumComponent = class ImpressumComponent extends core.Object {
    get g() {
      return this[g$5];
    }
    set g(value) {
      this[g$5] = value;
    }
    get trigger() {
      return this[_trigger$2].stream;
    }
    fire(type) {
      return async.async(dart.void, (function* fire() {
        this[_trigger$2].add(html.UIEvent.new(type, {detail: 0}));
      }).bind(this));
    }
  };
  (impressum_component.ImpressumComponent.new = function() {
    this[g$5] = globals.Globals.new();
    this[_trigger$2] = StreamControllerOfUIEventL().broadcast({sync: true});
    ;
  }).prototype = impressum_component.ImpressumComponent.prototype;
  dart.addTypeTests(impressum_component.ImpressumComponent);
  dart.addTypeCaches(impressum_component.ImpressumComponent);
  dart.setMethodSignature(impressum_component.ImpressumComponent, () => ({
    __proto__: dart.getMethods(impressum_component.ImpressumComponent.__proto__),
    fire: dart.fnType(dart.void, [dart.legacy(core.String)])
  }));
  dart.setGetterSignature(impressum_component.ImpressumComponent, () => ({
    __proto__: dart.getGetters(impressum_component.ImpressumComponent.__proto__),
    trigger: dart.legacy(async.Stream$(dart.legacy(html.UIEvent)))
  }));
  dart.setLibraryUri(impressum_component.ImpressumComponent, L17);
  dart.setFieldSignature(impressum_component.ImpressumComponent, () => ({
    __proto__: dart.getFields(impressum_component.ImpressumComponent.__proto__),
    g: dart.fieldType(dart.legacy(globals.Globals)),
    [_trigger$2]: dart.finalFieldType(dart.legacy(async.StreamController$(dart.legacy(html.UIEvent))))
  }));
  var showAllValues = dart.privateName(print_daily_gluc, "PrintDailyGluc.showAllValues");
  var showBolus$ = dart.privateName(print_daily_gluc, "PrintDailyGluc.showBolus");
  var help$4 = dart.privateName(print_daily_gluc, "PrintDailyGluc.help");
  var id$9 = dart.privateName(print_daily_gluc, "PrintDailyGluc.id");
  var idx$6 = dart.privateName(print_daily_gluc, "PrintDailyGluc.idx");
  var params$7 = dart.privateName(print_daily_gluc, "PrintDailyGluc.params");
  print_daily_gluc.PrintDailyGluc = class PrintDailyGluc extends base_print.BasePrint {
    get showAllValues() {
      return this[showAllValues];
    }
    set showAllValues(value) {
      this[showAllValues] = value;
    }
    get showBolus() {
      return this[showBolus$];
    }
    set showBolus(value) {
      this[showBolus$] = value;
    }
    get help() {
      return this[help$4];
    }
    set help(value) {
      this[help$4] = value;
    }
    get id() {
      return this[id$9];
    }
    set id(value) {
      this[id$9] = value;
    }
    get idx() {
      return this[idx$6];
    }
    set idx(value) {
      this[idx$6] = value;
    }
    get params() {
      return this[params$7];
    }
    set params(value) {
      this[params$7] = value;
    }
    get title() {
      return intl.Intl.message("Tagestrend");
    }
    set title(value) {
      super.title = value;
    }
    get isPortrait() {
      return true;
    }
    static get msgParam1() {
      return intl.Intl.message("Alle Werte für den Tag anzeigen");
    }
    static get msgParam2() {
      return intl.Intl.message("Bolusspalte anzeigen");
    }
    msgBasalInfo(time) {
      return intl.Intl.message("Die angezeigte Basalrate ist seit " + dart.str(time) + "  gültig und beinhaltet keine temporären Änderungen.", {args: JSArrayOfObjectL().of([time]), name: "msgBasalInfo", meaning: "The informational text on the page Daytrend for the basalrate"});
    }
    PrintDailyProfile() {
      this.init();
    }
    get footerText() {
      return this.footerTextDayTimes;
    }
    extractParams() {
      this.showAllValues = this.params[$_get](0).boolValue;
      this.showBolus = this.params[$_get](1).boolValue;
    }
    get backsuffix() {
      return dart.test(this.showAllValues) ? "" : "full";
    }
    get estimatePageCount() {
      let t31, t31$;
      let count = dart.notNull((t31$ = (t31 = this.g, t31 == null ? null : t31.period), t31$ == null ? null : t31$.dayCount)) * (dart.test(this.showAllValues) ? 3 : 1);
      return new (IdentityMapOfStringL$ObjectL()).from(["count", count, "isEstimated", false]);
    }
    fillPages(pages) {
      let data = this.repData.data;
      let oldLength = pages[$length];
      for (let day of data.days) {
        if (dart.test(this.repData.isForThumbs)) {
          let savSave = this.showAllValues;
          let sbSave = this.showBolus;
          this.showAllValues = false;
          this.showBolus = true;
          this.getPage(day, pages);
          pages[$removeRange](dart.notNull(oldLength) + 1, pages[$length]);
          this.showAllValues = true;
          this.showBolus = true;
          this.getPage(day, pages);
          this.showAllValues = savSave;
          this.showBolus = sbSave;
          if (dart.notNull(pages[$length]) - dart.notNull(oldLength) > 2) pages[$removeRange](dart.notNull(oldLength) + 2, pages[$length]);
        } else {
          this.getPage(day, pages);
          if (dart.test(this.g.showBothUnits)) {
            this.g.glucMGDLIdx = 1;
            this.getPage(day, pages);
            this.g.glucMGDLIdx = 2;
          }
        }
        if (dart.test(this.repData.isForThumbs)) break;
      }
    }
    getPage(day, pages) {
      let t31, t31$, t31$0;
      this.titleInfo = this.fmtDate(day.date, null, false, true);
      let tables = [];
      let space = 0.4;
      let count = dart.test(this.showAllValues) ? day.entries[$length] : 24;
      let columns = (dart.notNull(count) / 37)[$truncate]() + 1;
      columns = math.min(intL(), columns, 2);
      let wid = (dart.notNull(this.width) - 2 * dart.notNull(this.xframe)) / columns;
      wid = wid - space * (columns - 1) / columns;
      let fw = 3.5;
      let colCount = dart.test(this.showAllValues) ? 3 : 4;
      if (dart.test(this.showBolus)) colCount = colCount + 1;
      let sw = colCount / (1 - 1 / fw);
      let widths = columns === 1 ? JSArrayOfdoubleL().of([this.cm(wid / fw - 0.34), this.cm(wid / sw - 0.34), this.cm(wid / sw - 0.34), this.cm(wid / sw - 0.34), this.cm(wid / sw - 0.34)]) : JSArrayOfdoubleL().of([this.cm(wid / fw - 0.34), this.cm(wid / sw - 0.34), this.cm(wid / sw - 0.34), this.cm(wid / sw - 0.34)]);
      if (dart.test(this.showBolus)) widths[$add](this.cm(wid / sw - 0.34));
      let idx = 0;
      let lines = 0;
      let trendGluc = 0.0;
      if (day.prevDay != null) {
        let temp = EntryDataL().as(dart.dsend(dart.dload(day.prevDay, 'entries'), 'firstWhere', [dart.fn(e => dart.equals(dart.dload(dart.dload(e, 'time'), 'hour'), 23) && dart.equals(dart.dload(dart.dload(e, 'time'), 'minute'), 0), dynamicToboolL())], {orElse: null}));
        if (temp != null) trendGluc = temp.gluc;
      }
      let profile = this.repData.profile(new core.DateTime.new(day.date.year, day.date.month, day.date.day), null, false);
      if (profile.store.listBasal[$length] === 0) return null;
      let basalMax = 0.1;
      for (let entry of profile.store.listBasal)
        basalMax = math.max(doubleL(), entry.value, basalMax);
      for (let entry of day.entries) {
        if (idx >= dart.notNull(tables[$length])) {
          if (dart.test(this.showAllValues))
            tables[$add](JSArrayOfListLOfMapLOfStringL$dynamic().of([JSArrayOfMapLOfStringL$dynamic().of([new (IdentityMapOfStringL$StringL()).from(["text", this.msgTime, "style", "total", "alignment", "center"]), new (IdentityMapOfStringL$dynamic()).from(["text", dart.dsend(this.g.getGlucInfo(), '_get', ["unit"]), "style", "total", "alignment", "center"]), new (IdentityMapOfStringL$StringL()).from(["text", this.msgTrend, "style", "total", "alignment", "center"]), new (IdentityMapOfStringL$StringL()).from(["text", this.msgKHTitle, "style", "total", "alignment", "center"])])]));
          else
            tables[$add](JSArrayOfListLOfMapLOfStringL$dynamic().of([JSArrayOfMapLOfStringL$dynamic().of([new (IdentityMapOfStringL$StringL()).from(["text", this.msgTime, "style", "total", "alignment", "center"]), new (IdentityMapOfStringL$dynamic()).from(["text", dart.dsend(this.g.getGlucInfo(), '_get', ["unit"]), "style", "total", "alignment", "center"]), new (IdentityMapOfStringL$StringL()).from(["text", this.msgTrend, "style", "total", "alignment", "center"]), new (IdentityMapOfStringL$StringL()).from(["text", this.msgBasal, "style", "total", "alignment", "center"]), new (IdentityMapOfStringL$StringL()).from(["text", this.msgKHTitle, "style", "total", "alignment", "center"])])]));
          if (dart.test(this.showBolus)) dart.dsend(dart.dload(tables[$last], 'last'), 'add', [new (IdentityMapOfStringL$StringL()).from(["text", this.msgBolus, "style", "total", "alignment", "center"])]);
        }
        if (!dart.test(this.showAllValues) && entry.time.minute !== 0) continue;
        let startTime = this.g.timeForCalc(entry.time);
        let endTime = dart.notNull(this.g.timeForCalc(entry.time)) + (dart.test(this.showAllValues) ? 5 : 60) * 60;
        let bolusSum = 0.0;
        let carbs = 0.0;
        let list = day.treatments[$where](dart.fn(t => dart.notNull(t.carbs) >= 0 && dart.notNull(t.timeForCalc) >= dart.notNull(startTime) && dart.notNull(t.timeForCalc) < endTime, TreatmentDataLToboolL()));
        for (let t of list) {
          carbs = carbs + dart.notNull(t.carbs);
          bolusSum = dart.notNull(bolusSum) + dart.notNull((t31 = t.bolusInsulin, t31 == null ? 0 : t31));
        }
        if (bolusSum === 0) bolusSum = null;
        let text = dart.str(this.fmtTime(entry.time, {withUnit: columns < 3}));
        let trend = "";
        let trendColor = "";
        let gluc = dart.str(this.g.glucFromData(entry.gluc));
        if (entry.time.minute === 0 && dart.notNull(trendGluc) > 0) {
          let trendValue = (dart.notNull(entry.gluc) - dart.notNull(trendGluc)) / dart.notNull(trendGluc) * 100;
          trend = dart.str(this.g.fmtNumber(trendValue, 0)) + "%";
          if (dart.notNull(entry.gluc) >= 0) trendGluc = entry.gluc;
          if (trendValue[$abs]() >= 15)
            trendColor = this.colTrendCrit;
          else if (trendValue[$abs]() >= 10)
            trendColor = this.colTrendWarn;
          else
            trendColor = this.colTrendNorm;
        }
        if (dart.notNull(entry.gluc) <= 0) {
          gluc = "";
          trend = "";
          trendColor = "";
        }
        if (dart.test(this.showAllValues)) {
          dart.dsend(tables[$_get](idx), 'add', [JSArrayOfMapLOfStringL$StringL().of([new (IdentityMapOfStringL$StringL()).from(["text", text, "alignment", "center", "style", this.styleForTime(entry.time)]), new (IdentityMapOfStringL$StringL()).from(["text", gluc, "alignment", "center", "fillColor", this.colForGluc(day, entry.gluc)]), new (IdentityMapOfStringL$StringL()).from(["text", trend, "alignment", "right", "fillColor", trendColor]), new (IdentityMapOfStringL$StringL()).from(["text", carbs > 0 ? this.msgKH(carbs) : "", "alignment", "center"])])]);
        } else {
          let d = profile.store.listBasal[$lastWhere](dart.fn(e => e.time(day.date).isBefore(entry.time.add(new core.Duration.new({seconds: 1}))), ProfileEntryDataLToboolL()), {orElse: null});
          let basal = d == null ? "" : this.g.fmtBasal(d.value);
          let w = dart.notNull((t31$0 = (t31$ = d, t31$ == null ? null : t31$.value), t31$0 == null ? 0.0 : t31$0)) * (dart.notNull(widths[$_get](3)) + dart.notNull(this.cm(0.1))) / basalMax;
          dart.dsend(tables[$_get](idx), 'add', [JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$StringL()).from(["text", text, "alignment", "center", "style", this.styleForTime(entry.time)]), new (IdentityMapOfStringL$StringL()).from(["text", gluc, "alignment", "center", "fillColor", this.colForGluc(day, entry.gluc)]), new (IdentityMapOfStringL$StringL()).from(["text", trend, "alignment", "right", "fillColor", trendColor]), new (IdentityMapOfStringL$ListLOfMapLOfStringL$ObjectL()).from(["stack", JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(-0.05), "y", this.cm(0)]), "canvas", JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$ObjectL()).from(["type", "rect", "x", this.cm(0), "y", this.cm(0), "w", w, "h", this.cm(0.4), "color", this.colBasalDay])])]), new (IdentityMapOfStringL$StringL()).from(["text", basal, "alignment", "center"])])]), new (IdentityMapOfStringL$StringL()).from(["text", carbs > 0 ? this.msgKH(carbs) : "", "alignment", "center"])])]);
        }
        if (dart.test(this.showBolus)) {
          text = bolusSum == null ? null : dart.str(this.g.fmtNumber(bolusSum, 1)) + " " + dart.str(this.msgInsulinUnit);
          dart.dsend(dart.dload(tables[$_get](idx), 'last'), 'add', [new (IdentityMapOfStringL$StringL()).from(["text", text, "alignment", "center"])]);
        }
        lines = lines + 1;
        if (lines > 37) {
          lines = 0;
          idx = idx + 1;
        }
      }
      let ret = JSArrayOfObjectL().of([this.headerFooter()]);
      let x = this.xframe;
      let doAdd = false;
      idx = 0;
      let y = this.yorg;
      if (!dart.test(this.showAllValues)) {
        ret[$add](new (IdentityMapOfStringL$ObjectL()).from(["absolutePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(x), "y", this.cm(this.yorg)]), "columns", JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$ObjectL()).from(["width", this.cm(wid), "text", this.msgBasalInfo(this.fmtDateTime(profile.store.startDate)), "fontSize", this.fs(10.0)])])]));
        y = dart.notNull(y) + 1.5;
      }
      for (let table of tables) {
        ret[$add](new (IdentityMapOfStringL$ObjectL()).from(["absolutePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(x), "y", this.cm(y)]), "margin", JSArrayOfdoubleL().of([this.cm(0), this.cm(0), this.cm(0), this.cm(wid)]), "fontSize", this.fs(10.0), "table", new (IdentityMapOfStringL$dynamic()).from(["headerRows", 0, "widths", widths, "body", table])]));
        doAdd = true;
        idx = idx + 1;
        if (idx < columns) {
          x = dart.notNull(x) + (wid + space);
        } else {
          x = this.xframe;
          idx = 0;
          pages[$add](new base_print.Page.new(this.isPortrait, ret));
          ret = JSArrayOfObjectL().of([this.headerFooter()]);
          doAdd = false;
        }
      }
      if (doAdd) pages[$add](new base_print.Page.new(this.isPortrait, ret));
    }
  };
  (print_daily_gluc.PrintDailyGluc.new = function() {
    this[showAllValues] = null;
    this[showBolus$] = null;
    this[help$4] = intl.Intl.message("Dieses Formular zeigt den Trend der Glukosewerte über den Tag hinweg an. Dabei wird in der Spalte Trend immer\nangezeigt, um wieviel Prozent sich der Wert von einer vollen Stunde zur nächsten verändert hat. Dieser Trend\nist ganz hilfreich, wenn man bei einem Basalratentest erkennen will, wie sich der Glukosewert nur anhand der\nBasalrate entwickelt. Es kann auch eine Spalte für die Boluswerte und die Kohlenhydrate angezeigt werden.\nDiese sollten aber bei einem Basalratentest natürlich leer sein. Ebenso muss ein eventuell vorhandener Loop \nim Zeitraum des Tests abgeschaltet sein. Es geht dabei nur um den Diabetiker und seine Basalrate.\n\nEs wird auch eine Spalte mit der Basalrate angezeigt, wenn die Option \"Alle Werte für einen Tag anzeigen\"\nnicht markiert wurde. Wenn die Option markiert wurde, dann fehlt der Platz (und auch der Sinn), diese\ndarzustellen.", {desc: "help for daygluc"});
    this[id$9] = "daygluc";
    this[idx$6] = "12";
    this[params$7] = JSArrayOfParamInfoL().of([new base_print.ParamInfo.new(1, print_daily_gluc.PrintDailyGluc.msgParam1, {boolValue: false}), new base_print.ParamInfo.new(2, print_daily_gluc.PrintDailyGluc.msgParam2, {boolValue: false})]);
    print_daily_gluc.PrintDailyGluc.__proto__.new.call(this);
    ;
  }).prototype = print_daily_gluc.PrintDailyGluc.prototype;
  dart.addTypeTests(print_daily_gluc.PrintDailyGluc);
  dart.addTypeCaches(print_daily_gluc.PrintDailyGluc);
  dart.setMethodSignature(print_daily_gluc.PrintDailyGluc, () => ({
    __proto__: dart.getMethods(print_daily_gluc.PrintDailyGluc.__proto__),
    msgBasalInfo: dart.fnType(dart.legacy(core.String), [dart.legacy(core.String)]),
    PrintDailyProfile: dart.fnType(dart.dynamic, []),
    fillPages: dart.fnType(dart.void, [dart.legacy(core.List$(dart.legacy(base_print.Page)))]),
    getPage: dart.fnType(dart.void, [dart.legacy(json_data.DayData), dart.legacy(core.List$(dart.legacy(base_print.Page)))])
  }));
  dart.setGetterSignature(print_daily_gluc.PrintDailyGluc, () => ({
    __proto__: dart.getGetters(print_daily_gluc.PrintDailyGluc.__proto__),
    title: dart.legacy(core.String),
    estimatePageCount: dart.dynamic
  }));
  dart.setLibraryUri(print_daily_gluc.PrintDailyGluc, L18);
  dart.setFieldSignature(print_daily_gluc.PrintDailyGluc, () => ({
    __proto__: dart.getFields(print_daily_gluc.PrintDailyGluc.__proto__),
    showAllValues: dart.fieldType(dart.legacy(core.bool)),
    showBolus: dart.fieldType(dart.legacy(core.bool)),
    help: dart.fieldType(dart.legacy(core.String)),
    id: dart.fieldType(dart.legacy(core.String)),
    idx: dart.fieldType(dart.legacy(core.String)),
    params: dart.fieldType(dart.legacy(core.List$(dart.legacy(base_print.ParamInfo))))
  }));
  var _isPortrait$ = dart.privateName(print_daily_analysis, "_isPortrait");
  var _vertLines = dart.privateName(print_daily_analysis, "_vertLines");
  var _horzLines = dart.privateName(print_daily_analysis, "_horzLines");
  var _graphLines = dart.privateName(print_daily_analysis, "_graphLines");
  var _vertCvs = dart.privateName(print_daily_analysis, "_vertCvs");
  var _horzCvs = dart.privateName(print_daily_analysis, "_horzCvs");
  var _vertStack = dart.privateName(print_daily_analysis, "_vertStack");
  var _horzStack = dart.privateName(print_daily_analysis, "_horzStack");
  var _colWidth = dart.privateName(print_daily_analysis, "_colWidth");
  var _titleGraphic$ = dart.privateName(print_daily_analysis, "_titleGraphic");
  var help$5 = dart.privateName(print_daily_analysis, "PrintDailyAnalysis.help");
  var id$10 = dart.privateName(print_daily_analysis, "PrintDailyAnalysis.id");
  var idx$7 = dart.privateName(print_daily_analysis, "PrintDailyAnalysis.idx");
  var spareBool1$ = dart.privateName(print_daily_analysis, "PrintDailyAnalysis.spareBool1");
  var params$8 = dart.privateName(print_daily_analysis, "PrintDailyAnalysis.params");
  var lineWidth$0 = dart.privateName(print_daily_analysis, "PrintDailyAnalysis.lineWidth");
  var glucMax$0 = dart.privateName(print_daily_analysis, "PrintDailyAnalysis.glucMax");
  var profMax$ = dart.privateName(print_daily_analysis, "PrintDailyAnalysis.profMax");
  var carbMax$ = dart.privateName(print_daily_analysis, "PrintDailyAnalysis.carbMax");
  var bolusMax$ = dart.privateName(print_daily_analysis, "PrintDailyAnalysis.bolusMax");
  var ieMax$ = dart.privateName(print_daily_analysis, "PrintDailyAnalysis.ieMax");
  var graphHeight$ = dart.privateName(print_daily_analysis, "PrintDailyAnalysis.graphHeight");
  print_daily_analysis.PrintDailyAnalysis = class PrintDailyAnalysis extends base_daily.BaseDaily {
    get help() {
      return this[help$5];
    }
    set help(value) {
      this[help$5] = value;
    }
    get id() {
      return this[id$10];
    }
    set id(value) {
      this[id$10] = value;
    }
    get idx() {
      return this[idx$7];
    }
    set idx(value) {
      this[idx$7] = value;
    }
    get spareBool1() {
      return this[spareBool1$];
    }
    set spareBool1(value) {
      this[spareBool1$] = value;
    }
    get params() {
      return this[params$8];
    }
    set params(value) {
      this[params$8] = value;
    }
    get lineWidth() {
      return this[lineWidth$0];
    }
    set lineWidth(value) {
      this[lineWidth$0] = value;
    }
    get glucMax() {
      return this[glucMax$0];
    }
    set glucMax(value) {
      this[glucMax$0] = value;
    }
    get profMax() {
      return this[profMax$];
    }
    set profMax(value) {
      this[profMax$] = value;
    }
    get carbMax() {
      return this[carbMax$];
    }
    set carbMax(value) {
      this[carbMax$] = value;
    }
    get bolusMax() {
      return this[bolusMax$];
    }
    set bolusMax(value) {
      this[bolusMax$] = value;
    }
    get ieMax() {
      return this[ieMax$];
    }
    set ieMax(value) {
      this[ieMax$] = value;
    }
    get graphHeight() {
      return this[graphHeight$];
    }
    set graphHeight(value) {
      this[graphHeight$] = value;
    }
    extractParams() {
      this.spareBool1 = this.params[$_get](0).boolValue;
      this.showSMB = this.params[$_get](1).boolValue;
      this.showSMBAtGluc = this.params[$_get](1).subParams[$_get](0).boolValue;
      switch (this.params[$_get](2).intValue) {
        case 0:
        {
          this.isPortraitParam = true;
          break;
        }
        case 1:
        {
          this.isPortraitParam = false;
          break;
        }
      }
    }
    get isPortrait() {
      return this[_isPortrait$];
    }
    get estimatePageCount() {
      let t31, t31$, t31$0;
      return new (IdentityMapOfStringL$ObjectL()).from(["count", (t31$0 = (t31$ = (t31 = this.g, t31 == null ? null : t31.period), t31$ == null ? null : t31$.dayCount), t31$0 == null ? 0 : t31$0), "isEstimated", false]);
    }
    get backsuffix() {
      return dart.test(this.isPortraitParam) ? "" : "landscape";
    }
    get [_titleGraphic$]() {
      return intl.Intl.message("Tagesanalyse");
    }
    get title() {
      return this[_titleGraphic$];
    }
    set title(value) {
      super.title = value;
    }
    get imgList() {
      return JSArrayOfStringL().of(["nightscout", "katheter.print", "sensor.print", "ampulle.print"]);
    }
    glucX(time) {
      return this.calcX(print_daily_analysis.PrintDailyAnalysis.graphWidth, time);
    }
    glucY(value) {
      return this.calcY(this.graphHeight, this.glucMax, value);
    }
    carbY(value) {
      return dart.notNull(this.graphHeight) / dart.notNull(this.carbMax) * (dart.notNull(this.carbMax) - dart.notNull(value));
    }
    bolusY(value) {
      return dart.notNull(this.graphHeight) / 4 * dart.notNull(value) / dart.notNull(this.ieMax);
    }
    basalX(time) {
      return dart.notNull(print_daily_analysis.PrintDailyAnalysis.basalWidth) / 1440 * (dart.notNull(time.hour) * 60 + dart.notNull(time.minute));
    }
    basalY(value) {
      return this.profMax !== 0 && value != null ? dart.notNull(this.graphHeight) - dart.notNull(print_daily_analysis.PrintDailyAnalysis.basalHeight) / dart.notNull(this.profMax) * dart.notNull(value) : 0.0;
    }
    fillPages(pages) {
      return async.async(dart.void, (function* fillPages() {
        this[_isPortrait$] = this.isPortraitParam;
        let data = this.repData.data;
        print_daily_analysis.PrintDailyAnalysis.graphWidth = dart.notNull(this.width) - 6.7;
        print_daily_analysis.PrintDailyAnalysis.basalWidth = print_daily_analysis.PrintDailyAnalysis.graphWidth;
        this.graphHeight = (dart.notNull(this.height) - 7.0) / 5;
        this.lineWidth = this.cm(0.03);
        for (let i = 0; dart.notNull(i) < dart.notNull(data.days[$length]); i = dart.notNull(i) + 1) {
          let day = data.days[$_get](dart.test(this.g.ppLatestFirst) ? dart.notNull(data.days[$length]) - 1 - dart.notNull(i) : i);
          if (dart.test(day.entries[$isNotEmpty]) || dart.test(day.treatments[$isNotEmpty])) {
            pages[$add](this.getPage(day));
            if (dart.test(this.repData.isForThumbs)) i = data.days[$length];
          } else {
            pages[$add](this.getEmptyForm(this[_isPortrait$], this.repData.status.status));
          }
        }
        this.title = this[_titleGraphic$];
      }).bind(this));
    }
    glucLine(points) {
      return new (IdentityMapOfStringL$dynamic()).from(["type", "polyline", "lineWidth", this.cm(this.lw), "closePath", false, "lineColor", this.colValue, "points", points]);
    }
    graphArea(points, colLine, colFill) {
      return new (IdentityMapOfStringL$dynamic()).from(["type", "polyline", "lineWidth", this.cm(this.lw), "closePath", true, "color", colFill, "lineColor", colLine, "points", points]);
    }
    getPage(day) {
      let t31, t31$;
      this.title = this[_titleGraphic$];
      print_daily_analysis.PrintDailyAnalysis.basalHeight = this.graphHeight;
      let xo = this.xorg;
      let yo = this.yorg;
      this.titleInfo = this.fmtDate(day.date, null, false, true);
      this.glucMax = -1000.0;
      this.ieMax = 0.0;
      for (let entry of day.entries) {
        this.glucMax = math.max(doubleL(), entry.gluc, this.glucMax);
      }
      for (let entry of day.bloody) {
        this.glucMax = math.max(doubleL(), entry.mbg, this.glucMax);
      }
      for (let entry of day.treatments) {
        if (dart.test(entry.isBloody)) {
          this.glucMax = math.max(doubleL(), dart.notNull(this.g.glucFactor) * dart.notNull(entry.glucose), this.glucMax);
        }
        this.ieMax = math.max(doubleL(), entry.bolusInsulin, this.ieMax);
      }
      let glucScale = dart.test(this.g.glucMGDL) ? 50 : 18.02 * 1;
      let gridLines = (dart.notNull(this.glucMax) / glucScale)[$ceil]();
      let lineHeight = gridLines === 0 ? 0 : dart.notNull(this.graphHeight) / gridLines;
      this[_colWidth] = dart.notNull(print_daily_analysis.PrintDailyAnalysis.graphWidth) / 24;
      this[_vertLines] = new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(xo), "y", this.cm(yo)]), "canvas", []]);
      this[_horzLines] = new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(dart.notNull(xo) - 0.2), "y", this.cm(yo)]), "canvas", []]);
      this[_graphLines] = new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(xo), "y", this.cm(yo)]), "stack", []]);
      let frontLines = new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(xo), "y", this.cm(yo)]), "canvas", []]);
      let horzLegend = new (IdentityMapOfStringL$ListL()).from(["stack", []]);
      let vertLegend = new (IdentityMapOfStringL$ListL()).from(["stack", []]);
      let graphGluc = new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(xo), "y", this.cm(yo)]), "canvas", []]);
      let graphLegend = new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(xo), "y", this.cm(yo)]), "stack", []]);
      let graphCarbs = new (IdentityMapOfStringL$ListLOfMapLOfStringL$ObjectL()).from(["stack", JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(xo), "y", this.cm(yo)]), "canvas", []]), new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(xo), "y", this.cm(yo)]), "stack", []])])]);
      let graphInsulin = new (IdentityMapOfStringL$ListLOfMapLOfStringL$ObjectL()).from(["stack", JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(xo), "y", this.cm(yo)]), "canvas", []]), new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(xo), "y", this.cm(yo)]), "stack", []])])]);
      let pictures = new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(xo), "y", this.cm(yo)]), "stack", []]);
      this[_vertCvs] = ListL().as(dart.dsend(this[_vertLines], '_get', ["canvas"]));
      this[_horzCvs] = ListL().as(dart.dsend(this[_horzLines], '_get', ["canvas"]));
      this[_horzStack] = horzLegend[$_get]("stack");
      this[_vertStack] = vertLegend[$_get]("stack");
      let graphGlucCvs = ListL().as(graphGluc[$_get]("canvas"));
      for (let i = 0; i < 25; i = i + 1) {
        let line = new (IdentityMapOfStringL$ObjectL()).from(["type", "line", "x1", this.cm(i * dart.notNull(this[_colWidth])), "y1", this.cm(0), "x2", this.cm(i * dart.notNull(this[_colWidth])), "y2", this.cm(dart.notNull(this.graphHeight) * 5), "lineWidth", this.cm(this.lw), "lineColor", i === 0 || i === 24 ? this.lcFrame : this.lc]);
        if (i === 0 || i === 24) {
          ListL().as(frontLines[$_get]("canvas"))[$add](line);
        } else {
          this[_vertCvs][$add](line);
        }
        if (i < 24) {
          this[_horzStack][$add](new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(dart.notNull(xo) + i * dart.notNull(this[_colWidth])), "y", this.cm(dart.notNull(yo) + dart.notNull(this.graphHeight) * 5 + 0.05)]), "text", this.fmtTime(i, {withMinutes: false}), "fontSize", this.fs(7.0)]));
        }
      }
      if (lineHeight === 0) {
        return new base_print.Page.new(this.isPortrait, [this.headerFooter(), new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(xo), "y", this.cm(yo)]), "text", this.msgMissingData])]);
      }
      for (let i = 0; i <= gridLines; i = i + 1) {
        this[_horzCvs][$add](new (IdentityMapOfStringL$ObjectL()).from(["type", "line", "x1", this.cm(-0.2), "y1", this.cm((gridLines - i) * lineHeight - dart.notNull(this.lw) / 2), "x2", this.cm(24 * dart.notNull(this[_colWidth]) + 0.2), "y2", this.cm((gridLines - i) * lineHeight - dart.notNull(this.lw) / 2), "lineWidth", this.cm(this.lw), "lineColor", this.lc]));
        if (i > 0) {
          let text = dart.str(this.g.glucFromData(this.g.fmtNumber(i * glucScale, 0)));
          this[_vertStack][$add](new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(dart.notNull(xo) - 1.1), "y", this.cm(dart.notNull(yo) + (gridLines - i) * lineHeight - 0.25)]), "text", text, "fontSize", this.fs(8.0)]));
          this[_vertStack][$add](new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(dart.notNull(xo) + 24 * dart.notNull(this[_colWidth]) + 0.3), "y", this.cm(dart.notNull(yo) + (gridLines - i) * lineHeight - 0.25)]), "text", text, "fontSize", this.fs(8.0)]));
        } else {
          let text = dart.str(dart.dsend(this.g.getGlucInfo(), '_get', ["unit"]));
          this[_vertStack][$add](new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(dart.notNull(xo) - 1.5), "y", this.cm(dart.notNull(yo) + (gridLines - i) * lineHeight - 0.25)]), "columns", JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$ObjectL()).from(["width", this.cm(1.2), "text", text, "fontSize", this.fs(8.0), "alignment", "right"])])]));
          this[_vertStack][$add](new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(dart.notNull(xo) + 24 * dart.notNull(this[_colWidth]) + 0.3), "y", this.cm(dart.notNull(yo) + (gridLines - i) * lineHeight - 0.25)]), "text", text, "fontSize", this.fs(8.0)]));
        }
      }
      this.glucMax = gridLines * glucScale;
      for (let entry of day.bloody) {
        let x = this.glucX(entry.time);
        let y = this.glucY(entry.mbg);
        graphGlucCvs[$add](new (IdentityMapOfStringL$ObjectL()).from(["type", "rect", "x", this.cm(x), "y", this.cm(y), "w", this.cm(0.1), "h", this.cm(0.1), "color", this.colBloodValues]));
      }
      for (let t of day.treatments) {
        if (dart.test(t.isBloody)) {
          let x = this.glucX(t.createdAt);
          let y = this.glucY(dart.notNull(this.g.glucFactor) * dart.notNull(t.glucose));
          graphGlucCvs[$add](new (IdentityMapOfStringL$ObjectL()).from(["type", "rect", "x", this.cm(x), "y", this.cm(y), "w", this.cm(0.1), "h", this.cm(0.1), "color", this.colBloodValues]));
        }
      }
      let points = [];
      let last = null;
      for (let entry of day.entries) {
        let x = this.glucX(entry.time);
        let y = this.glucY(entry.gluc);
        if (dart.notNull(entry.gluc) < 0) {
          if (last != null && dart.notNull(last.gluc) >= 0) {
            graphGlucCvs[$add](this.glucLine(points));
            points = [];
          }
        } else {
          dart.dsend(points, 'add', [new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(x), "y", this.cm(y)])]);
        }
        last = entry;
      }
      graphGlucCvs[$add](this.glucLine(points));
      for (let t of day.treatments) {
        let x = null;
        let y = null;
        if (dart.test(this.showSMB) && dart.test(t.isSMB) && dart.notNull(t.insulin) > 0) {
          let entry = EntryDataL().as(day.findNearest(day.entries, null, t.createdAt));
          x = this.glucX(t.createdAt);
          if (entry != null && dart.test(this.showSMBAtGluc)) {
            y = this.glucY(entry.gluc);
          } else {
            y = dart.notNull(this.glucY(this.repData.targetValue(t.createdAt))) + dart.notNull(this.lw) / 2;
          }
          this.paintSMB(t.insulin, x, y, ListL().as(graphInsulin[$_get]("stack")[$_get](0)[$_get]("canvas")));
        }
      }
      let date = new core.DateTime.new(day.date.year, day.date.month, day.date.day);
      let profile = this.repData.profile(date);
      let yHigh = this.glucY(math.min(doubleL(), this.glucMax, this.repData.status.settings.thresholds.bgTargetTop[$toDouble]()));
      let yLow = this.glucY(this.repData.status.settings.thresholds.bgTargetBottom[$toDouble]());
      let targetValues = [];
      let lastTarget = -1.0;
      for (let i = 0; i < dart.notNull(profile.store.listTargetLow[$length]); i = i + 1) {
        let low = dart.notNull(profile.store.listTargetLow[$_get](i).value) * dart.notNull(this.g.glucFactor);
        let high = dart.notNull(profile.store.listTargetHigh[$_get](i).value) * dart.notNull(this.g.glucFactor);
        let x = this.glucX(profile.store.listTargetLow[$_get](i).time(day.date));
        let y = this.glucY((low + high) / 2);
        if (dart.notNull(lastTarget) >= 0) targetValues[$add](new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(x), "y", this.cm(lastTarget)]));
        targetValues[$add](new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(x), "y", this.cm(y)]));
        lastTarget = y;
      }
      targetValues[$add](new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(this.glucX(new core.DateTime.new(0, 1, 1, 23, 59, 59, 999))), "y", this.cm(lastTarget)]));
      let limitLines = new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(xo), "y", this.cm(yo)]), "canvas", JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$ObjectL()).from(["type", "rect", "x", this.cm(0.0), "y", this.cm(yHigh), "w", this.cm(24 * dart.notNull(this[_colWidth])), "h", this.cm(dart.notNull(yLow) - dart.notNull(yHigh)), "color", this.colTargetArea, "fillOpacity", 0.3]), new (IdentityMapOfStringL$ObjectL()).from(["type", "line", "x1", this.cm(0.0), "y1", this.cm(yHigh), "x2", this.cm(24 * dart.notNull(this[_colWidth])), "y2", this.cm(yHigh), "lineWidth", this.cm(this.lw), "lineColor", this.colTargetArea]), new (IdentityMapOfStringL$ObjectL()).from(["type", "polyline", "lineWidth", this.cm(this.lw), "closePath", false, "lineColor", this.colTargetValue, "points", targetValues]), new (IdentityMapOfStringL$ObjectL()).from(["type", "line", "x1", this.cm(0.0), "y1", this.cm(yLow), "x2", this.cm(24 * dart.notNull(this[_colWidth])), "y2", this.cm(yLow), "lineWidth", this.cm(this.lw), "lineColor", this.colTargetArea]), new (IdentityMapOfStringL$ObjectL()).from(["type", "rect", "x", 0, "y", 0, "w", 0, "h", 0, "color", "#000", "fillOpacity", 1])])]);
      this.profMax = -1000.0;
      for (let entry of day.basalData.store.listBasal) {
        this.profMax = math.max(doubleL(), dart.notNull((t31 = entry.value, t31 == null ? 0.0 : t31)) + 0.2, this.profMax);
      }
      print_daily_analysis.PrintDailyAnalysis.basalHeight = doubleL().as(this.drawScaleIE(xo, yo, this.graphHeight, this.graphHeight, 0.0, this.profMax, this[_colWidth], this[_horzCvs], this[_vertStack], JSArrayOfStepDataL().of([StepDataL().as(this.S(3.0, 0.5)), StepDataL().as(this.S(1.5, 0.2)), StepDataL().as(this.S(0.0, 0.1))]), dart.fn((i, step, opts) => {
        let t31;
        let value = opts && 'value' in opts ? opts.value : null;
        return dart.str(this.g.fmtNumber(numL().as((t31 = value, t31 == null ? dart.dsend(i, '*', [step]) : t31)), 1)) + " " + dart.str(this.msgInsulinUnit);
      }, dynamicAnddynamic__ToStringL())));
      let profileBasal = this.getBasalGraph(this.graphHeight, day, true, xo, yo);
      this.profMax = -1000.0;
      for (let entry of day.profile)
        this.profMax = math.max(doubleL(), (t31$ = entry.tempAdjusted, t31$ == null ? 0.0 : t31$), this.profMax);
      this.profMax = dart.notNull(this.profMax) * 100.0;
      let step = dart.notNull(this.profMax) + 100 > 300 ? 50 : dart.notNull(this.profMax) + 100 > 150 ? 20 : 10;
      gridLines = ((dart.notNull(this.profMax) + 100) / step + 1)[$floor]();
      lineHeight = gridLines === 0 ? 0 : dart.notNull(this.graphHeight) / gridLines;
      let top = dart.notNull(this.graphHeight) * 3 - (gridLines - 1) * lineHeight;
      print_daily_analysis.PrintDailyAnalysis.basalHeight = dart.notNull(this.graphHeight) * 3 - top - 100 / step * lineHeight;
      top = top - dart.notNull(this.lw) * 3;
      for (let i = 1; i < gridLines; i = i + 1) {
        let y = 3 * dart.notNull(this.graphHeight) - i * lineHeight - dart.notNull(this.lw) / 2 - dart.notNull(this.lw) * 3;
        this[_horzCvs][$add](new (IdentityMapOfStringL$ObjectL()).from(["type", "line", "x1", this.cm(0), "y1", this.cm(y), "x2", this.cm(24 * dart.notNull(this[_colWidth]) + 0.2), "y2", this.cm(y), "lineWidth", this.cm(this.lw), "lineColor", i > 0 ? this.lc : this.lcFrame]));
        let text = dart.str(this.g.fmtNumber(-100 + i * step)) + " %";
        this[_vertStack][$add](new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(dart.notNull(xo) - 1.0), "y", this.cm(dart.notNull(yo) + y - 0.15)]), "text", text, "fontSize", this.fs(8.0)]));
        this[_vertStack][$add](new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(dart.notNull(xo) + dart.notNull(this[_colWidth]) * 24 + 0.3), "y", this.cm(dart.notNull(yo) + y - 0.15)]), "text", text, "fontSize", this.fs(8.0)]));
      }
      let dayBasal = this.getBasalGraph(top, day, false, xo, yo);
      let pts = this.getIobCob(xo, yo, print_daily_analysis.PrintDailyAnalysis.graphWidth, this.graphHeight, this[_horzCvs], this[_vertStack], day);
      let graphIob = new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(xo), "y", this.cm(dart.notNull(yo) + 3 * dart.notNull(this.graphHeight) + dart.notNull(this.graphHeight) - dart.notNull(core.num.as(dart.dsend(pts, '_get', ["iobHeight"]))))]), "canvas", []]);
      let graphCob = new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(xo), "y", this.cm(dart.notNull(yo) + 4 * dart.notNull(this.graphHeight) + dart.notNull(this.graphHeight) - dart.notNull(core.num.as(dart.dsend(pts, '_get', ["cobHeight"]))))]), "canvas", []]);
      let graphIobCvs = ListL().as(graphIob[$_get]("canvas"));
      let graphCobCvs = ListL().as(graphCob[$_get]("canvas"));
      graphIobCvs[$add](this.graphArea(dart.dsend(pts, '_get', ["iob"]), this.colIOBLine, this.colIOBFill));
      graphCobCvs[$add](this.graphArea(dart.dsend(pts, '_get', ["cob"]), this.colCOBLine, this.colCOBFill));
      for (let i = 1; i < 6; i = i + 1) {
        ListL().as(frontLines[$_get]("canvas"))[$add](new (IdentityMapOfStringL$ObjectL()).from(["type", "line", "x1", this.cm(-0.2), "y1", this.cm(dart.notNull(this.graphHeight) * i - dart.notNull(this.lw) / 2), "x2", this.cm(24 * dart.notNull(this[_colWidth]) + 0.2), "y2", this.cm(dart.notNull(this.graphHeight) * i - dart.notNull(this.lw) / 2), "lineWidth", this.cm(this.lw), "lineColor", this.lcFrame]));
      }
      return new base_print.Page.new(this.isPortrait, [this.headerFooter(), dayBasal, profileBasal, graphIob, graphCob, horzLegend, this[_horzLines], vertLegend, this[_vertLines], this[_graphLines], frontLines, limitLines, pictures, graphGluc, graphInsulin, graphCarbs, graphLegend]);
    }
    getBasalGraph(top, day, useProfile, xo, yo) {
      let data = null;
      let color = null;
      if (dart.test(useProfile)) {
        data = day.basalData.store.listBasal;
        color = this.colBasalProfile;
      } else {
        data = day.profile;
        color = this.colBasalProfile;
      }
      let basalCvs = [];
      let ret = new (IdentityMapOfStringL$ListLOfMapLOfStringL$ObjectL()).from(["stack", JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(xo), "y", this.cm(dart.notNull(yo) + dart.notNull(top))]), "canvas", basalCvs])])]);
      let lastY = null;
      let areaPoints = [];
      let area = new (IdentityMapOfStringL$ObjectL()).from(["type", "polyline", "lineWidth", this.cm(this.lw), "closePath", true, "color", this.blendColor(color, "#ffffff", 0.7), "points", areaPoints]);
      let temp = JSArrayOfProfileEntryDataL().of([]);
      for (let entry of data) {
        temp[$add](entry);
      }
      if (dart.test(useProfile)) {
        temp[$sort](dart.fn((a, b) => a.time(day.date, useProfile).compareTo(b.time(day.date, useProfile)), ProfileEntryDataLAndProfileEntryDataLTointL()));
        if (temp[$_get](0).timeAsSeconds !== -dart.notNull(temp[$_get](0).localDiff) * 60 * 60) {
          let clone = temp[$_get](0).clone(new core.DateTime.new(0, 1, 1, -dart.notNull(temp[$_get](0).localDiff), 0));
          temp[$insert](0, clone);
        }
      }
      areaPoints[$add](new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(this.basalX(new core.DateTime.new(0, 1, 1, 0, 0))), "y", this.cm(dart.test(useProfile) ? this.basalY(0.0) : print_daily_analysis.PrintDailyAnalysis.basalHeight)]));
      for (let entry of temp) {
        let x = this.basalX(entry.time(day.date, useProfile));
        let y = dart.test(useProfile) ? this.basalY(entry.value) : dart.notNull(print_daily_analysis.PrintDailyAnalysis.basalHeight) / dart.notNull(this.profMax) * (dart.notNull(this.profMax) - dart.notNull(entry.tempAdjusted) * 100);
        if (lastY != null) {
          areaPoints[$add](new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(x), "y", this.cm(lastY)]));
        }
        areaPoints[$add](new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(x), "y", this.cm(y)]));
        lastY = y;
      }
      if (lastY != null) {
        areaPoints[$add](new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(this.basalX(new core.DateTime.new(0, 1, 1, 23, 59))), "y", this.cm(lastY)]));
      }
      areaPoints[$add](new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(this.basalX(new core.DateTime.new(0, 1, 1, 23, 59))), "y", this.cm(dart.test(useProfile) ? this.basalY(0.0) : print_daily_analysis.PrintDailyAnalysis.basalHeight)]));
      basalCvs[$add](area);
      dart.dsend(dart.dsend(this[_graphLines], '_get', ["stack"]), 'add', [new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(0), "y", this.cm(top)]), "canvas", JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$ObjectL()).from(["type", "polyline", "lineWidth", this.cm(this.lw), "closePath", true, "lineColor", color, "points", areaPoints])])])]);
      return ret;
    }
  };
  (print_daily_analysis.PrintDailyAnalysis.new = function() {
    this[help$5] = intl.Intl.message("Dieses Formular zeigt eine Übersicht für einen Tag. Hier \n  werden die Tagesgrafik, die Basalrate, die Basalratenanpassungen, Insulin On \n  Board und Carbs On Board angezeigt.", {desc: "help for dailyanalysis"});
    this[id$10] = "dayanalysis";
    this[idx$7] = "06";
    this[spareBool1$] = null;
    this[_isPortrait$] = true;
    this[params$8] = JSArrayOfParamInfoL().of([new base_print.ParamInfo.new(0, "", {boolValue: false, isDeprecated: true}), new base_print.ParamInfo.new(1, base_daily.BaseDaily.msgDaily1, {boolValue: true, subParams: JSArrayOfParamInfoL().of([new base_print.ParamInfo.new(0, base_daily.BaseDaily.msgDaily2, {boolValue: true, isLoopValue: true})]), isLoopValue: true}), new base_print.ParamInfo.new(2, base_print.BasePrint.msgOrientation, {list: JSArrayOfStringL().of([intl.Intl.message("Hochformat"), intl.Intl.message("Querformat")])})]);
    this[lineWidth$0] = null;
    this[glucMax$0] = 0.0;
    this[profMax$] = 0.0;
    this[carbMax$] = 200.0;
    this[bolusMax$] = 50.0;
    this[ieMax$] = 0.0;
    this[graphHeight$] = null;
    this[_vertLines] = null;
    this[_horzLines] = null;
    this[_graphLines] = null;
    this[_vertCvs] = null;
    this[_horzCvs] = null;
    this[_vertStack] = null;
    this[_horzStack] = null;
    this[_colWidth] = null;
    print_daily_analysis.PrintDailyAnalysis.__proto__.new.call(this);
    this.init();
  }).prototype = print_daily_analysis.PrintDailyAnalysis.prototype;
  dart.addTypeTests(print_daily_analysis.PrintDailyAnalysis);
  dart.addTypeCaches(print_daily_analysis.PrintDailyAnalysis);
  dart.setMethodSignature(print_daily_analysis.PrintDailyAnalysis, () => ({
    __proto__: dart.getMethods(print_daily_analysis.PrintDailyAnalysis.__proto__),
    glucX: dart.fnType(dart.legacy(core.double), [dart.legacy(core.DateTime)]),
    glucY: dart.fnType(dart.legacy(core.double), [dart.legacy(core.double)]),
    carbY: dart.fnType(dart.legacy(core.double), [dart.legacy(core.double)]),
    bolusY: dart.fnType(dart.legacy(core.double), [dart.legacy(core.double)]),
    basalX: dart.fnType(dart.legacy(core.double), [dart.legacy(core.DateTime)]),
    basalY: dart.fnType(dart.legacy(core.double), [dart.legacy(core.double)]),
    fillPages: dart.fnType(dart.void, [dart.legacy(core.List$(dart.legacy(base_print.Page)))]),
    glucLine: dart.fnType(dart.dynamic, [dart.dynamic]),
    graphArea: dart.fnType(dart.dynamic, [dart.dynamic, dart.legacy(core.String), dart.legacy(core.String)]),
    getPage: dart.fnType(dart.legacy(base_print.Page), [dart.legacy(json_data.DayData)]),
    getBasalGraph: dart.fnType(dart.dynamic, [dart.legacy(core.double), dart.legacy(json_data.DayData), dart.legacy(core.bool), dart.legacy(core.double), dart.legacy(core.double)])
  }));
  dart.setGetterSignature(print_daily_analysis.PrintDailyAnalysis, () => ({
    __proto__: dart.getGetters(print_daily_analysis.PrintDailyAnalysis.__proto__),
    estimatePageCount: dart.dynamic,
    [_titleGraphic$]: dart.legacy(core.String),
    title: dart.legacy(core.String)
  }));
  dart.setLibraryUri(print_daily_analysis.PrintDailyAnalysis, L19);
  dart.setFieldSignature(print_daily_analysis.PrintDailyAnalysis, () => ({
    __proto__: dart.getFields(print_daily_analysis.PrintDailyAnalysis.__proto__),
    help: dart.fieldType(dart.legacy(core.String)),
    id: dart.fieldType(dart.legacy(core.String)),
    idx: dart.fieldType(dart.legacy(core.String)),
    spareBool1: dart.fieldType(dart.legacy(core.bool)),
    [_isPortrait$]: dart.fieldType(dart.legacy(core.bool)),
    params: dart.fieldType(dart.legacy(core.List$(dart.legacy(base_print.ParamInfo)))),
    lineWidth: dart.fieldType(dart.legacy(core.num)),
    glucMax: dart.fieldType(dart.legacy(core.double)),
    profMax: dart.fieldType(dart.legacy(core.double)),
    carbMax: dart.fieldType(dart.legacy(core.double)),
    bolusMax: dart.fieldType(dart.legacy(core.double)),
    ieMax: dart.fieldType(dart.legacy(core.double)),
    graphHeight: dart.fieldType(dart.legacy(core.double)),
    [_vertLines]: dart.fieldType(dart.dynamic),
    [_horzLines]: dart.fieldType(dart.dynamic),
    [_graphLines]: dart.fieldType(dart.dynamic),
    [_vertCvs]: dart.fieldType(dart.legacy(core.List)),
    [_horzCvs]: dart.fieldType(dart.legacy(core.List)),
    [_vertStack]: dart.fieldType(dart.legacy(core.List)),
    [_horzStack]: dart.fieldType(dart.legacy(core.List)),
    [_colWidth]: dart.fieldType(dart.legacy(core.double))
  }));
  dart.defineLazy(print_daily_analysis.PrintDailyAnalysis, {
    /*print_daily_analysis.PrintDailyAnalysis.graphWidth*/get graphWidth() {
      return null;
    },
    set graphWidth(_) {},
    /*print_daily_analysis.PrintDailyAnalysis.notesTop*/get notesTop() {
      return 0.4;
    },
    set notesTop(_) {},
    /*print_daily_analysis.PrintDailyAnalysis.notesHeight*/get notesHeight() {
      return 0.3;
    },
    set notesHeight(_) {},
    /*print_daily_analysis.PrintDailyAnalysis.basalHeight*/get basalHeight() {
      return null;
    },
    set basalHeight(_) {},
    /*print_daily_analysis.PrintDailyAnalysis.basalWidth*/get basalWidth() {
      return print_daily_analysis.PrintDailyAnalysis.graphWidth;
    },
    set basalWidth(_) {}
  }, true);
  var _trigger$3 = dart.privateName(welcome_component, "_trigger");
  var g$6 = dart.privateName(welcome_component, "WelcomeComponent.g");
  welcome_component.WelcomeComponent = class WelcomeComponent extends core.Object {
    get g() {
      return this[g$6];
    }
    set g(value) {
      this[g$6] = value;
    }
    get trigger() {
      return this[_trigger$3].stream;
    }
    fire(key) {
      this[_trigger$3].add(html.UIEvent.new(key, {detail: 0}));
    }
    clickDebug() {
      this.g.isDebug = !dart.test(this.g.isDebug);
      this.g.msg.dismiss(dart.bind(this.g.msg, 'clear'));
    }
    signinEvent(e) {
      switch (e.status) {
        case C15 || CT.C15:
        {
          this.g.loadSettings();
          this.fire("@normal");
          break;
        }
        default:
        {
          break;
        }
      }
    }
  };
  (welcome_component.WelcomeComponent.new = function() {
    this[g$6] = globals.Globals.new();
    this[_trigger$3] = StreamControllerOfUIEventL().broadcast({sync: true});
    ;
  }).prototype = welcome_component.WelcomeComponent.prototype;
  dart.addTypeTests(welcome_component.WelcomeComponent);
  dart.addTypeCaches(welcome_component.WelcomeComponent);
  dart.setMethodSignature(welcome_component.WelcomeComponent, () => ({
    __proto__: dart.getMethods(welcome_component.WelcomeComponent.__proto__),
    fire: dart.fnType(dart.void, [dart.legacy(core.String)]),
    clickDebug: dart.fnType(dart.void, []),
    signinEvent: dart.fnType(dart.void, [dart.legacy(signin_component.SigninEvent)])
  }));
  dart.setGetterSignature(welcome_component.WelcomeComponent, () => ({
    __proto__: dart.getGetters(welcome_component.WelcomeComponent.__proto__),
    trigger: dart.legacy(async.Stream$(dart.legacy(html.UIEvent)))
  }));
  dart.setLibraryUri(welcome_component.WelcomeComponent, L20);
  dart.setFieldSignature(welcome_component.WelcomeComponent, () => ({
    __proto__: dart.getFields(welcome_component.WelcomeComponent.__proto__),
    g: dart.fieldType(dart.legacy(globals.Globals)),
    [_trigger$3]: dart.finalFieldType(dart.legacy(async.StreamController$(dart.legacy(html.UIEvent))))
  }));
  var hasKatheter = dart.privateName(print_daily_log, "Flags.hasKatheter");
  var hasSensor = dart.privateName(print_daily_log, "Flags.hasSensor");
  var hasAmpulle = dart.privateName(print_daily_log, "Flags.hasAmpulle");
  var hasBattery = dart.privateName(print_daily_log, "Flags.hasBattery");
  print_daily_log.Flags = class Flags extends core.Object {
    get hasKatheter() {
      return this[hasKatheter];
    }
    set hasKatheter(value) {
      this[hasKatheter] = value;
    }
    get hasSensor() {
      return this[hasSensor];
    }
    set hasSensor(value) {
      this[hasSensor] = value;
    }
    get hasAmpulle() {
      return this[hasAmpulle];
    }
    set hasAmpulle(value) {
      this[hasAmpulle] = value;
    }
    get hasBattery() {
      return this[hasBattery];
    }
    set hasBattery(value) {
      this[hasBattery] = value;
    }
  };
  (print_daily_log.Flags.new = function() {
    this[hasKatheter] = false;
    this[hasSensor] = false;
    this[hasAmpulle] = false;
    this[hasBattery] = false;
    ;
  }).prototype = print_daily_log.Flags.prototype;
  dart.addTypeTests(print_daily_log.Flags);
  dart.addTypeCaches(print_daily_log.Flags);
  dart.setLibraryUri(print_daily_log.Flags, L21);
  dart.setFieldSignature(print_daily_log.Flags, () => ({
    __proto__: dart.getFields(print_daily_log.Flags.__proto__),
    hasKatheter: dart.fieldType(dart.legacy(core.bool)),
    hasSensor: dart.fieldType(dart.legacy(core.bool)),
    hasAmpulle: dart.fieldType(dart.legacy(core.bool)),
    hasBattery: dart.fieldType(dart.legacy(core.bool))
  }));
  var _isFirstLine = dart.privateName(print_daily_log, "_isFirstLine");
  var _hasData = dart.privateName(print_daily_log, "_hasData");
  var _body$ = dart.privateName(print_daily_log, "_body");
  var _page$ = dart.privateName(print_daily_log, "_page");
  var _y = dart.privateName(print_daily_log, "_y");
  var _bloodValue = dart.privateName(print_daily_log, "_bloodValue");
  var _lineHeight = dart.privateName(print_daily_log, "_lineHeight");
  var _cellSpace = dart.privateName(print_daily_log, "_cellSpace");
  var _maxY = dart.privateName(print_daily_log, "_maxY");
  var help$6 = dart.privateName(print_daily_log, "PrintDailyLog.help");
  var id$11 = dart.privateName(print_daily_log, "PrintDailyLog.id");
  var idx$8 = dart.privateName(print_daily_log, "PrintDailyLog.idx");
  var showNotes$ = dart.privateName(print_daily_log, "PrintDailyLog.showNotes");
  var showCarbs$0 = dart.privateName(print_daily_log, "PrintDailyLog.showCarbs");
  var showIE = dart.privateName(print_daily_log, "PrintDailyLog.showIE");
  var showSMB$ = dart.privateName(print_daily_log, "PrintDailyLog.showSMB");
  var showTempBasal = dart.privateName(print_daily_log, "PrintDailyLog.showTempBasal");
  var showProfileSwitch = dart.privateName(print_daily_log, "PrintDailyLog.showProfileSwitch");
  var showIESource = dart.privateName(print_daily_log, "PrintDailyLog.showIESource");
  var showTempTargets = dart.privateName(print_daily_log, "PrintDailyLog.showTempTargets");
  var showGluc = dart.privateName(print_daily_log, "PrintDailyLog.showGluc");
  var showChanges = dart.privateName(print_daily_log, "PrintDailyLog.showChanges");
  var showChangesColumn = dart.privateName(print_daily_log, "PrintDailyLog.showChangesColumn");
  var showCalibration = dart.privateName(print_daily_log, "PrintDailyLog.showCalibration");
  var showProfileSwitchDetails = dart.privateName(print_daily_log, "PrintDailyLog.showProfileSwitchDetails");
  var showTempDigit = dart.privateName(print_daily_log, "PrintDailyLog.showTempDigit");
  var showDupes = dart.privateName(print_daily_log, "PrintDailyLog.showDupes");
  var showOnlyDupes = dart.privateName(print_daily_log, "PrintDailyLog.showOnlyDupes");
  var showTempOverrides = dart.privateName(print_daily_log, "PrintDailyLog.showTempOverrides");
  var groupMinutes = dart.privateName(print_daily_log, "PrintDailyLog.groupMinutes");
  var params$9 = dart.privateName(print_daily_log, "PrintDailyLog.params");
  var lineWidth$1 = dart.privateName(print_daily_log, "PrintDailyLog.lineWidth");
  var tableHeadFilled$ = dart.privateName(print_daily_log, "PrintDailyLog.tableHeadFilled");
  var tableHeadLine$ = dart.privateName(print_daily_log, "PrintDailyLog.tableHeadLine");
  var tableWidths$ = dart.privateName(print_daily_log, "PrintDailyLog.tableWidths");
  print_daily_log.PrintDailyLog = class PrintDailyLog extends base_profile.BaseProfile {
    get help() {
      return this[help$6];
    }
    set help(value) {
      this[help$6] = value;
    }
    get id() {
      return this[id$11];
    }
    set id(value) {
      this[id$11] = value;
    }
    get idx() {
      return this[idx$8];
    }
    set idx(value) {
      this[idx$8] = value;
    }
    get showNotes() {
      return this[showNotes$];
    }
    set showNotes(value) {
      this[showNotes$] = value;
    }
    get showCarbs() {
      return this[showCarbs$0];
    }
    set showCarbs(value) {
      this[showCarbs$0] = value;
    }
    get showIE() {
      return this[showIE];
    }
    set showIE(value) {
      this[showIE] = value;
    }
    get showSMB() {
      return this[showSMB$];
    }
    set showSMB(value) {
      this[showSMB$] = value;
    }
    get showTempBasal() {
      return this[showTempBasal];
    }
    set showTempBasal(value) {
      this[showTempBasal] = value;
    }
    get showProfileSwitch() {
      return this[showProfileSwitch];
    }
    set showProfileSwitch(value) {
      this[showProfileSwitch] = value;
    }
    get showIESource() {
      return this[showIESource];
    }
    set showIESource(value) {
      this[showIESource] = value;
    }
    get showTempTargets() {
      return this[showTempTargets];
    }
    set showTempTargets(value) {
      this[showTempTargets] = value;
    }
    get showGluc() {
      return this[showGluc];
    }
    set showGluc(value) {
      this[showGluc] = value;
    }
    get showChanges() {
      return this[showChanges];
    }
    set showChanges(value) {
      this[showChanges] = value;
    }
    get showChangesColumn() {
      return this[showChangesColumn];
    }
    set showChangesColumn(value) {
      this[showChangesColumn] = value;
    }
    get showCalibration() {
      return this[showCalibration];
    }
    set showCalibration(value) {
      this[showCalibration] = value;
    }
    get showProfileSwitchDetails() {
      return this[showProfileSwitchDetails];
    }
    set showProfileSwitchDetails(value) {
      this[showProfileSwitchDetails] = value;
    }
    get showTempDigit() {
      return this[showTempDigit];
    }
    set showTempDigit(value) {
      this[showTempDigit] = value;
    }
    get showDupes() {
      return this[showDupes];
    }
    set showDupes(value) {
      this[showDupes] = value;
    }
    get showOnlyDupes() {
      return this[showOnlyDupes];
    }
    set showOnlyDupes(value) {
      this[showOnlyDupes] = value;
    }
    get showTempOverrides() {
      return this[showTempOverrides];
    }
    set showTempOverrides(value) {
      this[showTempOverrides] = value;
    }
    get groupMinutes() {
      return this[groupMinutes];
    }
    set groupMinutes(value) {
      this[groupMinutes] = value;
    }
    get params() {
      return this[params$9];
    }
    set params(value) {
      this[params$9] = value;
    }
    get lineWidth() {
      return this[lineWidth$1];
    }
    set lineWidth(value) {
      this[lineWidth$1] = value;
    }
    get tableHeadFilled() {
      return this[tableHeadFilled$];
    }
    set tableHeadFilled(value) {
      this[tableHeadFilled$] = value;
    }
    get tableHeadLine() {
      return this[tableHeadLine$];
    }
    set tableHeadLine(value) {
      this[tableHeadLine$] = value;
    }
    get tableWidths() {
      return this[tableWidths$];
    }
    set tableWidths(value) {
      this[tableWidths$] = value;
    }
    get isBetaOrLocal() {
      return false;
    }
    extractParams() {
      this.showNotes = this.params[$_get](0).boolValue;
      this.showCarbs = this.params[$_get](1).boolValue;
      this.showIE = this.params[$_get](2).boolValue;
      this.showIESource = this.params[$_get](2).subParams[$_get](0).boolValue;
      this.showTempBasal = this.params[$_get](3).boolValue;
      this.showTempDigit = this.params[$_get](3).subParams[$_get](0).boolValue;
      this.showSMB = this.params[$_get](4).boolValue;
      this.showProfileSwitch = this.params[$_get](5).boolValue;
      this.showProfileSwitchDetails = this.params[$_get](5).subParams[$_get](0).boolValue;
      this.showTempTargets = this.params[$_get](6).boolValue;
      switch (this.params[$_get](7).intValue) {
        case 1:
        {
          this.groupMinutes = 1;
          break;
        }
        case 2:
        {
          this.groupMinutes = 5;
          break;
        }
        case 3:
        {
          this.groupMinutes = 15;
          break;
        }
        case 4:
        {
          this.groupMinutes = 30;
          break;
        }
        case 5:
        {
          this.groupMinutes = 60;
          break;
        }
        default:
        {
          this.groupMinutes = 0;
          break;
        }
      }
      this.showGluc = this.params[$_get](8).boolValue;
      this.showChanges = this.params[$_get](9).boolValue;
      this.showChangesColumn = this.params[$_get](9).subParams[$_get](0).boolValue;
      this.showCalibration = this.params[$_get](10).boolValue;
      this.showDupes = this.params[$_get](11).boolValue;
      this.showOnlyDupes = this.params[$_get](11).subParams[$_get](0).boolValue;
      this.showTempOverrides = this.params[$_get](12).boolValue;
    }
    get estimatePageCount() {
      return new (IdentityMapOfStringL$ObjectL()).from(["count", 0, "isEstimated", true]);
    }
    get title() {
      return intl.Intl.message("Protokoll");
    }
    set title(value) {
      super.title = value;
    }
    static get msgParam1() {
      return intl.Intl.message("Notizen");
    }
    static get msgParam2() {
      return intl.Intl.message("Kohlenhydrate");
    }
    static get msgParam3() {
      return intl.Intl.message("Insulin");
    }
    static get msgParam4() {
      return intl.Intl.message("Temporäre Basalraten");
    }
    static get msgParam5() {
      return intl.Intl.message("SMB");
    }
    static get msgParam6() {
      return intl.Intl.message("Profilwechsel");
    }
    static get msgParam7() {
      return intl.Intl.message("Insulin-Quelle");
    }
    static get msgParam8() {
      return intl.Intl.message("Temporäre Ziele");
    }
    static get msgParam9() {
      return intl.Intl.message("Gruppierung der Zeiten");
    }
    static get msgParam10() {
      return intl.Intl.message("Glukosewert");
    }
    static get msgParam11() {
      return intl.Intl.message("Wechsel (Katheter etc.)");
    }
    static get msgParam12() {
      return intl.Intl.message("Zusätzliche Spalte anzeigen");
    }
    static get msgParam13() {
      return intl.Intl.message("Kalibrierung und blutige Messungen");
    }
    static get msgParam14() {
      return intl.Intl.message("Details des Profilwechsels");
    }
    static get msgParam15() {
      return intl.Intl.message("Dauer mit Minutenbruchteil");
    }
    static get msgParam16() {
      return intl.Intl.message("Mehrfache Datensätze kennzeichnen");
    }
    static get msgParam17() {
      return intl.Intl.message("Nur mehrfache Datensätze anzeigen");
    }
    static get msgParam18() {
      return intl.Intl.message("Temporäre Overrides");
    }
    static get msgMultipleNotFound() {
      return intl.Intl.message("Es gibt keine mehrfachen Datensätze.");
    }
    get imgList() {
      return JSArrayOfStringL().of(["nightscout", "katheter.print", "sensor.print", "ampulle.print", "battery.print"]);
    }
    get isPortrait() {
      return true;
    }
    get footerText() {
      return this.footerTextDayTimes;
    }
    fillPages(pages) {
      return async.async(dart.void, (function* fillPages() {
        this.fillPagesInternal(pages);
        if (dart.test(this.g.showBothUnits)) {
          this.g.glucMGDLIdx = 1;
          this.fillPagesInternal(pages);
          this.g.glucMGDLIdx = 2;
        }
      }).bind(this));
    }
    fillPagesInternal(pages) {
      let data = this.repData.data;
      this.titleInfo = this.titleInfoBegEnd();
      this.lineWidth = this.cm(0.03);
      this[_y] = dart.notNull(this.yorg) - 0.3;
      this[_body$] = [];
      this[_page$] = [];
      this.tableWidths = [];
      this[_hasData] = false;
      let oldLength = pages[$length];
      for (let i = 0; dart.notNull(i) < dart.notNull(data.days[$length]); i = dart.notNull(i) + 1) {
        let day = data.days[$_get](i);
        this.fillTable(day, pages);
        if (dart.test(this.repData.isForThumbs)) i = data.days[$length];
      }
      if (dart.test(this[_hasData])) {
        this[_page$][$add](this.headerFooter());
        this[_page$][$add](this.getTable(this.tableWidths, this[_body$]));
        pages[$add](new base_print.Page.new(this.isPortrait, this[_page$]));
      } else {
        this[_page$][$add](this.headerFooter());
        if (dart.test(this.showDupes) && dart.test(this.showOnlyDupes)) {
          this[_page$][$add](new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(2.2), "y", this.cm(this.yorg)]), "text", print_daily_log.PrintDailyLog.msgMultipleNotFound]));
        }
        pages[$add](new base_print.Page.new(this.isPortrait, this[_page$]));
      }
      if (dart.test(this.repData.isForThumbs) && dart.notNull(pages[$length]) - dart.notNull(oldLength) > 1) pages[$removeRange](dart.notNull(oldLength) + 1, pages[$length]);
    }
    lineHeight(lineCount) {
      return 2 * dart.notNull(this[_cellSpace]) + dart.notNull(lineCount) * (dart.notNull(this[_lineHeight]) + dart.notNull(this[_cellSpace]));
    }
    fillTable(day, pages) {
      this[_maxY] = dart.notNull(this.height) - 2.8;
      this.tableHeadFilled = false;
      this.tableHeadLine = [];
      this[_isFirstLine] = true;
      let nextTime = new core.DateTime.new(day.date.year, day.date.month, day.date.day, 0, this.groupMinutes);
      let list = JSArrayOfStringL().of([]);
      let flags = new print_daily_log.Flags.new();
      let treatments = JSArrayOfTreatmentDataL().of([]);
      for (let t of day.treatments) {
        treatments[$add](t);
      }
      for (let e of day.bloody) {
        let t = new json_data.TreatmentData.new();
        t.createdAt = e.time;
        t.eventType = "nr-" + dart.str(e.type);
        t.glucoseType = "finger";
        t.glucose = e.bloodGluc;
        t.notes = this.msgMBG(this.g.glucFromData(e.bloodGluc), dart.dsend(this.g.getGlucInfo(), '_get', ["unit"]));
        treatments[$add](t);
      }
      for (let e of day.entries) {
        if (e.type === "cal") {
          let t = new json_data.TreatmentData.new();
          t.createdAt = e.time;
          t.eventType = "nr-" + dart.str(e.type);
          t.notes = dart.str(base_print.BasePrint.msgCalibration(this.g.fmtNumber(e.scale, 2), this.g.fmtNumber(e.intercept, 0), this.g.fmtNumber(e.slope, 2)));
          treatments[$add](t);
        }
      }
      treatments[$sort](dart.fn((t1, t2) => t1.createdAt.compareTo(t2.createdAt), TreatmentDataLAndTreatmentDataLTointL()));
      for (let i = 0; i < dart.notNull(treatments[$length]); i = i + 1) {
        let t = treatments[$_get](i);
        let row = [];
        let wasAdded = false;
        if (this.groupMinutes === 0 || dart.test(t.createdAt.isBefore(nextTime))) {
          wasAdded = true;
          this.fillList(this.groupMinutes !== 0, this.repData, day, t, list, flags);
        }
        if (this.groupMinutes === 0 || !dart.test(t.createdAt.isBefore(nextTime))) {
          let time = t.createdAt;
          if (this.groupMinutes !== 0) time = nextTime.add(new core.Duration.new({minutes: -dart.notNull(this.groupMinutes)}));
          while (dart.test(list[$isNotEmpty])) {
            this[_hasData] = true;
            if (dart.test(this[_isFirstLine])) {
              this[_body$][$add](this.tableHeadLine);
              this[_y] = dart.notNull(this[_y]) + dart.notNull(this.lineHeight(1));
              this[_isFirstLine] = false;
            }
            list = this.fillRow(time, this.repData, day, row, EntryDataL().as(day.findNearest(day.entries, null, time)), list, flags, "row");
            row = [];
            if (dart.test(list[$isNotEmpty]) || dart.notNull(this[_y]) + dart.notNull(this[_lineHeight]) >= dart.notNull(this[_maxY])) {
              this[_page$][$add](this.headerFooter());
              this[_page$][$add](this.getTable(this.tableWidths, this[_body$]));
              pages[$add](new base_print.Page.new(this.isPortrait, this[_page$]));
              this[_page$] = [];
              this[_body$] = [this.tableHeadLine];
              this[_y] = dart.notNull(this.yorg) - 0.3 + dart.notNull(this.lineHeight(2));
              this[_isFirstLine] = false;
            } else {
              flags = new print_daily_log.Flags.new();
            }
          }
          nextTime = nextTime.add(new core.Duration.new({minutes: this.groupMinutes}));
        }
        if (!wasAdded) i = i - 1;
      }
    }
    fillRow(time, src, day, row, glucEntry, list, flags, style) {
      let t31;
      if (dart.test(list[$isNotEmpty])) {
        let oldY = this[_y];
        let size = this.fs(10.0);
        let text = list[$_get](0);
        for (let i = 1; i < dart.notNull(list[$length]); i = i + 1) {
          let line = list[$_get](i);
          if (text[$endsWith]("]")) {
            text = dart.str(text) + " " + dart.str(line);
          } else if (text[$endsWith]("@")) {
            text = dart.str(text[$substring](0, text.length - 1)) + " " + dart.str(line);
          } else {
            text = dart.str(text) + ", " + dart.str(line);
          }
        }
        let lines = text[$split]("\n");
        let y = this[_y];
        let idx = 0;
        if (dart.notNull(lines[$length]) > 1) {
          y = dart.notNull(y) + 2 * dart.notNull(this[_cellSpace]);
        }
        let output = JSArrayOfStringL().of([]);
        let wid = dart.notNull(this.width) - 1.8 - 5.1;
        if (dart.test(this.showGluc)) wid = wid - 1.6;
        if (dart.test(this.showChanges) && dart.test(this.showChangesColumn)) wid = wid - 1.7;
        let charsPerLine = (wid / 0.165)[$truncate]();
        while (idx < dart.notNull(lines[$length]) && dart.notNull(y) + dart.notNull(this[_lineHeight]) * ((lines[$_get](idx).length / charsPerLine)[$truncate]() + 1) < dart.notNull(this[_maxY])) {
          y = dart.notNull(y) + dart.notNull(this[_lineHeight]) * ((lines[$_get](idx).length / charsPerLine)[$truncate]() + 1);
          output[$add](this.getText(y, dart.str(lines[$_get](idx))));
          idx = idx + 1;
        }
        this[_y] = y;
        text = output[$join]("\n");
        if (text !== "") {
          this[_y] = dart.notNull(this[_y]) + 2 * dart.notNull(this[_cellSpace]);
          this.addRow(true, this.cm(1.8), row, new (IdentityMapOfStringL$ObjectL()).from(["text", this.msgTime, "style", "total", "fontSize", size, "alignment", "center"]), new (IdentityMapOfStringL$ObjectL()).from(["text", this.fmtTime(time), "style", this.styleForTime(time), "fontSize", size, "alignment", "center"]));
          if (dart.test(this.showGluc)) {
            let gluc = (t31 = glucEntry, t31 == null ? null : t31.gluc);
            if (this[_bloodValue] == null) {
              this.addRow(true, this.cm(1.3), row, new (IdentityMapOfStringL$dynamic()).from(["text", dart.dsend(this.g.getGlucInfo(), '_get', ["unit"]), "style", "total", "fontSize", size, "alignment", "center"]), new (IdentityMapOfStringL$ObjectL()).from(["text", this.g.glucFromData(gluc), "style", style, "fontSize", size, "alignment", "center", "fillColor", this.colForGluc(day, gluc)]));
            } else {
              this.addRow(true, this.cm(1.3), row, new (IdentityMapOfStringL$dynamic()).from(["text", dart.dsend(this.g.getGlucInfo(), '_get', ["unit"]), "style", "total", "fontSize", size, "alignment", "center"]), new (IdentityMapOfStringL$ObjectL()).from(["stack", JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$ObjectL()).from(["text", this.g.glucFromData(gluc), "style", style, "fontSize", size, "alignment", "center"]), new (IdentityMapOfStringL$ObjectL()).from(["text", this.g.glucFromData(this[_bloodValue]), "style", style, "fontSize", size, "alignment", "center", "color", this.colBloodValues])]), "fillColor", this.colForGluc(day, gluc)]));
              this[_y] = dart.notNull(this[_y]) + dart.notNull(this[_lineHeight]);
            }
          }
          if (dart.test(this.showChanges) && dart.test(this.showChangesColumn)) {
            let stack = [];
            let x = -0.5;
            if (dart.test(flags.hasKatheter)) {
              dart.dsend(stack, 'add', [new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(x = x + 0.5), "y", this.cm(0.1)]), "image", "katheter.print", "width", this.cm(0.4)])]);
            }
            if (dart.test(flags.hasSensor)) {
              dart.dsend(stack, 'add', [new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(x = x + 0.5), "y", this.cm(0)]), "image", "sensor.print", "width", this.cm(0.4)])]);
            }
            if (dart.test(flags.hasAmpulle)) {
              dart.dsend(stack, 'add', [new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(x = x + 0.5), "y", this.cm(0.1)]), "image", "ampulle.print", "width", this.cm(0.4)])]);
            }
            if (dart.test(flags.hasBattery)) {
              dart.dsend(stack, 'add', [new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(x = x + 0.5), "y", this.cm(0.1)]), "image", "battery.print", "width", this.cm(0.4)])]);
            }
            this.addRow(true, this.cm(1.4), row, new (IdentityMapOfStringL$ObjectL()).from(["text", base_print.BasePrint.msgChange, "style", "total", "fontSize", size, "alignment", "center"]), new (IdentityMapOfStringL$dynamic()).from(["stack", stack]));
          }
          this.addRow(true, this.cm(wid), row, new (IdentityMapOfStringL$ObjectL()).from(["text", this.getText(oldY, dart.str(this.fmtDate(time, null, false, true))), "style", "total", "fontSize", size, "alignment", "left"]), new (IdentityMapOfStringL$ObjectL()).from(["text", text, "style", style, "fontSize", size, "alignment", "left"]));
          this[_body$][$add](row);
          this.tableHeadFilled = true;
        }
        lines[$removeRange](0, idx);
        if (dart.test(lines[$isNotEmpty]) && lines[$_get](0) !== "") {
          list = lines[$join]("\n")[$split](", ");
        } else {
          list = JSArrayOfStringL().of([]);
        }
      }
      this[_bloodValue] = null;
      return list;
    }
    getText(y, text) {
      return text;
    }
    basalFor(day, time) {
      let ret = null;
      for (let i = 0; i < dart.notNull(day.profile[$length]); i = i + 1) {
        ret = day.profile[$_get](i);
        let check = ret.time(day.date, true);
        if (check.hour == time.hour && time.minute == check.minute && time.second == check.second || dart.test(check.isBefore(time)) && dart.test(time.add(new core.Duration.new({seconds: ret.duration})).isBefore(check))) return ret;
      }
      return null;
    }
    msgLogTempTarget(target, duration, reason) {
      return intl.Intl.message("temp. Ziel " + dart.str(target) + " für " + dart.str(duration) + " min, Grund: " + dart.str(reason), {args: JSArrayOfObjectL().of([target, duration, reason]), name: "msgLogTempTarget"});
    }
    get msgLogTempTargetReset() {
      return intl.Intl.message("Aufhebung von temp. Ziel");
    }
    msgLogTempBasal(percent, duration) {
      return intl.Intl.message("temp. Basal " + dart.str(percent) + "% / " + dart.str(duration) + " min", {args: JSArrayOfObjectL().of([percent, duration]), name: "msgLogTempBasal"});
    }
    msgLogTempBasalAbsolute(value, duration) {
      return intl.Intl.message("temp. Basal " + dart.str(value) + " / " + dart.str(duration) + " min", {args: JSArrayOfObjectL().of([value, duration]), name: "msgLogTempBasalAbsolute"});
    }
    msgLogSMB(insulin, unit) {
      return intl.Intl.message("SMB " + dart.str(insulin) + " " + dart.str(unit), {args: JSArrayOfObjectL().of([insulin, unit]), name: "msgLogSMB"});
    }
    msgLogMicroBolus(insulin, unit) {
      return intl.Intl.message("Microbolus " + dart.str(insulin) + " " + dart.str(unit), {args: JSArrayOfObjectL().of([insulin, unit]), name: "msgLogMicroBolus"});
    }
    get msgChangeSite() {
      return intl.Intl.message("Katheterwechsel");
    }
    get msgChangeSensor() {
      return intl.Intl.message("Sensorwechsel");
    }
    get msgChangeInsulin() {
      return intl.Intl.message("Ampullenwechsel");
    }
    get msgChangeBattery() {
      return intl.Intl.message("Batteriewechsel");
    }
    msgMBG(gluc, unit) {
      return intl.Intl.message("Blutige Messung " + dart.str(gluc) + " " + dart.str(unit), {args: JSArrayOfObjectL().of([gluc, unit]), name: "msgMBG"});
    }
    msgLogOverride(range, duration, reason, scale) {
      return intl.Intl.message("temp. Override für " + dart.str(duration) + " min, Grund: " + dart.str(reason) + ", Zielbereich: " + dart.str(range) + ", Anpassung: " + dart.str(scale) + "%", {args: JSArrayOfObjectL().of([range, duration, reason, scale]), name: "msgLogOverride"});
    }
    fillList(showTime, src, day, t, list, flags) {
      let lastIdx = list[$length];
      if (dart.test(this.showDupes) && dart.test(this.showOnlyDupes) && dart.notNull(t.duplicates) < 2) return;
      let type = t.eventType[$toLowerCase]();
      if (dart.test(this.showNotes) && t.notes != null && t.notes[$isNotEmpty] && !type[$startsWith]("nr-")) {
        list[$add](dart.str(t.notes[$replaceAll]("<br>", "\n")));
      }
      if (dart.test(this.showCarbs) && t.carbs != null && t.carbs !== 0) list[$add](dart.str(this.msgCarbs(dart.toString(t.carbs))));
      if (dart.test(this.showIE) && t.insulin != null && t.insulin !== 0 && !dart.test(t.isSMB)) {
        if (dart.test(this.showIESource)) {
          let text = t.eventType;
          if (dart.test(t.isMealBolus)) {
            text = this.msgMealBolus;
          } else if (dart.test(t.isBolusWizard)) {
            text = this.msgBolusWizard;
          } else {
            if (dart.test(t.insulinInjections[$isNotEmpty])) {
              text = null;
              for (let entry of t.insulinInjections) {
                list[$add](dart.str(entry.insulin) + " " + dart.str(entry.units) + " " + dart.str(this.msgInsulinUnit));
              }
            } else if (dart.test(t.hasNoType)) {
              text = this.msgInsulin;
            }
          }
          if (text != null) list[$add](dart.str(text) + " " + dart.str(t.insulin) + " " + dart.str(this.msgInsulinUnit));
        } else {
          list[$add](dart.str(t.insulin) + " " + dart.str(this.msgInsulinUnit));
        }
      }
      if (dart.test(this.showSMB)) {
        if (t.insulin != null && t.insulin !== 0 && dart.test(t.isSMB)) {
          list[$add](this.msgLogSMB(t.insulin, this.msgInsulinUnit));
        } else if (t.microbolus != null && dart.notNull(t.microbolus) > 0) {
          list[$add](this.msgLogMicroBolus(this.g.fmtNumber(t.microbolus, this.g.basalPrecision), this.msgInsulinUnit));
        }
      }
      if (dart.test(this.showTempBasal) && dart.test(t.isTempBasal)) {
        let entry = this.basalFor(day, t.createdAt);
        if (entry != null && dart.notNull(entry.tempAdjusted) > 0) {
          list[$add](this.msgLogTempBasal(this.g.fmtNumber(dart.notNull(entry.tempAdjusted) * 100, 0, 0, "null", false, true), this.g.fmtNumber(dart.notNull(entry.duration) / 60, dart.test(this.showTempDigit) ? 1 : 0)));
        } else {
          entry = json_data.ProfileEntryData.fromTreatment(null, t);
          if (entry != null) {
            list[$add](this.msgLogTempBasalAbsolute(this.g.fmtNumber(t.absoluteTempBasal, this.g.basalPrecision, 0, "0", false), this.g.fmtNumber(dart.notNull(t.duration) / 60, dart.test(this.showTempDigit) ? 1 : 0)));
          }
        }
      }
      if (dart.test(this.showProfileSwitch) && dart.test(t.isProfileSwitch)) {
        list[$add](this.getProfileSwitch(src, day, t, this.showProfileSwitchDetails));
      }
      if (dart.test(this.showTempTargets) && dart.test(t.isTempTarget)) {
        let target = null;
        if (t.targetBottom == t.targetTop) {
          target = dart.str(this.g.glucFromStatusMGDL(t.targetBottom)) + " " + dart.str(dart.dsend(this.g.getGlucInfo(), '_get', ["unit"]));
        } else {
          target = dart.str(this.g.glucFromStatusMGDL(t.targetBottom)) + " - " + dart.str(this.g.glucFromStatusMGDL(t.targetTop)) + " " + dart.str(dart.dsend(this.g.getGlucInfo(), '_get', ["unit"]));
        }
        if (t.duration === 0 && t.targetBottom === 0) {
          list[$add](this.msgLogTempTargetReset);
        } else {
          list[$add](this.msgLogTempTarget(target, dart.notNull(t.duration) / 60, t.reason));
        }
      }
      if (dart.test(this.showChanges)) {
        if (dart.test(t.isSiteChange)) {
          list[$add](this.msgChangeSite);
          flags.hasKatheter = true;
        }
        if (dart.test(t.isSensorChange)) {
          list[$add](this.msgChangeSensor);
          flags.hasSensor = true;
        }
        if (dart.test(t.isInsulinChange)) {
          list[$add](this.msgChangeInsulin);
          flags.hasAmpulle = true;
        }
        if (dart.test(t.isPumpBatteryChange)) {
          list[$add](this.msgChangeBattery);
          flags.hasBattery = true;
        }
      }
      if (type[$startsWith]("nr-")) {
        if (dart.test(this.showCalibration)) {
          if (type === "nr-cal" || type === "nr-mbg") list[$add](dart.str(t.notes));
        }
      }
      if (dart.test(t.isBloody)) this[_bloodValue] = t.glucose;
      if (dart.test(this.showTempOverrides) && type === "temporary override") {
        list[$add](this.msgLogOverride(json_data.JsonData.toText(dart.dsend(t.raw, '_get', ["correctionRange"])), dart.notNull(t.duration) / 60, t.reason, dart.notNull(json_data.JsonData.toDouble(dart.dsend(t.raw, '_get', ["insulinNeedsScaleFactor"]))) * 100));
      }
      if (list[$length] != lastIdx) {
        if (dart.test(this.showDupes) && dart.notNull(t.duplicates) > 1) list[$insert](lastIdx, dart.str(t.duplicates) + " x @");
        if (list[$length] != lastIdx && dart.test(showTime) && dart.notNull(this.groupMinutes) > 1) {
          let time = "[" + dart.str(this.fmtTime(t.createdAt)) + "]";
          if (dart.notNull(lastIdx) < 2 || list[$_get](dart.notNull(lastIdx) - 2) !== time) list[$insert](lastIdx, time);
        }
      }
    }
    addRow(check, width, dst, head, content) {
      if (!dart.test(check)) return;
      if (!dart.test(this.tableHeadFilled)) {
        dart.dsend(this.tableHeadLine, 'add', [head]);
        dart.dsend(this.tableWidths, 'add', [width]);
      }
      dart.dsend(dst, 'add', [content]);
    }
    getTable(widths, body, fontsize = null) {
      let ret = new (IdentityMapOfStringL$ObjectL()).from(["columns", JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$ObjectL()).from(["margin", JSArrayOfdoubleL().of([this.cm(2.2), this.cmy(dart.notNull(this.yorg) - 0.3), this.cm(2.2), this.cmy(0.0)]), "width", this.cm(this.width), "table", new (IdentityMapOfStringL$dynamic()).from(["widths", widths, "body", body])])]), "pageBreak", ""]);
      return ret;
    }
    getPage(page, profile, calc) {
      return null;
    }
  };
  (print_daily_log.PrintDailyLog.new = function() {
    this[help$6] = intl.Intl.message("Dieses Formular zeigt die Daten in tabellarischer Form an. Es kann abhängig von den\nausgewählten Optionen sehr viele Seiten umfassen. Es ist vor allem dafür sinnvoll, um bestimmte Daten aufzufinden.\nZum Beispiel kann man damit ermitteln, wann Katheterwechsel vorgenommen wurden, wieviele Datensätze als doppelt \nerkannt wurden oder wo Notizen erfasst wurden.\n", {desc: "help for daylog"});
    this[id$11] = "daylog";
    this[idx$8] = "07";
    this[showNotes$] = null;
    this[showCarbs$0] = null;
    this[showIE] = null;
    this[showSMB$] = null;
    this[showTempBasal] = null;
    this[showProfileSwitch] = null;
    this[showIESource] = null;
    this[showTempTargets] = null;
    this[showGluc] = null;
    this[showChanges] = null;
    this[showChangesColumn] = null;
    this[showCalibration] = null;
    this[showProfileSwitchDetails] = null;
    this[showTempDigit] = null;
    this[showDupes] = null;
    this[showOnlyDupes] = null;
    this[showTempOverrides] = null;
    this[groupMinutes] = 0;
    this[params$9] = JSArrayOfParamInfoL().of([new base_print.ParamInfo.new(2, print_daily_log.PrintDailyLog.msgParam1, {boolValue: true}), new base_print.ParamInfo.new(3, print_daily_log.PrintDailyLog.msgParam2, {boolValue: true}), new base_print.ParamInfo.new(4, print_daily_log.PrintDailyLog.msgParam3, {boolValue: true, subParams: JSArrayOfParamInfoL().of([new base_print.ParamInfo.new(0, print_daily_log.PrintDailyLog.msgParam7, {boolValue: true})])}), new base_print.ParamInfo.new(11, print_daily_log.PrintDailyLog.msgParam4, {boolValue: true, isLoopValue: true, subParams: JSArrayOfParamInfoL().of([new base_print.ParamInfo.new(0, print_daily_log.PrintDailyLog.msgParam15, {boolValue: false, isLoopValue: true})])}), new base_print.ParamInfo.new(10, print_daily_log.PrintDailyLog.msgParam5, {boolValue: true, isLoopValue: true}), new base_print.ParamInfo.new(5, print_daily_log.PrintDailyLog.msgParam6, {boolValue: true, subParams: JSArrayOfParamInfoL().of([new base_print.ParamInfo.new(0, print_daily_log.PrintDailyLog.msgParam14, {boolValue: true})])}), new base_print.ParamInfo.new(8, print_daily_log.PrintDailyLog.msgParam8, {boolValue: true, isLoopValue: true}), new base_print.ParamInfo.new(0, print_daily_log.PrintDailyLog.msgParam9, {list: JSArrayOfStringL().of([intl.Intl.message("Keine"), intl.Intl.message("1 Minute"), intl.Intl.message("5 Minuten"), intl.Intl.message("15 Minuten"), intl.Intl.message("30 Minuten"), intl.Intl.message("1 Stunde")])}), new base_print.ParamInfo.new(1, print_daily_log.PrintDailyLog.msgParam10, {boolValue: true}), new base_print.ParamInfo.new(6, print_daily_log.PrintDailyLog.msgParam11, {boolValue: true, subParams: JSArrayOfParamInfoL().of([new base_print.ParamInfo.new(0, print_daily_log.PrintDailyLog.msgParam12, {boolValue: true})])}), new base_print.ParamInfo.new(7, print_daily_log.PrintDailyLog.msgParam13, {boolValue: true}), new base_print.ParamInfo.new(12, print_daily_log.PrintDailyLog.msgParam16, {boolValue: false, subParams: JSArrayOfParamInfoL().of([new base_print.ParamInfo.new(0, print_daily_log.PrintDailyLog.msgParam17, {boolValue: false})])}), new base_print.ParamInfo.new(9, print_daily_log.PrintDailyLog.msgParam18, {boolValue: true, isLoopValue: true})]);
    this[lineWidth$1] = null;
    this[_isFirstLine] = true;
    this[_hasData] = false;
    this[tableHeadFilled$] = false;
    this[tableHeadLine$] = [];
    this[tableWidths$] = [];
    this[_body$] = [];
    this[_page$] = [];
    this[_y] = null;
    this[_bloodValue] = null;
    this[_lineHeight] = 0.4;
    this[_cellSpace] = 0.12;
    this[_maxY] = null;
    print_daily_log.PrintDailyLog.__proto__.new.call(this);
    this.init();
  }).prototype = print_daily_log.PrintDailyLog.prototype;
  dart.addTypeTests(print_daily_log.PrintDailyLog);
  dart.addTypeCaches(print_daily_log.PrintDailyLog);
  dart.setMethodSignature(print_daily_log.PrintDailyLog, () => ({
    __proto__: dart.getMethods(print_daily_log.PrintDailyLog.__proto__),
    fillPagesInternal: dart.fnType(dart.void, [dart.legacy(core.List$(dart.legacy(base_print.Page)))]),
    lineHeight: dart.fnType(dart.legacy(core.double), [dart.legacy(core.int)]),
    fillTable: dart.fnType(dart.void, [dart.legacy(json_data.DayData), dart.legacy(core.List$(dart.legacy(base_print.Page)))]),
    fillRow: dart.fnType(dart.legacy(core.List$(dart.legacy(core.String))), [dart.legacy(core.DateTime), dart.legacy(json_data.ReportData), dart.legacy(json_data.DayData), dart.dynamic, dart.legacy(json_data.EntryData), dart.legacy(core.List$(dart.legacy(core.String))), dart.legacy(print_daily_log.Flags), dart.legacy(core.String)]),
    getText: dart.fnType(dart.legacy(core.String), [dart.legacy(core.double), dart.legacy(core.String)]),
    basalFor: dart.fnType(dart.legacy(json_data.ProfileEntryData), [dart.legacy(json_data.DayData), dart.legacy(core.DateTime)]),
    msgLogTempTarget: dart.fnType(dart.legacy(core.String), [dart.dynamic, dart.dynamic, dart.dynamic]),
    msgLogTempBasal: dart.fnType(dart.legacy(core.String), [dart.dynamic, dart.dynamic]),
    msgLogTempBasalAbsolute: dart.fnType(dart.legacy(core.String), [dart.dynamic, dart.dynamic]),
    msgLogSMB: dart.fnType(dart.legacy(core.String), [dart.dynamic, dart.dynamic]),
    msgLogMicroBolus: dart.fnType(dart.legacy(core.String), [dart.dynamic, dart.dynamic]),
    msgMBG: dart.fnType(dart.legacy(core.String), [dart.dynamic, dart.dynamic]),
    msgLogOverride: dart.fnType(dart.legacy(core.String), [dart.dynamic, dart.dynamic, dart.dynamic, dart.dynamic]),
    fillList: dart.fnType(dart.void, [dart.legacy(core.bool), dart.legacy(json_data.ReportData), dart.legacy(json_data.DayData), dart.legacy(json_data.TreatmentData), dart.legacy(core.List$(dart.legacy(core.String))), dart.legacy(print_daily_log.Flags)]),
    addRow: dart.fnType(dart.void, [dart.legacy(core.bool), dart.dynamic, dart.dynamic, dart.dynamic, dart.dynamic]),
    getTable: dart.fnType(dart.dynamic, [dart.dynamic, dart.dynamic], [dart.legacy(core.double)]),
    getPage: dart.fnType(dart.legacy(base_print.Page), [dart.legacy(core.int), dart.legacy(json_data.ProfileGlucData), dart.legacy(base_profile.CalcData)])
  }));
  dart.setGetterSignature(print_daily_log.PrintDailyLog, () => ({
    __proto__: dart.getGetters(print_daily_log.PrintDailyLog.__proto__),
    estimatePageCount: dart.dynamic,
    title: dart.legacy(core.String),
    msgLogTempTargetReset: dart.legacy(core.String),
    msgChangeSite: dart.legacy(core.String),
    msgChangeSensor: dart.legacy(core.String),
    msgChangeInsulin: dart.legacy(core.String),
    msgChangeBattery: dart.legacy(core.String)
  }));
  dart.setLibraryUri(print_daily_log.PrintDailyLog, L21);
  dart.setFieldSignature(print_daily_log.PrintDailyLog, () => ({
    __proto__: dart.getFields(print_daily_log.PrintDailyLog.__proto__),
    help: dart.fieldType(dart.legacy(core.String)),
    id: dart.fieldType(dart.legacy(core.String)),
    idx: dart.fieldType(dart.legacy(core.String)),
    showNotes: dart.fieldType(dart.legacy(core.bool)),
    showCarbs: dart.fieldType(dart.legacy(core.bool)),
    showIE: dart.fieldType(dart.legacy(core.bool)),
    showSMB: dart.fieldType(dart.legacy(core.bool)),
    showTempBasal: dart.fieldType(dart.legacy(core.bool)),
    showProfileSwitch: dart.fieldType(dart.legacy(core.bool)),
    showIESource: dart.fieldType(dart.legacy(core.bool)),
    showTempTargets: dart.fieldType(dart.legacy(core.bool)),
    showGluc: dart.fieldType(dart.legacy(core.bool)),
    showChanges: dart.fieldType(dart.legacy(core.bool)),
    showChangesColumn: dart.fieldType(dart.legacy(core.bool)),
    showCalibration: dart.fieldType(dart.legacy(core.bool)),
    showProfileSwitchDetails: dart.fieldType(dart.legacy(core.bool)),
    showTempDigit: dart.fieldType(dart.legacy(core.bool)),
    showDupes: dart.fieldType(dart.legacy(core.bool)),
    showOnlyDupes: dart.fieldType(dart.legacy(core.bool)),
    showTempOverrides: dart.fieldType(dart.legacy(core.bool)),
    groupMinutes: dart.fieldType(dart.legacy(core.int)),
    params: dart.fieldType(dart.legacy(core.List$(dart.legacy(base_print.ParamInfo)))),
    lineWidth: dart.fieldType(dart.legacy(core.num)),
    [_isFirstLine]: dart.fieldType(dart.legacy(core.bool)),
    [_hasData]: dart.fieldType(dart.legacy(core.bool)),
    tableHeadFilled: dart.fieldType(dart.legacy(core.bool)),
    tableHeadLine: dart.fieldType(dart.dynamic),
    tableWidths: dart.fieldType(dart.dynamic),
    [_body$]: dart.fieldType(dart.legacy(core.List)),
    [_page$]: dart.fieldType(dart.legacy(core.List)),
    [_y]: dart.fieldType(dart.legacy(core.double)),
    [_bloodValue]: dart.fieldType(dart.legacy(core.double)),
    [_lineHeight]: dart.finalFieldType(dart.legacy(core.double)),
    [_cellSpace]: dart.finalFieldType(dart.legacy(core.double)),
    [_maxY]: dart.fieldType(dart.legacy(core.double))
  }));
  var showSeconds = dart.privateName(print_daily_profile, "PrintDailyProfile.showSeconds");
  var showBasalLine = dart.privateName(print_daily_profile, "PrintDailyProfile.showBasalLine");
  var showValPrz = dart.privateName(print_daily_profile, "PrintDailyProfile.showValPrz");
  var showMaxArrows = dart.privateName(print_daily_profile, "PrintDailyProfile.showMaxArrows");
  var help$7 = dart.privateName(print_daily_profile, "PrintDailyProfile.help");
  var id$12 = dart.privateName(print_daily_profile, "PrintDailyProfile.id");
  var idx$9 = dart.privateName(print_daily_profile, "PrintDailyProfile.idx");
  var params$10 = dart.privateName(print_daily_profile, "PrintDailyProfile.params");
  print_daily_profile.PrintDailyProfile = class PrintDailyProfile extends base_print.BasePrint {
    get showSeconds() {
      return this[showSeconds];
    }
    set showSeconds(value) {
      this[showSeconds] = value;
    }
    get showBasalLine() {
      return this[showBasalLine];
    }
    set showBasalLine(value) {
      this[showBasalLine] = value;
    }
    get showValPrz() {
      return this[showValPrz];
    }
    set showValPrz(value) {
      this[showValPrz] = value;
    }
    get showMaxArrows() {
      return this[showMaxArrows];
    }
    set showMaxArrows(value) {
      this[showMaxArrows] = value;
    }
    get help() {
      return this[help$7];
    }
    set help(value) {
      this[help$7] = value;
    }
    get id() {
      return this[id$12];
    }
    set id(value) {
      this[id$12] = value;
    }
    get idx() {
      return this[idx$9];
    }
    set idx(value) {
      this[idx$9] = value;
    }
    get params() {
      return this[params$10];
    }
    set params(value) {
      this[params$10] = value;
    }
    get title() {
      return intl.Intl.message("Tagesprofil");
    }
    set title(value) {
      super.title = value;
    }
    get isPortrait() {
      return true;
    }
    static get msgParam1() {
      return intl.Intl.message("Sekunden anzeigen");
    }
    static get msgParam2() {
      return intl.Intl.message("Basal aus Profil anzeigen");
    }
    static get msgParam3() {
      return intl.Intl.message("IE-Anzeige");
    }
    static get msgParam4() {
      return intl.Intl.message("Werte über dem Maximum als Pfeile darstellen");
    }
    extractParams() {
      this.showSeconds = this.params[$_get](0).boolValue;
      this.showBasalLine = this.params[$_get](1).boolValue;
      this.showMaxArrows = this.params[$_get](1).subParams[$_get](0).boolValue;
      this.showValPrz = this.params[$_get](2).intValue;
    }
    get estimatePageCount() {
      let t31, t31$, t31$0;
      let count = (t31$0 = (t31$ = (t31 = this.g, t31 == null ? null : t31.period), t31$ == null ? null : t31$.dayCount), t31$0 == null ? 0 : t31$0);
      return new (IdentityMapOfStringL$ObjectL()).from(["count", count, "isEstimated", true]);
    }
    fillPages(pages) {
      let data = this.repData.data;
      let oldLength = pages[$length];
      for (let day of data.days) {
        this.getPage(day, pages);
        if (dart.test(this.repData.isForThumbs)) break;
      }
      if (dart.test(this.repData.isForThumbs) && dart.notNull(pages[$length]) - dart.notNull(oldLength) > 1) pages[$removeRange](dart.notNull(oldLength) + 1, pages[$length]);
    }
    getPage(day, pages) {
      this.titleInfo = this.fmtDate(day.date, null, false, true);
      let tables = JSArrayOfListLOfObjectL().of([]);
      let space = 0.4;
      let count = day.profile[$length];
      let columns = (dart.notNull(count) / 37)[$truncate]() + 1;
      columns = math.min(intL(), columns, 3);
      let wid = (dart.notNull(this.width) - 2 * dart.notNull(this.xframe)) / columns;
      wid = wid - space * (columns - 1) / columns;
      let widths = JSArrayOfdoubleL().of([this.cm(wid / (columns === 3 ? 3 : 2) - 0.34), this.cm(wid / (columns === 3 ? 3 : 4) - 0.34), this.cm(wid / (columns === 3 ? 3 : 4) - 0.34)]);
      let sum = 0.0;
      let idx = 0;
      let lines = 0;
      let max = 0.0;
      for (let entry of day.profile) {
        max = math.max(doubleL(), entry.value, max);
      }
      if (dart.test(this.showBasalLine)) {
        max = 0.0;
        for (let entry of day.profile) {
          max = math.max(doubleL(), entry.orgValue, max);
        }
      }
      for (let entry of day.profile) {
        if (idx >= dart.notNull(tables[$length])) {
          tables[$add](JSArrayOfObjectL().of([JSArrayOfMapLOfStringL$StringL().of([new (IdentityMapOfStringL$StringL()).from(["text", this.msgTime, "style", "total", "alignment", "center"]), new (IdentityMapOfStringL$StringL()).from(["text", this.msgIEHr, "style", "total", "alignment", "center"]), new (IdentityMapOfStringL$StringL()).from(["text", this.msgSum, "style", "total", "alignment", "center"])])]));
        }
        sum = sum + dart.notNull(entry.value) * dart.notNull(entry.duration) / 3600;
        let w = dart.notNull(entry.value) * (dart.notNull(widths[$_get](1)) + dart.notNull(this.cm(0.1))) / max;
        let text = dart.str(this.fmtTime(entry.time(day.date), {withSeconds: this.showSeconds, withUnit: !dart.test(this.showSeconds) && columns < 3}));
        if (columns < 3) {
          let time = entry.time(day.date).add(new core.Duration.new({seconds: entry.duration}));
          text = text + " - " + dart.str(this.fmtTime(time, {withSeconds: this.showSeconds, withUnit: !dart.test(this.showSeconds) && columns < 3}));
        }
        let canvas = [];
        if (w > 0) {
          if (dart.notNull(entry.value) > max && dart.test(this.showMaxArrows)) {
            canvas[$add](new (IdentityMapOfStringL$ObjectL()).from(["type", "polyline", "closePath", true, "color", this.colBasalDay, "points", JSArrayOfMapLOfStringL$doubleL().of([new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(0), "y", this.cm(0.05)]), new (IdentityMapOfStringL$doubleL()).from(["x", dart.notNull(widths[$_get](1)) - dart.notNull(this.cm(0.1)), "y", this.cm(0.05)]), new (IdentityMapOfStringL$doubleL()).from(["x", dart.notNull(widths[$_get](1)) - dart.notNull(this.cm(0.1)), "y", this.cm(-0.05)]), new (IdentityMapOfStringL$doubleL()).from(["x", dart.notNull(widths[$_get](1)) + dart.notNull(this.cm(0.1)), "y", this.cm(0.2)]), new (IdentityMapOfStringL$doubleL()).from(["x", dart.notNull(widths[$_get](1)) - dart.notNull(this.cm(0.1)), "y", this.cm(0.45)]), new (IdentityMapOfStringL$doubleL()).from(["x", dart.notNull(widths[$_get](1)) - dart.notNull(this.cm(0.1)), "y", this.cm(0.35)]), new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(0), "y", this.cm(0.35)])])]));
          } else {
            canvas[$add](new (IdentityMapOfStringL$ObjectL()).from(["type", "rect", "x", this.cm(0), "y", this.cm(dart.test(this.showBasalLine) ? 0.05 : 0), "w", w, "h", this.cm(dart.test(this.showBasalLine) ? 0.3 : 0.4), "color", this.colBasalDay]));
          }
        }
        let prz = dart.str(this.g.fmtNumber(dart.notNull(entry.value) / dart.notNull(entry.orgValue) * 100, 0)) + "%";
        let val = this.g.fmtNumber(entry.value, this.g.basalPrecision);
        let colValue = JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$ObjectL()).from(["width", dart.notNull(widths[$_get](1)) / (this.showValPrz === 2 ? 2 : 1) + dart.notNull(this.cm(0.1)), "text", this.showValPrz === 0 ? prz : val, "alignment", "left", "fontSize", this.fs(this.showValPrz === 2 ? 8.0 : 10.0)])]);
        if (dart.test(this.showBasalLine)) {
          w = dart.notNull(entry.orgValue) * (dart.notNull(widths[$_get](1)) + dart.notNull(this.cm(0.1))) / max;
          canvas[$add](new (IdentityMapOfStringL$ObjectL()).from(["type", "rect", "x", this.cm(0), "y", this.cm(-0.05), "w", w, "h", this.cm(0.5), "color", this.colBasalProfile, "fillOpacity", 0.25]));
        }
        if (this.showValPrz === 2) {
          colValue[$add](new (IdentityMapOfStringL$ObjectL()).from(["width", dart.notNull(widths[$_get](1)) / 2, "text", prz, "alignment", "right", "fontSize", this.fs(8.0)]));
        }
        tables[$_get](idx)[$add](JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$StringL()).from(["text", text, "alignment", "center"]), new (IdentityMapOfStringL$ListLOfMapLOfStringL$ObjectL()).from(["stack", JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(-0.05), "y", this.cm(0)]), "canvas", canvas]), new (IdentityMapOfStringL$ListLOfMapLOfStringL$ObjectL()).from(["columns", colValue])])]), new (IdentityMapOfStringL$StringL()).from(["text", this.g.fmtNumber(sum, this.g.basalPrecision), "alignment", "right"])]));
        lines = lines + 1;
        if (lines > 37) {
          lines = 0;
          idx = idx + 1;
        }
      }
      let ret = JSArrayOfObjectL().of([this.headerFooter()]);
      let x = this.xframe;
      let doAdd = false;
      idx = 0;
      for (let table of tables) {
        ret[$add](new (IdentityMapOfStringL$ObjectL()).from(["absolutePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(x), "y", this.cm(this.yorg)]), "margin", JSArrayOfdoubleL().of([this.cm(0), this.cm(0), this.cm(0), this.cm(wid)]), "fontSize", this.fs(10.0), "table", new (IdentityMapOfStringL$ObjectL()).from(["headerRows", 0, "widths", widths, "body", table])]));
        doAdd = true;
        idx = idx + 1;
        if (idx < columns) {
          x = dart.notNull(x) + (wid + space);
        } else {
          x = this.xframe;
          idx = 0;
          pages[$add](new base_print.Page.new(this.isPortrait, ret));
          ret = JSArrayOfObjectL().of([this.headerFooter()]);
          doAdd = false;
        }
      }
      if (doAdd) pages[$add](new base_print.Page.new(this.isPortrait, ret));
    }
  };
  (print_daily_profile.PrintDailyProfile.new = function() {
    this[showSeconds] = null;
    this[showBasalLine] = null;
    this[showValPrz] = null;
    this[showMaxArrows] = null;
    this[help$7] = intl.Intl.message("Dieses Formular zeigt die tatsächliche Basalrate, die während des Tages gelaufen ist unter\nBerücksichtigung aller temporären Basalratenanpassungen. Zusätzlich kann noch die im Profil hinterlegte\nBasalrate angezeigt werden. Die Basalrate kann als Wert, als prozentuale Änderung in Bezug auf die Profilbasalrate\noder mit beidem angezeigt werden. Die Summenspalte zeigt die bis zur entsprechenden Uhrzeit abgegebene Basalrate\nan. Es ist auch möglich, die Uhrzeit mit Sekunden anzeigen zu lassen. Damit kann man die angezeigten Werte\nrechnerisch überprüfen.\n\nWenn die Basalrate aus dem Profil angezeigt wird, wird das Maximum für die Darstellung der Balken anhand des\nmaximalen Wertes der Profilbasalrate ermittelt. Dadurch werden bei Werten über 100% des Maximalwerts der \nProfilbasalrate die Balken über die Spalte hinaus verlängert. Es gibt aber eine Option, um diese Balken abzuschneiden \nund als Pfeile darstellen zu lassen.", {desc: "help for dayprofile"});
    this[id$12] = "dayprofile";
    this[idx$9] = "11";
    this[params$10] = JSArrayOfParamInfoL().of([new base_print.ParamInfo.new(2, print_daily_profile.PrintDailyProfile.msgParam1, {boolValue: false}), new base_print.ParamInfo.new(3, print_daily_profile.PrintDailyProfile.msgParam2, {boolValue: true, subParams: JSArrayOfParamInfoL().of([new base_print.ParamInfo.new(0, print_daily_profile.PrintDailyProfile.msgParam4, {boolValue: true})])}), new base_print.ParamInfo.new(1, print_daily_profile.PrintDailyProfile.msgParam3, {list: JSArrayOfStringL().of([intl.Intl.message("Prozent"), intl.Intl.message("Wert"), intl.Intl.message("Wert & Prozent")])})]);
    print_daily_profile.PrintDailyProfile.__proto__.new.call(this);
    this.init();
  }).prototype = print_daily_profile.PrintDailyProfile.prototype;
  dart.addTypeTests(print_daily_profile.PrintDailyProfile);
  dart.addTypeCaches(print_daily_profile.PrintDailyProfile);
  dart.setMethodSignature(print_daily_profile.PrintDailyProfile, () => ({
    __proto__: dart.getMethods(print_daily_profile.PrintDailyProfile.__proto__),
    fillPages: dart.fnType(dart.void, [dart.legacy(core.List$(dart.legacy(base_print.Page)))]),
    getPage: dart.fnType(dart.void, [dart.legacy(json_data.DayData), dart.legacy(core.List$(dart.legacy(base_print.Page)))])
  }));
  dart.setGetterSignature(print_daily_profile.PrintDailyProfile, () => ({
    __proto__: dart.getGetters(print_daily_profile.PrintDailyProfile.__proto__),
    title: dart.legacy(core.String),
    estimatePageCount: dart.dynamic
  }));
  dart.setLibraryUri(print_daily_profile.PrintDailyProfile, L22);
  dart.setFieldSignature(print_daily_profile.PrintDailyProfile, () => ({
    __proto__: dart.getFields(print_daily_profile.PrintDailyProfile.__proto__),
    showSeconds: dart.fieldType(dart.legacy(core.bool)),
    showBasalLine: dart.fieldType(dart.legacy(core.bool)),
    showValPrz: dart.fieldType(dart.legacy(core.int)),
    showMaxArrows: dart.fieldType(dart.legacy(core.bool)),
    help: dart.fieldType(dart.legacy(core.String)),
    id: dart.fieldType(dart.legacy(core.String)),
    idx: dart.fieldType(dart.legacy(core.String)),
    params: dart.fieldType(dart.legacy(core.List$(dart.legacy(base_print.ParamInfo))))
  }));
  var _trigger$4 = dart.privateName(printparams_component, "_trigger");
  var g$7 = dart.privateName(printparams_component, "PrintParamsComponent.g");
  var listPeriodShift = dart.privateName(printparams_component, "PrintParamsComponent.listPeriodShift");
  var periodShift = dart.privateName(printparams_component, "PrintParamsComponent.periodShift");
  var glucMaxIdx = dart.privateName(printparams_component, "PrintParamsComponent.glucMaxIdx");
  var basalPrecisionIdx = dart.privateName(printparams_component, "PrintParamsComponent.basalPrecisionIdx");
  var listGlucMaxValues = dart.privateName(printparams_component, "PrintParamsComponent.listGlucMaxValues");
  var listBasalPrecision = dart.privateName(printparams_component, "PrintParamsComponent.listBasalPrecision");
  printparams_component.PrintParamsComponent = class PrintParamsComponent extends core.Object {
    get g() {
      return this[g$7];
    }
    set g(value) {
      this[g$7] = value;
    }
    get listPeriodShift() {
      return this[listPeriodShift];
    }
    set listPeriodShift(value) {
      this[listPeriodShift] = value;
    }
    get periodShift() {
      return this[periodShift];
    }
    set periodShift(value) {
      this[periodShift] = value;
    }
    get glucMaxIdx() {
      return this[glucMaxIdx];
    }
    set glucMaxIdx(value) {
      this[glucMaxIdx] = value;
    }
    get basalPrecisionIdx() {
      return this[basalPrecisionIdx];
    }
    set basalPrecisionIdx(value) {
      this[basalPrecisionIdx] = value;
    }
    get listGlucMaxValues() {
      return this[listGlucMaxValues];
    }
    set listGlucMaxValues(value) {
      this[listGlucMaxValues] = value;
    }
    get listBasalPrecision() {
      return this[listBasalPrecision];
    }
    set listBasalPrecision(value) {
      this[listBasalPrecision] = value;
    }
    get trigger() {
      return this[_trigger$4].stream;
    }
    msgStandardLimits(low, high, unit) {
      return intl.Intl.message("Standard Zielbereich verwenden (" + dart.str(low) + " " + dart.str(unit) + " - " + dart.str(high) + " " + dart.str(unit) + ")", {args: JSArrayOfObjectL().of([low, high, unit]), name: "msgStandardLimits"});
    }
    get msgStandardCGP() {
      return intl.Intl.message("CGP immer mit Standard Zielbereich");
    }
    static get msgAutomatic() {
      return intl.Intl.message("Automatisch");
    }
    static get msgLatestFirst() {
      return intl.Intl.message("Neuester Tag zuerst");
    }
    basalPrecisionText(value) {
      return dart.str(this.g.fmtNumber(1, numL().as(value))) + " " + dart.str(dart.dsend(this.g.getGlucInfo(), '_get', ["unit"]));
    }
    static get msgBasalPrecisionFromProfile() {
      return intl.Intl.message("Aus den Profilen ermitteln");
    }
    ngOnInit() {
      return async.async(core.Null, (function* ngOnInit() {
        this.listPeriodShift[$addAll](this.g.listPeriodShift[$reversed]);
        this.periodShift = this.listPeriodShift[$firstWhere](dart.fn(e => e.months == this.g.currPeriodShift.months, PeriodShiftLToboolL()));
        let url = this.g.user.apiUrl(null, "status.json");
        let content = (yield this.g.request(url));
        let status = json_data.StatusData.fromJson(MapLOfStringL$dynamic().as(convert.json.decode(content)));
        this.g.setGlucMGDL(status);
        this.fillComboBoxes();
        this.glucMaxIdx = this.g.ppGlucMaxIdx;
        this.basalPrecisionIdx = this.g.ppBasalPrecisionIdx;
      }).bind(this));
    }
    fillComboBoxes() {
      this.listGlucMaxValues = JSArrayOfStringL().of([printparams_component.PrintParamsComponent.msgAutomatic]);
      for (let i = 1; i < dart.notNull(this.g.glucMaxValues[$length]); i = i + 1) {
        this.listGlucMaxValues[$add](dart.str(this.g.glucFromData(this.g.glucMaxValues[$_get](i))) + " " + dart.str(dart.dsend(this.g.getGlucInfo(), '_get', ["unit"])));
      }
      this.listBasalPrecision = JSArrayOfStringL().of([printparams_component.PrintParamsComponent.msgBasalPrecisionFromProfile]);
      for (let i = 1; i < dart.notNull(this.g.basalPrecisionValues[$length]); i = i + 1) {
        this.listBasalPrecision[$add](dart.str(this.basalPrecisionText(this.g.basalPrecisionValues[$_get](i))));
      }
    }
    changeGlucUnits(idx) {
      this.g.glucMGDLIdx = idx;
      this.fillComboBoxes();
    }
    fire(type) {
      let detail = 0;
      switch (type) {
        case "ok":
        {
          this.g.currPeriodShift = this.periodShift;
          this.g.ppGlucMaxIdx = this.glucMaxIdx;
          this.g.ppBasalPrecisionIdx = this.basalPrecisionIdx;
          break;
        }
      }
      this[_trigger$4].add(html.UIEvent.new(type, {detail: detail}));
    }
  };
  (printparams_component.PrintParamsComponent.new = function() {
    this[g$7] = globals.Globals.new();
    this[listPeriodShift] = JSArrayOfPeriodShiftL().of([]);
    this[_trigger$4] = StreamControllerOfUIEventL().broadcast({sync: true});
    this[periodShift] = null;
    this[glucMaxIdx] = null;
    this[basalPrecisionIdx] = null;
    this[listGlucMaxValues] = JSArrayOfStringL().of([printparams_component.PrintParamsComponent.msgAutomatic]);
    this[listBasalPrecision] = JSArrayOfStringL().of([printparams_component.PrintParamsComponent.msgBasalPrecisionFromProfile]);
    ;
  }).prototype = printparams_component.PrintParamsComponent.prototype;
  dart.addTypeTests(printparams_component.PrintParamsComponent);
  dart.addTypeCaches(printparams_component.PrintParamsComponent);
  printparams_component.PrintParamsComponent[dart.implements] = () => [lifecycle_hooks.OnInit];
  dart.setMethodSignature(printparams_component.PrintParamsComponent, () => ({
    __proto__: dart.getMethods(printparams_component.PrintParamsComponent.__proto__),
    msgStandardLimits: dart.fnType(dart.legacy(core.String), [dart.legacy(core.String), dart.legacy(core.String), dart.legacy(core.String)]),
    basalPrecisionText: dart.fnType(dart.legacy(core.String), [dart.dynamic]),
    ngOnInit: dart.fnType(dart.legacy(async.Future$(core.Null)), []),
    fillComboBoxes: dart.fnType(dart.void, []),
    changeGlucUnits: dart.fnType(dart.void, [dart.legacy(core.int)]),
    fire: dart.fnType(dart.void, [dart.legacy(core.String)])
  }));
  dart.setGetterSignature(printparams_component.PrintParamsComponent, () => ({
    __proto__: dart.getGetters(printparams_component.PrintParamsComponent.__proto__),
    trigger: dart.legacy(async.Stream$(dart.legacy(html.UIEvent))),
    msgStandardCGP: dart.legacy(core.String)
  }));
  dart.setLibraryUri(printparams_component.PrintParamsComponent, L23);
  dart.setFieldSignature(printparams_component.PrintParamsComponent, () => ({
    __proto__: dart.getFields(printparams_component.PrintParamsComponent.__proto__),
    g: dart.fieldType(dart.legacy(globals.Globals)),
    listPeriodShift: dart.fieldType(dart.legacy(core.List$(dart.legacy(globals.PeriodShift)))),
    [_trigger$4]: dart.finalFieldType(dart.legacy(async.StreamController$(dart.legacy(html.UIEvent)))),
    periodShift: dart.fieldType(dart.legacy(globals.PeriodShift)),
    glucMaxIdx: dart.fieldType(dart.legacy(core.int)),
    basalPrecisionIdx: dart.fieldType(dart.legacy(core.int)),
    listGlucMaxValues: dart.fieldType(dart.legacy(core.List$(dart.legacy(core.String)))),
    listBasalPrecision: dart.fieldType(dart.legacy(core.List$(dart.legacy(core.String))))
  }));
  var paramList = dart.privateName(formparams_component, "FormparamsComponent.paramList");
  formparams_component.FormparamsComponent = class FormparamsComponent extends core.Object {
    get paramList() {
      return this[paramList];
    }
    set paramList(value) {
      this[paramList] = value;
    }
    getClass(param, def = "") {
      if (dart.test(param.isLoopValue)) def = dart.str(def) + " loop";
      return def;
    }
  };
  (formparams_component.FormparamsComponent.new = function() {
    this[paramList] = null;
    ;
  }).prototype = formparams_component.FormparamsComponent.prototype;
  dart.addTypeTests(formparams_component.FormparamsComponent);
  dart.addTypeCaches(formparams_component.FormparamsComponent);
  dart.setMethodSignature(formparams_component.FormparamsComponent, () => ({
    __proto__: dart.getMethods(formparams_component.FormparamsComponent.__proto__),
    getClass: dart.fnType(dart.legacy(core.String), [dart.legacy(base_print.ParamInfo)], [dart.legacy(core.String)])
  }));
  dart.setLibraryUri(formparams_component.FormparamsComponent, L24);
  dart.setFieldSignature(formparams_component.FormparamsComponent, () => ({
    __proto__: dart.getFields(formparams_component.FormparamsComponent.__proto__),
    paramList: dart.fieldType(dart.legacy(core.List$(dart.legacy(base_print.ParamInfo))))
  }));
  var _trigger$5 = dart.privateName(helpview_component, "_trigger");
  var g$8 = dart.privateName(helpview_component, "HelpViewComponent.g");
  var tileHelp$ = dart.privateName(helpview_component, "HelpViewComponent.tileHelp");
  var isVisible$0 = dart.privateName(helpview_component, "HelpViewComponent.isVisible");
  helpview_component.HelpViewComponent = class HelpViewComponent extends core.Object {
    get g() {
      return this[g$8];
    }
    set g(value) {
      this[g$8] = value;
    }
    get tileHelp() {
      return this[tileHelp$];
    }
    set tileHelp(value) {
      this[tileHelp$] = value;
    }
    get isVisible() {
      return this[isVisible$0];
    }
    set isVisible(value) {
      this[isVisible$0] = value;
    }
    get trigger() {
      return this[_trigger$5].stream;
    }
    fire(type, detail = 0) {
      return async.async(dart.void, (function* fire() {
        switch (type) {
          case "closeAll":
          {
            this.tileHelp[$clear]();
            break;
          }
          case "close":
          {
            this.tileHelp[$removeLast]();
            break;
          }
          case "btn":
          {
            if (dart.notNull(detail) >= 0 && dart.notNull(detail) < dart.notNull(this.tileHelp[$last].form.helpStrings[$length])) {
              this.tileHelp[$add](this.tileHelp[$last].form.helpStrings[$_get](detail).cfg);
            }
            break;
          }
        }
        this[_trigger$5].add(html.UIEvent.new(type, {detail: detail}));
      }).bind(this));
    }
  };
  (helpview_component.HelpViewComponent.new = function() {
    this[g$8] = globals.Globals.new();
    this[tileHelp$] = null;
    this[_trigger$5] = StreamControllerOfUIEventL().broadcast({sync: true});
    this[isVisible$0] = true;
    ;
  }).prototype = helpview_component.HelpViewComponent.prototype;
  dart.addTypeTests(helpview_component.HelpViewComponent);
  dart.addTypeCaches(helpview_component.HelpViewComponent);
  dart.setMethodSignature(helpview_component.HelpViewComponent, () => ({
    __proto__: dart.getMethods(helpview_component.HelpViewComponent.__proto__),
    fire: dart.fnType(dart.void, [dart.legacy(core.String)], [dart.legacy(core.int)])
  }));
  dart.setGetterSignature(helpview_component.HelpViewComponent, () => ({
    __proto__: dart.getGetters(helpview_component.HelpViewComponent.__proto__),
    trigger: dart.legacy(async.Stream$(dart.legacy(html.UIEvent)))
  }));
  dart.setLibraryUri(helpview_component.HelpViewComponent, L25);
  dart.setFieldSignature(helpview_component.HelpViewComponent, () => ({
    __proto__: dart.getFields(helpview_component.HelpViewComponent.__proto__),
    g: dart.fieldType(dart.legacy(globals.Globals)),
    tileHelp: dart.fieldType(dart.legacy(core.List$(dart.legacy(base_print.FormConfig)))),
    [_trigger$5]: dart.finalFieldType(dart.legacy(async.StreamController$(dart.legacy(html.UIEvent)))),
    isVisible: dart.fieldType(dart.legacy(core.bool))
  }));
  var input$ = dart.privateName(settings_component, "MaterialInputShowPasswordDirective.input");
  settings_component.MaterialInputShowPasswordDirective = class MaterialInputShowPasswordDirective extends core.Object {
    get input() {
      return this[input$];
    }
    set input(value) {
      this[input$] = value;
    }
    set showPassword(unhide) {
      this.input.type = dart.test(unhide) ? "text" : "password";
      this.input.trailingText = dart.test(unhide) ? " " : "";
    }
  };
  (settings_component.MaterialInputShowPasswordDirective.new = function(input) {
    this[input$] = input;
    ;
  }).prototype = settings_component.MaterialInputShowPasswordDirective.prototype;
  dart.addTypeTests(settings_component.MaterialInputShowPasswordDirective);
  dart.addTypeCaches(settings_component.MaterialInputShowPasswordDirective);
  dart.setSetterSignature(settings_component.MaterialInputShowPasswordDirective, () => ({
    __proto__: dart.getSetters(settings_component.MaterialInputShowPasswordDirective.__proto__),
    showPassword: dart.legacy(core.bool)
  }));
  dart.setLibraryUri(settings_component.MaterialInputShowPasswordDirective, L26);
  dart.setFieldSignature(settings_component.MaterialInputShowPasswordDirective, () => ({
    __proto__: dart.getFields(settings_component.MaterialInputShowPasswordDirective.__proto__),
    input: dart.fieldType(dart.legacy(material_input.MaterialInputComponent))
  }));
  var _trigger$6 = dart.privateName(settings_component, "_trigger");
  var g$9 = dart.privateName(settings_component, "SettingsComponent.g");
  var errUserInvalid = dart.privateName(settings_component, "SettingsComponent.errUserInvalid");
  var confirmIdx = dart.privateName(settings_component, "SettingsComponent.confirmIdx");
  var currApiUrlIdx = dart.privateName(settings_component, "SettingsComponent.currApiUrlIdx");
  var showPwd = dart.privateName(settings_component, "SettingsComponent.showPwd");
  var progressText = dart.privateName(settings_component, "SettingsComponent.progressText");
  var msgCalcDayTitle = dart.privateName(settings_component, "SettingsComponent.msgCalcDayTitle");
  var listProfileMaxCount = dart.privateName(settings_component, "SettingsComponent.listProfileMaxCount");
  var exportData = dart.privateName(settings_component, "SettingsComponent.exportData");
  var calcDate = dart.privateName(settings_component, "SettingsComponent.calcDate");
  settings_component.SettingsComponent = class SettingsComponent extends core.Object {
    get g() {
      return this[g$9];
    }
    set g(value) {
      this[g$9] = value;
    }
    get errUserInvalid() {
      return this[errUserInvalid];
    }
    set errUserInvalid(value) {
      this[errUserInvalid] = value;
    }
    get confirmIdx() {
      return this[confirmIdx];
    }
    set confirmIdx(value) {
      this[confirmIdx] = value;
    }
    get currApiUrlIdx() {
      return this[currApiUrlIdx];
    }
    set currApiUrlIdx(value) {
      this[currApiUrlIdx] = value;
    }
    get showPwd() {
      return this[showPwd];
    }
    set showPwd(value) {
      this[showPwd] = value;
    }
    get progressText() {
      return this[progressText];
    }
    set progressText(value) {
      this[progressText] = value;
    }
    get msgCalcDayTitle() {
      return this[msgCalcDayTitle];
    }
    set msgCalcDayTitle(value) {
      this[msgCalcDayTitle] = value;
    }
    get listProfileMaxCount() {
      return this[listProfileMaxCount];
    }
    set listProfileMaxCount(value) {
      this[listProfileMaxCount] = value;
    }
    get exportData() {
      return this[exportData];
    }
    set exportData(value) {
      this[exportData] = value;
    }
    get calcDate() {
      return this[calcDate];
    }
    set calcDate(value) {
      this[calcDate] = value;
    }
    get trigger() {
      return this[_trigger$6].stream;
    }
    get msgUrlNightscout() {
      return intl.Intl.message("Url zur Nightscout-API (z.B. https://xxx.herokuapp.com)");
    }
    get msgName() {
      return intl.Intl.message("Name");
    }
    get msgInsulin() {
      return intl.Intl.message("Insulin");
    }
    get msgAccessToken() {
      return intl.Intl.message("Zugriffsschlüssel");
    }
    msgAccessTokenHint(isVisible) {
      return dart.test(isVisible) ? intl.Intl.message("Der Zugriffsschlüssel wird nur benötigt, wenn der Zugriff in Nightscout " + "über AUTH_DEFAULT_ROLES eingeschränkt wurde", {args: JSArrayOfObjectL().of([isVisible]), name: "msgAccessTokenHint"}) : "";
    }
    msgStartDateHint(isVisible) {
      return dart.test(isVisible) ? intl.Intl.message("Das Datum des ersten Tages mit Daten", {args: JSArrayOfObjectL().of([isVisible]), name: "msgStartDateHint"}) : "";
    }
    msgEndDateHint(isVisible) {
      return dart.test(isVisible) ? intl.Intl.message("Das Datum des letzten kompletten Tages mit Daten", {args: JSArrayOfObjectL().of([isVisible]), name: "msgEndDateHint"}) : "";
    }
    msgCheckUser(url) {
      return intl.Intl.message("Überprüfe Zugriff auf " + dart.str(url) + "...", {args: JSArrayOfObjectL().of([url]), name: "msgCheckUser"});
    }
    get msgStartDate() {
      return intl.Intl.message("Daten von");
    }
    get msgEndDate() {
      return intl.Intl.message("Daten bis");
    }
    get msgCalcDayFirstTitle() {
      return intl.Intl.message("Ermittle ersten Tag mit Daten");
    }
    get msgCalcDayLastTitle() {
      return intl.Intl.message("Ermittle letzten Tag mit Daten");
    }
    get lblProfileMax() {
      return intl.Intl.message("Die Profiltabelle sollte normalerweise nur Daten zu den verwendeten " + "Profilen beinhalten. iOS Loop verwendet diese Tabelle aber dazu, um dort eigene Einstellungen zu speichern " + "und tut dies bei einigen Benutzern exzessiv. Ab einer bestimmten Datenmenge kann die Profiltabelle über " + "die API dann nicht mehr korrekt abgefragt werden. Deswegen gibt es hier die Möglichkeit, die Anzahl an " + "Datensätzen einzuschränken, die aus dieser Tabelle geholt werden. Das ist so lange notwendig, wie " + "iOS Loop oder andere Uploader diese Tabelle falsch befüllen.\n\nMaximale Anzahl an Profildatensätzen:");
    }
    msgCalculatingDay(date) {
      return intl.Intl.message("Überprüfe " + dart.str(date) + " ...", {args: JSArrayOfObjectL().of([date]), name: "msgCalculatingDay"});
    }
    get pdfSliderMax() {
      return (4000000 / 100000)[$truncate]();
    }
    ngOnInit() {
      return async.async(core.Null, (function* ngOnInit() {
        this.fillComboBoxes();
      }).bind(this));
    }
    confirmOk() {
      let t31;
      switch (this.confirmIdx) {
        case 1:
        {
          try {
            this.g.userList[$removeAt](this.g.userIdx);
            t31 = this.g;
            t31.isConfigured = !!(dart.notNull(t31.isConfigured) & dart.test(this.g.userList[$isNotEmpty]));
            if (!dart.test(this.g.isConfigured)) {
              this.g.saveWebData();
              this.fire("ok");
            }
          } catch (e$) {
            let e = dart.getThrown(e$);
          }
          break;
        }
        case 2:
        {
          try {
            this.g.user.listApiUrl[$removeAt](this.currApiUrlIdx);
          } catch (e$0) {
            let e = dart.getThrown(e$0);
          }
          break;
        }
      }
      this.confirmIdx = 0;
    }
    fillComboBoxes() {
      this.listProfileMaxCount = JSArrayOfStringL().of([this.g.msgUnlimited]);
      for (let i = 1; i < dart.notNull(this.g.profileMaxCounts[$length]); i = i + 1) {
        this.listProfileMaxCount[$add](dart.str(this.g.profileMaxCounts[$_get](i)));
      }
    }
    addUser() {
      this.checkUser().then(core.Null, dart.fn(_ => {
        if (this.errUserInvalid != null) return;
        if (this.g.userList[$last].apiUrl(null, "")[$isNotEmpty]) {
          this.g.userList[$add](new globals.UserData.new(this.g));
          this.g.userIdx = dart.notNull(this.g.userList[$length]) - 1;
        }
      }, voidToNullN()));
    }
    addUrl() {
      this.g.user.listApiUrl[$add](new globals.UrlData.new(this.g));
    }
    removeUrl(idx) {
    }
    get msgExport() {
      return intl.Intl.message("Bitte den Dateinamen für die Speicherung auswählen");
    }
    handleImport(e) {
      return async.async(dart.void, (function* handleImport() {
        let t33;
        e.preventDefault();
        let blob = FileUploadInputElementL().as(e[$target])[$files][$_get](0);
        let reader = (t33 = html.FileReader.new(), (() => {
          t33.readAsText(blob);
          return t33;
        })());
        yield reader[$onLoadEnd].first;
        let result = StringL().as(reader[$result]);
        this.g.fromSharedString(globals.Settings.tiod(result));
      }).bind(this));
    }
    export() {
      this.exportData = convert.base64Encode(convert.utf8.encode(globals.Settings.doit(this.g.asSharedString)));
      FutureOfNullN().delayed(new core.Duration.new({milliseconds: 100}), dart.fn(() => {
        FormElementL().as(html.querySelector("#exportForm")).submit();
      }, VoidToNullN()));
    }
    importCLicked() {
      html.querySelector("#importData").click();
    }
    checkUser(event = null) {
      return async.async(dart.void, (function* checkUser() {
        this.g.user.listApiUrl[$sort](dart.fn((a, b) => this.g.compareDate(a.endDate, b.endDate), UrlDataLAndUrlDataLTointL()));
        this.progressText = this.msgCheckUser(this.g.user.apiUrl(null, "", {noApi: true}));
        let ret = (yield this.g.user.isValid);
        this.progressText = null;
        this.errUserInvalid = ret;
        if (ret == null) {
          this.g.isConfigured = true;
          this.g.saveWebData();
        }
        if (ret == null && event != null) this.fire(event);
      }).bind(this));
    }
    clickDelete(idx) {
      this.currApiUrlIdx = intL().as(idx);
      this.confirmIdx = 2;
    }
    navigate(url) {
      html.window[$open](url, "_blank");
    }
    calculateFirstDay(urlData) {
      return async.async(dart.void, (function* calculateFirstDay() {
        this.confirmIdx = 3;
        let done = false;
        this.calcDate = date$.Date.today();
        let diff = -256;
        this.msgCalcDayTitle = this.msgCalcDayFirstTitle;
        while (this.confirmIdx === 3 && !done) {
          let check = new core.DateTime.new(this.calcDate.year, this.calcDate.month, this.calcDate.day, 0, 0, 0, 0).toUtc();
          let url = urlData.fullUrl("entries.json", {params: "find[date][$lte]=" + dart.str(check.millisecondsSinceEpoch) + "&count=2"});
          let content = (yield this.g.request(url));
          try {
            let json = convert.json.decode(content);
            if (diff < -1) {
              if (dart.dtest(dart.dsend(dart.dload(json, 'length'), '<', [1]))) {
                diff = (-diff / 2)[$truncate]();
              }
            } else if (diff > 1) {
              if (dart.dtest(dart.dsend(dart.dload(json, 'length'), '>', [0]))) {
                diff = (-diff / 2)[$truncate]();
              }
            } else {
              done = true;
              if (dart.dtest(dart.dsend(dart.dload(json, 'length'), '>', [0]))) this.calcDate = this.calcDate.add({days: diff});
            }
          } catch (e) {
            let ex = dart.getThrown(e);
            done = true;
          }
          if (!done) this.calcDate = this.calcDate.add({days: diff});
        }
        diff = 256;
        urlData.startDate = this.calcDate;
        done = false;
        this.msgCalcDayTitle = this.msgCalcDayLastTitle;
        while (this.confirmIdx === 3 && !done) {
          let check = new core.DateTime.new(this.calcDate.year, this.calcDate.month, this.calcDate.day, 23, 59, 59, 999).toUtc();
          let url = urlData.fullUrl("entries.json", {params: "find[date][$gte]=" + dart.str(check.millisecondsSinceEpoch) + "&count=2"});
          let content = (yield this.g.request(url));
          try {
            let json = convert.json.decode(content);
            if (diff > 1) {
              if (dart.dtest(dart.dsend(dart.dload(json, 'length'), '<', [1]))) {
                diff = (-diff / 2)[$truncate]();
              }
            } else if (diff < -1) {
              if (dart.dtest(dart.dsend(dart.dload(json, 'length'), '>', [0]))) {
                diff = (-diff / 2)[$truncate]();
              }
            } else {
              done = true;
              if (dart.test(this.calcDate.isOnOrAfter(date$.Date.today().add({days: -1})))) {
                this.calcDate = date$.Date.today();
              } else if (dart.dtest(dart.dsend(dart.dload(json, 'length'), '<', [1]))) {
                this.calcDate = this.calcDate.add({days: -diff});
              }
            }
          } catch (e$) {
            let ex = dart.getThrown(e$);
            done = true;
          }
          if (!done) this.calcDate = this.calcDate.add({days: diff});
        }
        if (dart.test(this.calcDate.isOnOrAfter(date$.Date.today()))) {
          urlData.endDate = null;
        } else {
          urlData.endDate = this.calcDate;
        }
        this.confirmIdx = 0;
      }).bind(this));
    }
    cancelCalculation() {
      this.confirmIdx = 0;
    }
    fire(type) {
      switch (type) {
        case "check":
        {
          this.checkUser("ok");
          return;
        }
        case "cancel":
        {
          break;
        }
      }
      this[_trigger$6].add(html.UIEvent.new(type, {detail: 0}));
      this.errUserInvalid = null;
    }
  };
  (settings_component.SettingsComponent.new = function() {
    this[g$9] = globals.Globals.new();
    this[errUserInvalid] = null;
    this[confirmIdx] = 0;
    this[currApiUrlIdx] = -1;
    this[showPwd] = -1;
    this[_trigger$6] = StreamControllerOfUIEventL().broadcast({sync: true});
    this[progressText] = null;
    this[msgCalcDayTitle] = "";
    this[listProfileMaxCount] = null;
    this[exportData] = "";
    this[calcDate] = date$.Date.today();
    ;
  }).prototype = settings_component.SettingsComponent.prototype;
  dart.addTypeTests(settings_component.SettingsComponent);
  dart.addTypeCaches(settings_component.SettingsComponent);
  settings_component.SettingsComponent[dart.implements] = () => [lifecycle_hooks.OnInit];
  dart.setMethodSignature(settings_component.SettingsComponent, () => ({
    __proto__: dart.getMethods(settings_component.SettingsComponent.__proto__),
    msgAccessTokenHint: dart.fnType(dart.legacy(core.String), [dart.legacy(core.bool)]),
    msgStartDateHint: dart.fnType(dart.legacy(core.String), [dart.legacy(core.bool)]),
    msgEndDateHint: dart.fnType(dart.legacy(core.String), [dart.legacy(core.bool)]),
    msgCheckUser: dart.fnType(dart.legacy(core.String), [dart.legacy(core.String)]),
    msgCalculatingDay: dart.fnType(dart.legacy(core.String), [dart.dynamic]),
    ngOnInit: dart.fnType(dart.legacy(async.Future$(core.Null)), []),
    confirmOk: dart.fnType(dart.void, []),
    fillComboBoxes: dart.fnType(dart.void, []),
    addUser: dart.fnType(dart.void, []),
    addUrl: dart.fnType(dart.void, []),
    removeUrl: dart.fnType(dart.void, [dart.legacy(core.int)]),
    handleImport: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(html.Event)]),
    export: dart.fnType(dart.void, []),
    importCLicked: dart.fnType(dart.void, []),
    checkUser: dart.fnType(dart.legacy(async.Future$(dart.void)), [], [dart.legacy(core.String)]),
    clickDelete: dart.fnType(dart.void, [dart.dynamic]),
    navigate: dart.fnType(dart.void, [dart.legacy(core.String)]),
    calculateFirstDay: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(globals.UrlData)]),
    cancelCalculation: dart.fnType(dart.void, []),
    fire: dart.fnType(dart.void, [dart.legacy(core.String)])
  }));
  dart.setGetterSignature(settings_component.SettingsComponent, () => ({
    __proto__: dart.getGetters(settings_component.SettingsComponent.__proto__),
    trigger: dart.legacy(async.Stream$(dart.legacy(html.UIEvent))),
    msgUrlNightscout: dart.legacy(core.String),
    msgName: dart.legacy(core.String),
    msgInsulin: dart.legacy(core.String),
    msgAccessToken: dart.legacy(core.String),
    msgStartDate: dart.legacy(core.String),
    msgEndDate: dart.legacy(core.String),
    msgCalcDayFirstTitle: dart.legacy(core.String),
    msgCalcDayLastTitle: dart.legacy(core.String),
    lblProfileMax: dart.legacy(core.String),
    pdfSliderMax: dart.legacy(core.int),
    msgExport: dart.legacy(core.String)
  }));
  dart.setLibraryUri(settings_component.SettingsComponent, L26);
  dart.setFieldSignature(settings_component.SettingsComponent, () => ({
    __proto__: dart.getFields(settings_component.SettingsComponent.__proto__),
    g: dart.fieldType(dart.legacy(globals.Globals)),
    errUserInvalid: dart.fieldType(dart.legacy(core.String)),
    confirmIdx: dart.fieldType(dart.legacy(core.int)),
    currApiUrlIdx: dart.fieldType(dart.legacy(core.int)),
    showPwd: dart.fieldType(dart.legacy(core.int)),
    [_trigger$6]: dart.finalFieldType(dart.legacy(async.StreamController$(dart.legacy(html.UIEvent)))),
    progressText: dart.fieldType(dart.legacy(core.String)),
    msgCalcDayTitle: dart.fieldType(dart.legacy(core.String)),
    listProfileMaxCount: dart.fieldType(dart.legacy(core.List$(dart.legacy(core.String)))),
    exportData: dart.fieldType(dart.legacy(core.String)),
    calcDate: dart.fieldType(dart.legacy(date$.Date))
  }));
  var _fillPages$ = dart.privateName(print_daily_hours, "_fillPages");
  var help$8 = dart.privateName(print_daily_hours, "PrintDailyHours.help");
  var id$13 = dart.privateName(print_daily_hours, "PrintDailyHours.id");
  var idx$10 = dart.privateName(print_daily_hours, "PrintDailyHours.idx");
  var startHour = dart.privateName(print_daily_hours, "PrintDailyHours.startHour");
  var params$11 = dart.privateName(print_daily_hours, "PrintDailyHours.params");
  print_daily_hours.PrintDailyHours = class PrintDailyHours extends base_print.BasePrint {
    get help() {
      return this[help$8];
    }
    set help(value) {
      this[help$8] = value;
    }
    get id() {
      return this[id$13];
    }
    set id(value) {
      this[id$13] = value;
    }
    get idx() {
      return this[idx$10];
    }
    set idx(value) {
      this[idx$10] = value;
    }
    get startHour() {
      return this[startHour];
    }
    set startHour(value) {
      this[startHour] = value;
    }
    get params() {
      return this[params$11];
    }
    set params(value) {
      this[params$11] = value;
    }
    extractParams() {
      this.startHour = this.params[$_get](0).intValue;
    }
    get estimatePageCount() {
      let t35, t35$, t35$0;
      let count = (t35$0 = (t35$ = (t35 = this.g, t35 == null ? null : t35.period), t35$ == null ? null : t35$.dayCount), t35$0 == null ? 0 : t35$0);
      count = (dart.notNull(count) / 30)[$ceil]();
      return new (IdentityMapOfStringL$ObjectL()).from(["count", count, "isEstimated", false]);
    }
    get title() {
      return intl.Intl.message("Tagesstunden");
    }
    set title(value) {
      super.title = value;
    }
    get isPortrait() {
      return false;
    }
    get scale() {
      return 1.0;
    }
    set scale(value) {
      super.scale = value;
    }
    get footerText() {
      return this.footerTextDayTimes;
    }
    fillRow(row, f, firstCol, day, style) {
      let t35;
      let wid = this.cm((dart.notNull(this.width) - 4.4 - 2.1) / 24 - 0.33);
      let hour = (t35 = this.startHour, t35 == null ? 0 : t35);
      let orgDay = day;
      if (hour !== 0 && day.prevDay != null) day = DayDataL().as(day.prevDay);
      for (let i = 0; i < 24; i = i + 1) {
        let time = new core.DateTime.new(0, 1, 1, hour, 0);
        let gluc = 0.0;
        let count = 0;
        if (hour === 0) {
          this.addTableRow(true, this.cm(2.0), row, new (IdentityMapOfStringL$StringL()).from(["text", this.msgDate, "style", "total", "alignment", "center"]), new (IdentityMapOfStringL$StringL()).from(["text", firstCol, "style", "total", "alignment", "center"]));
          day = orgDay;
        }
        for (let entry of day.entries) {
          if (dart.notNull(entry.gluc) > 0 && entry.time.hour == hour) {
            count = count + 1;
            gluc = dart.notNull(gluc) + dart.notNull(entry.gluc);
          }
        }
        if (count > 0) gluc = dart.notNull(gluc) / count;
        if (gluc === 0) gluc = null;
        this.addTableRow(true, wid, row, new (IdentityMapOfStringL$StringL()).from(["text", this.fmtTime(time), "style", this.styleForTime(time), "alignment", "center"]), new (IdentityMapOfStringL$StringL()).from(["text", dart.str(this.g.glucFromData(gluc)), "style", style, "alignment", "right", "fillColor", this.colForGluc(day, gluc)]));
        hour = dart.notNull(hour) + 1;
        if (hour === 24) hour = 0;
      }
      this.tableHeadFilled = true;
    }
    percentileFor(value) {
      if (value === -1) return "";
      return this.g.glucFromData(value, 1.0);
    }
    getTable(widths, body) {
      let ret = new (IdentityMapOfStringL$ObjectL()).from(["columns", JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$ObjectL()).from(["margin", JSArrayOfdoubleL().of([this.cm(2.2), this.cmy(dart.notNull(this.yorg) - 0.5), this.cm(2.2), this.cmy(0.0)]), "width", this.cm(this.width), "fontSize", this.fs(7.0), "table", new (IdentityMapOfStringL$dynamic()).from(["widths", widths, "body", body])])]), "pageBreak", ""]);
      return ret;
    }
    fillPages(pages) {
      let oldLength = pages[$length];
      this[_fillPages$](pages);
      if (dart.test(this.g.showBothUnits)) {
        this.g.glucMGDLIdx = 1;
        this[_fillPages$](pages);
        this.g.glucMGDLIdx = 2;
      }
      if (dart.test(this.repData.isForThumbs) && dart.notNull(pages[$length]) - dart.notNull(oldLength) > 1) pages[$removeRange](dart.notNull(oldLength) + 1, pages[$length]);
    }
    [_fillPages$](pages) {
      this.tableHeadFilled = false;
      this.tableHeadLine = [];
      this.tableWidths = [];
      this.titleInfo = this.titleInfoBegEnd();
      let f = 3.3;
      let body = [];
      f = f / 100;
      let prevProfile = null;
      let lineCount = 0;
      let page = [];
      let totalDay = new json_data.DayData.new(null, new json_data.ProfileGlucData.new(new json_data.ProfileStoreData.new("Intern")));
      totalDay.basalData.targetHigh = 0.0;
      totalDay.basalData.targetLow = 1000.0;
      let totalDays = 0;
      for (let day of this.repData.data.days) {
        day.init();
        if (day.entryCountValid === 0) continue;
        totalDays = totalDays + 1;
        totalDay.entries[$addAll](day.entries);
        totalDay.bloody[$addAll](day.bloody);
        totalDay.treatments[$addAll](day.treatments);
        totalDay.basalData.targetHigh = math.max(doubleL(), totalDay.basalData.targetHigh, day.basalData.targetHigh);
        totalDay.basalData.targetLow = math.min(doubleL(), totalDay.basalData.targetLow, day.basalData.targetLow);
        let row = [];
        this.fillRow(row, f, this.fmtDate(day.date, null, true), day, "row");
        let profile = this.repData.profile(new core.DateTime.new(day.date.year, day.date.month, day.date.day));
        if (prevProfile == null || profile.targetLow != prevProfile.targetLow || profile.targetHigh != prevProfile.targetHigh) {
          body[$add](this.tableHeadLine);
          lineCount = lineCount + 2;
        }
        prevProfile = profile;
        body[$add](row);
        lineCount = lineCount + 1;
        if (lineCount === 33) {
          page[$add](this.headerFooter());
          page[$add](this.getTable(this.tableWidths, body));
          lineCount = 0;
          pages[$add](new base_print.Page.new(this.isPortrait, page));
          page = [];
          body = [];
          prevProfile = null;
        }
      }
      if (prevProfile != null) {
        page[$add](this.headerFooter());
        page[$add](this.getTable(this.tableWidths, body));
        pages[$add](new base_print.Page.new(this.isPortrait, page));
      } else {
        let test = MapL().as(pages[$last].content[$last]);
        if (dart.test(body[$isNotEmpty])) dart.dsend(dart.dsend(dart.dsend(dart.dload(test[$_get]("columns"), 'last'), '_get', ["table"]), '_get', ["body"]), 'add', [body[$last]]);
      }
    }
  };
  (print_daily_hours.PrintDailyHours.new = function() {
    this[help$8] = intl.Intl.message("Dieses Formular zeigt eine Übersicht über die \nStunden der Tage des ausgewählten Zeitraums an. Die angezeigten Werte sind die\nMittelwerte der innerhalb der entsprechenden Stunde gemessenen Werte. Sie\nwerden anhand des ausgewählten Zielbereichs eingefärbt. In den Formularoptionen\nkann man die Startstunde festlegen. Die Datumsspalte befindet sich immer links\nvon 0 Uhr und zeigt an, wo ein neuer Tag beginnt.", {desc: "help for dayhours"});
    this[id$13] = "dayhours";
    this[idx$10] = "13";
    this[startHour] = 0;
    this[params$11] = JSArrayOfParamInfoL().of([new base_print.ParamInfo.new(0, print_daily_hours.PrintDailyHours.msgStartHour, {list: JSArrayOfStringL().of(["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23"])})]);
    print_daily_hours.PrintDailyHours.__proto__.new.call(this);
    this.init();
  }).prototype = print_daily_hours.PrintDailyHours.prototype;
  dart.addTypeTests(print_daily_hours.PrintDailyHours);
  dart.addTypeCaches(print_daily_hours.PrintDailyHours);
  dart.setMethodSignature(print_daily_hours.PrintDailyHours, () => ({
    __proto__: dart.getMethods(print_daily_hours.PrintDailyHours.__proto__),
    fillRow: dart.fnType(dart.void, [dart.dynamic, dart.legacy(core.double), dart.legacy(core.String), dart.legacy(json_data.DayData), dart.legacy(core.String)]),
    percentileFor: dart.fnType(dart.legacy(core.String), [dart.legacy(core.double)]),
    fillPages: dart.fnType(dart.void, [dart.legacy(core.List$(dart.legacy(base_print.Page)))]),
    [_fillPages$]: dart.fnType(dart.void, [dart.legacy(core.List$(dart.legacy(base_print.Page)))])
  }));
  dart.setGetterSignature(print_daily_hours.PrintDailyHours, () => ({
    __proto__: dart.getGetters(print_daily_hours.PrintDailyHours.__proto__),
    estimatePageCount: dart.dynamic,
    title: dart.legacy(core.String),
    scale: dart.legacy(core.double)
  }));
  dart.setLibraryUri(print_daily_hours.PrintDailyHours, L27);
  dart.setFieldSignature(print_daily_hours.PrintDailyHours, () => ({
    __proto__: dart.getFields(print_daily_hours.PrintDailyHours.__proto__),
    help: dart.fieldType(dart.legacy(core.String)),
    id: dart.fieldType(dart.legacy(core.String)),
    idx: dart.fieldType(dart.legacy(core.String)),
    startHour: dart.fieldType(dart.legacy(core.int)),
    params: dart.fieldType(dart.legacy(core.List$(dart.legacy(base_print.ParamInfo))))
  }));
  dart.defineLazy(print_daily_hours.PrintDailyHours, {
    /*print_daily_hours.PrintDailyHours.msgStartHour*/get msgStartHour() {
      return intl.Intl.message("Startstunde");
    },
    set msgStartHour(_) {}
  }, true);
  var _fontSize = dart.privateName(print_profile, "_fontSize");
  var _fontSizeTables = dart.privateName(print_profile, "_fontSizeTables");
  var _hasFactors = dart.privateName(print_profile, "_hasFactors");
  var help$9 = dart.privateName(print_profile, "PrintProfile.help");
  var compressSameValues = dart.privateName(print_profile, "PrintProfile.compressSameValues");
  var params$12 = dart.privateName(print_profile, "PrintProfile.params");
  var id$14 = dart.privateName(print_profile, "PrintProfile.id");
  var idx$11 = dart.privateName(print_profile, "PrintProfile.idx");
  print_profile.PrintProfile = class PrintProfile extends base_profile.BaseProfile {
    get help() {
      return this[help$9];
    }
    set help(value) {
      this[help$9] = value;
    }
    get compressSameValues() {
      return this[compressSameValues];
    }
    set compressSameValues(value) {
      this[compressSameValues] = value;
    }
    get params() {
      return this[params$12];
    }
    set params(value) {
      this[params$12] = value;
    }
    get id() {
      return this[id$14];
    }
    set id(value) {
      this[id$14] = value;
    }
    get idx() {
      return this[idx$11];
    }
    set idx(value) {
      this[idx$11] = value;
    }
    extractParams() {
      this.compressSameValues = this.params[$_get](0).boolValue;
      this.onlyLast = this.params[$_get](1).boolValue;
    }
    get estimatePageCount() {
      return new (IdentityMapOfStringL$ObjectL()).from(["count", 1, "isEstimated", true]);
    }
    get title() {
      return intl.Intl.message("Profil");
    }
    set title(value) {
      super.title = value;
    }
    static get msgParam1() {
      return intl.Intl.message("Zeilen mit gleichen Werten zusammenfassen");
    }
    static get msgParam2() {
      return intl.Intl.message("Nur letztes Profil ausgeben");
    }
    hasData(src) {
      return src.profiles[$isNotEmpty];
    }
    getFactorBody(page, date, list, msg, opts) {
      let t35;
      let precision = opts && 'precision' in opts ? opts.precision : 1;
      let sum = opts && 'sum' in opts ? opts.sum : null;
      let sumTitle = opts && 'sumTitle' in opts ? opts.sumTitle : null;
      let currPage = 0;
      let pageEntries = 0;
      let pageSize = 27;
      if (dart.notNull(page) * pageSize >= dart.notNull(list[$length])) {
        return JSArrayOfListLOfMapLOfStringL$ObjectL().of([JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$ObjectL()).from(["text", "", "style", "infotitle", "fontSize", this.fs(this[_fontSize])]), new (IdentityMapOfStringL$ObjectL()).from(["text", "", "style", "infodata", "fontSize", this.fs(this[_fontSize])])])]);
      }
      let ret = [];
      let startTime = null;
      if (currPage === page && sum != null && sumTitle != null) {
        dart.dsend(ret, 'add', [JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$ObjectL()).from(["text", sumTitle, "style", "infotitle", "fontSize", this.fs(this[_fontSize]), "bold", true]), new (IdentityMapOfStringL$ObjectL()).from(["text", this.g.fmtNumber(sum, precision, 0), "style", "infodata", "fontSize", this.fs(this[_fontSize]), "bold", true])])]);
        this[_hasFactors] = true;
      }
      for (let i = 0; i < dart.notNull(list[$length]); i = i + 1) {
        let entry = list[$_get](i);
        let endTime = new core.DateTime.new(date.year, date.month, date.day, 23, 59);
        startTime == null ? startTime = entry.time(date) : null;
        if (i < dart.notNull(list[$length]) - 1) {
          endTime = list[$_get](i + 1).time(date);
          if (dart.test(this.compressSameValues)) {
            if (entry.forceText != null) {
              if (entry.forceText == list[$_get](i + 1).forceText) continue;
            } else if (entry.value == list[$_get](i + 1).value) {
              continue;
            }
          }
        }
        let showValue = true;
        if (showValue && currPage === page) {
          dart.dsend(ret, 'add', [JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$dynamic()).from(["text", msg(this.fmtTime(startTime, {withUnit: true}), this.fmtTime(endTime, {withUnit: true})), "style", "infotitle", "fontSize", this.fs(this[_fontSize])]), new (IdentityMapOfStringL$ObjectL()).from(["text", (t35 = entry.forceText, t35 == null ? this.g.fmtNumber(entry.value, precision, 0) : t35), "style", "infodata", "fontSize", this.fs(this[_fontSize])])])]);
          this[_hasFactors] = true;
        }
        pageEntries = pageEntries + 1;
        if (pageEntries >= pageSize) {
          currPage = currPage + 1;
          pageEntries = 0;
        }
        startTime = null;
      }
      if (dart.equals(dart.dload(ret, 'length'), 0)) dart.dsend(ret, 'add', [[]]);
      return ret;
    }
    getPage(page, profile, calc) {
      this[_fontSize] = this[_fontSizeTables];
      this.subtitle = profile.store.name;
      this.titleInfo = this.msgValidFrom(this.fmtDateTime(profile.store.startDate));
      let tableWidths = JSArrayOfdoubleL().of([this.cm(2.6), this.cm(6.0), this.cm(6.1), this.cm(1.0), this.cm(1.8)]);
      let tableBody = JSArrayOfListLOfMapLOfStringL$ObjectL().of([JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$ObjectL()).from(["text", this.msgTimezone, "style", "infotitle", "alignment", "right", "fontSize", this.fs(this[_fontSize])]), new (IdentityMapOfStringL$ObjectL()).from(["text", profile.store.timezone.name, "style", "infodata", "alignment", "left", "fontSize", this.fs(this[_fontSize])]), new (IdentityMapOfStringL$ObjectL()).from(["text", this.msgDIA, "style", "infotitle", "alignment", "right", "fontSize", this.fs(this[_fontSize])]), new (IdentityMapOfStringL$ObjectL()).from(["text", this.g.fmtNumber(profile.store.dia, 2, 0), "style", "infodata", "fontSize", this.fs(this[_fontSize])]), new (IdentityMapOfStringL$ObjectL()).from(["text", this.msgDIAUnit, "style", "infounit", "fontSize", this.fs(this[_fontSize])])]), JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$ObjectL()).from(["text", "", "style", "infotitle", "alignment", "right", "fontSize", this.fs(this[_fontSize])]), new (IdentityMapOfStringL$ObjectL()).from(["text", "", "style", "infodata", "alignment", "left", "fontSize", this.fs(this[_fontSize])]), new (IdentityMapOfStringL$ObjectL()).from(["text", this.msgKHA, "style", "infotitle", "alignment", "right", "fontSize", this.fs(this[_fontSize])]), new (IdentityMapOfStringL$ObjectL()).from(["text", this.g.fmtNumber(profile.store.carbsHr, 0, 0), "style", "infodata", "fontSize", this.fs(this[_fontSize])]), new (IdentityMapOfStringL$ObjectL()).from(["text", this.msgKHAUnit, "style", "infounit", "fontSize", this.fs(this[_fontSize])])])]);
      this[_hasFactors] = false;
      let icrIsfBody = [];
      let date = this.g.date(this.profStartTime);
      let bodyICR = this.getFactorBody(page, date, profile.store.listCarbratio, dart.bind(this, 'msgFactorEntry'), {sum: dart.notNull(profile.store.icrSum) / 24.0, sumTitle: this.msgICRSum});
      let listISF = JSArrayOfProfileEntryDataL().of([]);
      for (let entry of profile.store.listSens) {
        listISF[$add](entry.copy);
        listISF[$last].forceText = this.fmtGluc(this.g.glucForSavedUnitValue(entry.value));
      }
      let bodyISF = this.getFactorBody(page, date, listISF, dart.bind(this, 'msgFactorEntry'), {precision: dart.test(this.g.glucMGDL) ? 0 : 1, sum: dart.notNull(this.g.glucForSavedUnitValue(profile.store.isfSum)) / 24.0, sumTitle: this.msgISFSum});
      let basalTargetBody = [];
      let bodyBasal = this.getFactorBody(page, date, profile.store.listBasal, dart.bind(this, 'msgFactorEntry'), {precision: this.g.basalPrecision, sum: profile.store.ieBasalSum, sumTitle: this.msgBasalSum});
      let listTarget = JSArrayOfProfileEntryDataL().of([]);
      if (profile.store.listTargetHigh[$length] == profile.store.listTargetLow[$length]) {
        for (let i = 0; i < dart.notNull(profile.store.listTargetHigh[$length]); i = i + 1) {
          let high = profile.store.listTargetHigh[$_get](i);
          let low = profile.store.listTargetLow[$_get](i);
          if (!dart.equals(high.time(date), low.time(date))) continue;
          let entry = new json_data.ProfileEntryData.new(profile.store.timezone, high.time(date));
          entry.forceText = dart.str(this.fmtGluc(low.value)) + " - " + dart.str(this.fmtGluc(high.value));
          listTarget[$add](entry);
        }
      }
      let bodyTarget = this.getFactorBody(page, date, listTarget, dart.bind(this, 'msgFactorEntry'));
      if (!dart.test(this[_hasFactors])) return null;
      dart.dsend(basalTargetBody, 'add', [JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$ObjectL()).from(["text", this.msgBasalProfile, "fontSize", this.fs(8.0), "color", "#606060", "alignment", "center"]), new (IdentityMapOfStringL$ObjectL()).from(["text", this.msgTarget(StringL().as(dart.dsend(this.g.getGlucInfo(), '_get', ["unit"]))), "fontSize", this.fs(8.0), "color", "#606060", "alignment", "center"])])]);
      this[_fontSize] = 9.0;
      dart.dsend(icrIsfBody, 'add', [JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$ObjectL()).from(["text", this.msgICR, "fontSize", this.fs(8.0), "color", "#606060", "alignment", "center"]), new (IdentityMapOfStringL$ObjectL()).from(["text", this.msgISF(StringL().as(dart.dsend(this.g.getGlucInfo(), '_get', ["unit"]))), "fontSize", this.fs(8.0), "color", "#606060", "alignment", "center"])])]);
      let tmp = [];
      if (dart.dtest(dart.dsend(dart.dload(bodyICR, 'length'), '>', [0]))) {
        dart.dsend(tmp, 'add', [new (IdentityMapOfStringL$ObjectL()).from(["margin", JSArrayOfdoubleL().of([this.cm(1.0), this.cm(0)]), "layout", "noBorders", "table", new (IdentityMapOfStringL$dynamic()).from(["headerRows", 0, "widths", JSArrayOfdoubleL().of([this.cm(3.8), this.cm(1.0)]), "body", bodyICR])])]);
      }
      if (dart.dtest(dart.dsend(dart.dload(bodyISF, 'length'), '>', [0]))) {
        dart.dsend(tmp, 'add', [new (IdentityMapOfStringL$ObjectL()).from(["margin", JSArrayOfdoubleL().of([this.cm(1.0), this.cm(0)]), "layout", "noBorders", "table", new (IdentityMapOfStringL$dynamic()).from(["headerRows", 0, "widths", JSArrayOfdoubleL().of([this.cm(3.9), this.cm(1.2)]), "body", bodyISF])])]);
      }
      dart.dsend(icrIsfBody, 'add', [tmp]);
      tmp = [];
      if (dart.dtest(dart.dsend(dart.dload(bodyBasal, 'length'), '>', [0]))) {
        dart.dsend(tmp, 'add', [new (IdentityMapOfStringL$ObjectL()).from(["margin", JSArrayOfdoubleL().of([this.cm(1.0), this.cm(0)]), "layout", "noBorders", "table", new (IdentityMapOfStringL$dynamic()).from(["headerRows", 0, "widths", JSArrayOfdoubleL().of([this.cm(3.8), this.cm(1.0)]), "body", bodyBasal])])]);
      }
      if (dart.dtest(dart.dsend(dart.dload(bodyTarget, 'length'), '>', [0]))) {
        dart.dsend(tmp, 'add', [new (IdentityMapOfStringL$ObjectL()).from(["margin", JSArrayOfdoubleL().of([this.cm(0.5), this.cm(0)]), "layout", "noBorders", "table", new (IdentityMapOfStringL$dynamic()).from(["headerRows", 0, "widths", JSArrayOfdoubleL().of([this.cm(3.7), this.cm(2.1)]), "body", bodyTarget])])]);
      }
      dart.dsend(basalTargetBody, 'add', [tmp]);
      let colWidth = (dart.notNull(this.width) - 4.4) / 4;
      let ret = JSArrayOfObjectL().of([this.headerFooter(), new (IdentityMapOfStringL$ObjectL()).from(["margin", JSArrayOfdoubleL().of([this.cm(1.6), this.cm(dart.notNull(this.yorg) - 0.5), this.cm(0), this.cm(0)]), "layout", "noBorders", "table", new (IdentityMapOfStringL$dynamic()).from(["headerRows", 0, "widths", tableWidths, "body", tableBody])]), new (IdentityMapOfStringL$ObjectL()).from(["margin", JSArrayOfdoubleL().of([this.cm(1.6), this.cm(0.2), this.cm(0), this.cm(0)]), "layout", "noBorders", "table", new (IdentityMapOfStringL$ObjectL()).from(["headerRows", 0, "widths", JSArrayOfdoubleL().of([this.cm(2 * colWidth), this.cm(2 * colWidth)]), "body", JSArrayOfListLOfMapLOfStringL$ObjectL().of([JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$ObjectL()).from(["margin", JSArrayOfdoubleL().of([this.cm(0), this.cm(0), this.cm(0), this.cm(0)]), "layout", "noBorders", "table", new (IdentityMapOfStringL$dynamic()).from(["headerRows", 1, "widths", JSArrayOfdoubleL().of([this.cm(colWidth), this.cm(colWidth)]), "body", icrIsfBody])]), new (IdentityMapOfStringL$ObjectL()).from(["margin", JSArrayOfdoubleL().of([this.cm(0), this.cm(0), this.cm(0), this.cm(0)]), "layout", "noBorders", "table", new (IdentityMapOfStringL$dynamic()).from(["headerRows", 1, "widths", JSArrayOfdoubleL().of([this.cm(colWidth), this.cm(colWidth)]), "body", basalTargetBody])])])])])])]);
      return new base_print.Page.new(this.isPortrait, ret);
    }
  };
  (print_profile.PrintProfile.new = function() {
    this[help$9] = intl.Intl.message("Dieses Formular zeigt das Profil an. Es werden normalerweise alle Profile des ausgewählten\nZeitraums ausgegeben. Wenn sich in dem Zeitraum das Profil geändert hat, wird ein neues Blatt erzeugt.\n\nEs gibt aber eine Option, welche nur das letzte Profil des Zeitraums ausgibt. Ausserdem gibt es eine Option,\nmit der gleiche Zeilen zusammengefasst werden. Das führt zu einem kürzeren Profil, wenn mehrere Zeiten nacheinander\ndie gleichen Werte beinhalten.", {desc: "help for profile"});
    this[compressSameValues] = null;
    this[params$12] = JSArrayOfParamInfoL().of([new base_print.ParamInfo.new(0, print_profile.PrintProfile.msgParam1, {boolValue: true}), new base_print.ParamInfo.new(1, print_profile.PrintProfile.msgParam2, {boolValue: false})]);
    this[id$14] = "profile";
    this[idx$11] = "02";
    this[_fontSize] = 10.0;
    this[_fontSizeTables] = 8.0;
    this[_hasFactors] = false;
    print_profile.PrintProfile.__proto__.new.call(this);
    ;
  }).prototype = print_profile.PrintProfile.prototype;
  dart.addTypeTests(print_profile.PrintProfile);
  dart.addTypeCaches(print_profile.PrintProfile);
  dart.setMethodSignature(print_profile.PrintProfile, () => ({
    __proto__: dart.getMethods(print_profile.PrintProfile.__proto__),
    getFactorBody: dart.fnType(dart.dynamic, [dart.legacy(core.int), dart.legacy(date$.Date), dart.legacy(core.List$(dart.legacy(json_data.ProfileEntryData))), dart.legacy(dart.fnType(dart.dynamic, [dart.legacy(core.String), dart.legacy(core.String)]))], {precision: dart.legacy(core.int), sum: dart.legacy(core.double), sumTitle: dart.legacy(core.String)}, {}),
    getPage: dart.fnType(dart.legacy(base_print.Page), [dart.legacy(core.int), dart.legacy(json_data.ProfileGlucData), dart.legacy(base_profile.CalcData)])
  }));
  dart.setGetterSignature(print_profile.PrintProfile, () => ({
    __proto__: dart.getGetters(print_profile.PrintProfile.__proto__),
    estimatePageCount: dart.dynamic,
    title: dart.legacy(core.String)
  }));
  dart.setLibraryUri(print_profile.PrintProfile, L28);
  dart.setFieldSignature(print_profile.PrintProfile, () => ({
    __proto__: dart.getFields(print_profile.PrintProfile.__proto__),
    help: dart.fieldType(dart.legacy(core.String)),
    compressSameValues: dart.fieldType(dart.legacy(core.bool)),
    params: dart.fieldType(dart.legacy(core.List$(dart.legacy(base_print.ParamInfo)))),
    id: dart.fieldType(dart.legacy(core.String)),
    idx: dart.fieldType(dart.legacy(core.String)),
    [_fontSize]: dart.fieldType(dart.legacy(core.double)),
    [_fontSizeTables]: dart.finalFieldType(dart.legacy(core.double)),
    [_hasFactors]: dart.fieldType(dart.legacy(core.bool))
  }));
  var _trigger$7 = dart.privateName(shortcutedit_component, "_trigger");
  var g$10 = dart.privateName(shortcutedit_component, "ShortcutEditComponent.g");
  var confirmationIdx = dart.privateName(shortcutedit_component, "ShortcutEditComponent.confirmationIdx");
  shortcutedit_component.ShortcutEditComponent = class ShortcutEditComponent extends core.Object {
    get g() {
      return this[g$10];
    }
    set g(value) {
      this[g$10] = value;
    }
    get confirmationIdx() {
      return this[confirmationIdx];
    }
    set confirmationIdx(value) {
      this[confirmationIdx] = value;
    }
    get trigger() {
      return this[_trigger$7].stream;
    }
    static get msgName() {
      return intl.Intl.message("Bezeichnung");
    }
    get msgTitle() {
      return dart.notNull(this.g.currShortcutIdx) < 0 ? intl.Intl.message("Shortcut anlegen") : intl.Intl.message("Shortcut ändern");
    }
    msgFormsText(count) {
      return intl.Intl.plural(intL().as(count), {zero: "", one: "1 Formular", other: dart.str(count) + " Formulare", args: JSArrayOfObjectL().of([count]), name: "msgFormsText"});
    }
    ngOnInit() {
      return async.async(core.Null, function* ngOnInit() {
      });
    }
    ngAfterViewInit() {
      FutureOfNullN().delayed(new core.Duration.new({milliseconds: 100}), dart.fn(() => {
        html.querySelector("#name").focus();
      }, VoidToNullN()));
    }
    fire(type) {
      let detail = 0;
      switch (type) {
        case "ok":
        {
          break;
        }
        case "confirm":
        {
          switch (this.confirmationIdx) {
            case 0:
            {
              type = "remove";
              break;
            }
            case 1:
            {
              this.g.currShortcut.periodData = dart.toString(this.g.period);
              this.g.currShortcut.periodText = this.g.period.display;
              this.confirmationIdx = -1;
              return;
            }
            case 2:
            {
              this.g.currShortcut.loadCurrentForms();
              this.confirmationIdx = -1;
              return;
            }
            case 3:
            {
              this.g.currShortcut.glucMGDLIdx = this.g.glucMGDLIdx;
              this.confirmationIdx = -1;
              return;
            }
          }
        }
      }
      this[_trigger$7].add(html.UIEvent.new(type, {detail: detail}));
    }
  };
  (shortcutedit_component.ShortcutEditComponent.new = function() {
    this[g$10] = globals.Globals.new();
    this[_trigger$7] = StreamControllerOfUIEventL().broadcast({sync: true});
    this[confirmationIdx] = -1;
    ;
  }).prototype = shortcutedit_component.ShortcutEditComponent.prototype;
  dart.addTypeTests(shortcutedit_component.ShortcutEditComponent);
  dart.addTypeCaches(shortcutedit_component.ShortcutEditComponent);
  shortcutedit_component.ShortcutEditComponent[dart.implements] = () => [lifecycle_hooks.OnInit, lifecycle_hooks.AfterViewInit];
  dart.setMethodSignature(shortcutedit_component.ShortcutEditComponent, () => ({
    __proto__: dart.getMethods(shortcutedit_component.ShortcutEditComponent.__proto__),
    msgFormsText: dart.fnType(dart.legacy(core.String), [dart.dynamic]),
    ngOnInit: dart.fnType(dart.legacy(async.Future$(core.Null)), []),
    ngAfterViewInit: dart.fnType(dart.void, []),
    fire: dart.fnType(dart.void, [dart.legacy(core.String)])
  }));
  dart.setGetterSignature(shortcutedit_component.ShortcutEditComponent, () => ({
    __proto__: dart.getGetters(shortcutedit_component.ShortcutEditComponent.__proto__),
    trigger: dart.legacy(async.Stream$(dart.legacy(html.UIEvent))),
    msgTitle: dart.legacy(core.String)
  }));
  dart.setLibraryUri(shortcutedit_component.ShortcutEditComponent, L29);
  dart.setFieldSignature(shortcutedit_component.ShortcutEditComponent, () => ({
    __proto__: dart.getFields(shortcutedit_component.ShortcutEditComponent.__proto__),
    g: dart.fieldType(dart.legacy(globals.Globals)),
    [_trigger$7]: dart.finalFieldType(dart.legacy(async.StreamController$(dart.legacy(html.UIEvent)))),
    confirmationIdx: dart.fieldType(dart.legacy(core.int))
  }));
  var _entries = dart.privateName(print_percentile, "_entries");
  var time$0 = dart.privateName(print_percentile, "PercentileData.time");
  print_percentile.PercentileData = class PercentileData extends core.Object {
    get time() {
      return this[time$0];
    }
    set time(value) {
      this[time$0] = value;
    }
    add(entry) {
      let clone = entry.copy;
      clone.time = this.time;
      this[_entries][$add](clone);
    }
    get max() {
      let ret = -1.0;
      for (let entry of this[_entries]) {
        if (dart.notNull(entry.gluc) > 0) ret = math.max(doubleL(), entry.gluc, ret);
      }
      return ret;
    }
    get min() {
      let ret = 10000.0;
      for (let entry of this[_entries]) {
        if (dart.notNull(entry.gluc) > 0) ret = math.min(doubleL(), entry.gluc, ret);
      }
      return ret;
    }
    percentile(value) {
      return globals.Globals.percentile(this[_entries], value);
    }
  };
  (print_percentile.PercentileData.new = function(time) {
    this[_entries] = JSArrayOfEntryDataL().of([]);
    this[time$0] = time;
    ;
  }).prototype = print_percentile.PercentileData.prototype;
  dart.addTypeTests(print_percentile.PercentileData);
  dart.addTypeCaches(print_percentile.PercentileData);
  dart.setMethodSignature(print_percentile.PercentileData, () => ({
    __proto__: dart.getMethods(print_percentile.PercentileData.__proto__),
    add: dart.fnType(dart.void, [dart.legacy(json_data.EntryData)]),
    percentile: dart.fnType(dart.legacy(core.double), [dart.legacy(core.int)])
  }));
  dart.setGetterSignature(print_percentile.PercentileData, () => ({
    __proto__: dart.getGetters(print_percentile.PercentileData.__proto__),
    max: dart.legacy(core.double),
    min: dart.legacy(core.double)
  }));
  dart.setLibraryUri(print_percentile.PercentileData, L30);
  dart.setFieldSignature(print_percentile.PercentileData, () => ({
    __proto__: dart.getFields(print_percentile.PercentileData.__proto__),
    time: dart.fieldType(dart.legacy(core.DateTime)),
    [_entries]: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(json_data.EntryData))))
  }));
  var _gridHeight = dart.privateName(print_percentile, "_gridHeight");
  var _basalHeight = dart.privateName(print_percentile, "_basalHeight");
  var _basalWidth = dart.privateName(print_percentile, "_basalWidth");
  var _profMax = dart.privateName(print_percentile, "_profMax");
  var _colWidth$ = dart.privateName(print_percentile, "_colWidth");
  var _title$ = dart.privateName(print_percentile, "_title");
  var help$10 = dart.privateName(print_percentile, "PrintPercentile.help");
  var id$15 = dart.privateName(print_percentile, "PrintPercentile.id");
  var idx$12 = dart.privateName(print_percentile, "PrintPercentile.idx");
  var showGPD = dart.privateName(print_percentile, "PrintPercentile.showGPD");
  var showTable = dart.privateName(print_percentile, "PrintPercentile.showTable");
  var showCol1090 = dart.privateName(print_percentile, "PrintPercentile.showCol1090");
  var showBasal$ = dart.privateName(print_percentile, "PrintPercentile.showBasal");
  var params$13 = dart.privateName(print_percentile, "PrintPercentile.params");
  var isPortrait = dart.privateName(print_percentile, "PrintPercentile.isPortrait");
  var lineWidth$2 = dart.privateName(print_percentile, "PrintPercentile.lineWidth");
  var colBasal = dart.privateName(print_percentile, "PrintPercentile.colBasal");
  var glucMax$1 = dart.privateName(print_percentile, "PrintPercentile.glucMax");
  print_percentile.PrintPercentile = class PrintPercentile extends base_print.BasePrint {
    get help() {
      return this[help$10];
    }
    set help(value) {
      this[help$10] = value;
    }
    get id() {
      return this[id$15];
    }
    set id(value) {
      this[id$15] = value;
    }
    get idx() {
      return this[idx$12];
    }
    set idx(value) {
      this[idx$12] = value;
    }
    get showGPD() {
      return this[showGPD];
    }
    set showGPD(value) {
      this[showGPD] = value;
    }
    get showTable() {
      return this[showTable];
    }
    set showTable(value) {
      this[showTable] = value;
    }
    get showCol1090() {
      return this[showCol1090];
    }
    set showCol1090(value) {
      this[showCol1090] = value;
    }
    get showBasal() {
      return this[showBasal$];
    }
    set showBasal(value) {
      this[showBasal$] = value;
    }
    get params() {
      return this[params$13];
    }
    set params(value) {
      this[params$13] = value;
    }
    get isPortrait() {
      return this[isPortrait];
    }
    set isPortrait(value) {
      this[isPortrait] = value;
    }
    get lineWidth() {
      return this[lineWidth$2];
    }
    set lineWidth(value) {
      this[lineWidth$2] = value;
    }
    get colBasal() {
      return this[colBasal];
    }
    set colBasal(value) {
      this[colBasal] = value;
    }
    get glucMax() {
      return this[glucMax$1];
    }
    set glucMax(value) {
      this[glucMax$1] = value;
    }
    static get msgParam1() {
      return intl.Intl.message("Basalrate anzeigen");
    }
    static msgBasalInfo1(unit) {
      return intl.Intl.message("Diese Basalrate war am " + dart.str(unit) + " aktiv.", {args: JSArrayOfObjectL().of([unit]), name: "msgBasalInfo1"});
    }
    extractParams() {
      this.showGPD = this.params[$_get](0).intValue === 0 || this.params[$_get](0).intValue === 2;
      this.showTable = this.params[$_get](0).intValue === 1 || this.params[$_get](0).intValue === 2;
      this.showCol1090 = this.params[$_get](1).boolValue;
      this.showBasal = this.params[$_get](2).boolValue;
      this.pagesPerSheet = 1;
    }
    get estimatePageCount() {
      return new (IdentityMapOfStringL$ObjectL()).from(["count", dart.test(this.showGPD) && dart.test(this.showTable) ? 2 : 1, "isEstimated", false]);
    }
    get backsuffix() {
      let t35;
      let ret = (t35 = this.params[$_get](0).intValue, t35 == null ? 0 : t35);
      if (dart.test(this.showBasal) && ret === 0) ret = 3;
      if (dart.test(this.showBasal) && ret === 2) ret = 4;
      return dart.str(ret);
    }
    get [_title$]() {
      return dart.test(this.isPortrait) ? base_print.BasePrint.titleGPDShort : base_print.BasePrint.titleGPD;
    }
    static get msgCol1090() {
      return intl.Intl.message("Spalten für 10% und 90% anzeigen");
    }
    get gridHeight() {
      return this[_gridHeight];
    }
    get gridWidth() {
      return dart.notNull(this.width) - 7.0;
    }
    glucY(value) {
      return dart.notNull(this.gridHeight) / dart.notNull(this.glucMax) * (dart.notNull(this.glucMax) - dart.notNull(value));
    }
    glucX(time) {
      return dart.notNull(this.gridWidth) / 1440 * (dart.notNull(time.hour) * 60 + dart.notNull(time.minute));
    }
    fillPages(pages) {
      return async.async(dart.void, (function* fillPages() {
        this.titleInfo = this.titleInfoBegEnd();
        if (dart.test(this.showGPD)) pages[$add](this.getPage());
        if (dart.test(this.showTable)) pages[$add](this.getTablePage());
        if (dart.test(this.g.showBothUnits)) {
          this.g.glucMGDLIdx = 1;
          if (dart.test(this.showGPD)) pages[$add](this.getPage());
          if (dart.test(this.showTable)) pages[$add](this.getTablePage());
          this.g.glucMGDLIdx = 2;
        }
      }).bind(this));
    }
    fillRow(row, f, hour, list, style) {
      {
        let firstCol = dart.str(this.g.fmtNumber(hour, 0, 2)) + ":00";
        let day = new json_data.DayData.new(null, this.repData.profile(new core.DateTime.new(this.repData.begDate.year, this.repData.begDate.month, this.repData.begDate.day)));
        day.entries[$addAll](list);
        day.init();
        let time = new core.DateTime.new(0, 1, 1, hour);
        let perc = new print_percentile.PercentileData.new(time);
        for (let entry of list) {
          if (dart.notNull(entry.gluc) < 0) continue;
          perc.add(entry);
        }
        let wid = 2.0 / 100.0;
        let colcount = dart.test(this.showCol1090) ? 10 : 8;
        let f = this.fs(dart.test(this.showCol1090) ? 7.0 : 10.0);
        let w = (dart.notNull(this.width) - 4.0 - 2.0 - wid * 100) / colcount - 0.45;
        let h = dart.test(this.showCol1090) ? 0.35 : 0.5;
        this.addTableRow(true, this.cm(2.0), row, new (IdentityMapOfStringL$ObjectL()).from(["text", this.msgTime, "style", "total", "alignment", "center", "fontSize", f]), new (IdentityMapOfStringL$ObjectL()).from(["text", firstCol, "style", "total", "alignment", "center", "fontSize", f]));
        let canvas = JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$ObjectL()).from(["type", "rect", "color", this.colLow, "x", this.cm(0), "y", this.cm(0), "w", this.cm(dart.notNull(day.lowPrz(this.g)) * wid), "h", this.cm(h)]), new (IdentityMapOfStringL$ObjectL()).from(["type", "rect", "color", this.colNorm, "x", this.cm(dart.notNull(day.lowPrz(this.g)) * wid), "y", this.cm(0), "w", this.cm(dart.notNull(day.normPrz(this.g)) * wid), "h", this.cm(h)]), new (IdentityMapOfStringL$ObjectL()).from(["type", "rect", "color", this.colHigh, "x", this.cm((dart.notNull(day.lowPrz(this.g)) + dart.notNull(day.normPrz(this.g))) * wid), "y", this.cm(0), "w", this.cm(dart.notNull(day.highPrz(this.g)) * wid), "h", this.cm(h)])]);
        if (day.entryCountValid === 0) canvas = JSArrayOfMapLOfStringL$ObjectL().of([]);
        this.addTableRow(true, this.cm(wid * 100), row, new (IdentityMapOfStringL$ObjectL()).from(["text", this.msgDistribution, "style", "total", "alignment", "center", "fontSize", f]), new (IdentityMapOfStringL$ObjectL()).from(["style", style, "canvas", canvas]));
        this.addTableRow(true, this.cm(w), row, new (IdentityMapOfStringL$ObjectL()).from(["text", this.msgValues, "style", "total", "alignment", "center", "fontSize", f]), new (IdentityMapOfStringL$ObjectL()).from(["text", dart.str(this.g.fmtNumber(day.entryCountValid, 0)), "style", style, "alignment", "right", "fontSize", f]));
        this.addTableRow(true, this.cm(w), row, new (IdentityMapOfStringL$ObjectL()).from(["text", this.msgAverage, "style", "total", "alignment", "center", "fontSize", f]), new (IdentityMapOfStringL$ObjectL()).from(["text", dart.str(this.g.glucFromData(day.avgGluc, 1.0)), "style", style, "alignment", "right", "fontSize", f]));
        this.addTableRow(true, this.cm(w), row, new (IdentityMapOfStringL$ObjectL()).from(["text", this.msgMin, "style", "total", "alignment", "center", "fontSize", f]), new (IdentityMapOfStringL$ObjectL()).from(["text", dart.str(this.g.glucFromData(day.minText, 1.0)), "style", style, "alignment", "right", "fontSize", f]));
        if (dart.test(this.showCol1090)) {
          this.addTableRow(true, this.cm(w), row, new (IdentityMapOfStringL$ObjectL()).from(["text", this.msg10, "style", "total", "alignment", "center", "fontSize", f]), new (IdentityMapOfStringL$ObjectL()).from(["text", dart.str(this.g.glucFromData(perc.percentile(10), 1.0)), "style", style, "alignment", "right", "fontSize", f]));
        }
        this.addTableRow(true, this.cm(w), row, new (IdentityMapOfStringL$ObjectL()).from(["text", this.msg25, "style", "total", "alignment", "center", "fontSize", f]), new (IdentityMapOfStringL$ObjectL()).from(["text", dart.str(this.g.glucFromData(perc.percentile(25), 1.0)), "style", style, "alignment", "right", "fontSize", f]));
        this.addTableRow(true, this.cm(w), row, new (IdentityMapOfStringL$ObjectL()).from(["text", this.msgMedian, "style", "total", "alignment", "center", "fontSize", f]), new (IdentityMapOfStringL$ObjectL()).from(["text", dart.str(this.g.glucFromData(perc.percentile(50), 1.0)), "style", style, "alignment", "right", "fontSize", f]));
        this.addTableRow(true, this.cm(w), row, new (IdentityMapOfStringL$ObjectL()).from(["text", this.msg75, "style", "total", "alignment", "center", "fontSize", f]), new (IdentityMapOfStringL$ObjectL()).from(["text", dart.str(this.g.glucFromData(perc.percentile(75), 1.0)), "style", style, "alignment", "right", "fontSize", f]));
        if (dart.test(this.showCol1090)) {
          this.addTableRow(true, this.cm(w), row, new (IdentityMapOfStringL$ObjectL()).from(["text", this.msg90, "style", "total", "alignment", "center", "fontSize", f]), new (IdentityMapOfStringL$ObjectL()).from(["text", dart.str(this.g.glucFromData(perc.percentile(90), 1.0)), "style", style, "alignment", "right", "fontSize", f]));
        }
        this.addTableRow(true, this.cm(w), row, new (IdentityMapOfStringL$ObjectL()).from(["text", this.msgMax, "style", "total", "alignment", "center", "fontSize", f]), new (IdentityMapOfStringL$ObjectL()).from(["text", dart.str(this.g.glucFromData(day.maxText, 1.0)), "style", style, "alignment", "right", "fontSize", f]));
        this.addTableRow(true, this.cm(w), row, new (IdentityMapOfStringL$ObjectL()).from(["text", this.msgDeviation, "style", "total", "alignment", "center", "fontSize", f]), new (IdentityMapOfStringL$ObjectL()).from(["text", dart.str(this.g.fmtNumber(day.stdAbw(this.g.glucMGDL), 1)), "style", style, "alignment", "right", "fontSize", f]));
        this.tableHeadFilled = true;
      }
    }
    getTablePage() {
      this.isPortrait = true;
      let body = [];
      let f = 3.3;
      f = f / 100;
      this.tableHeadFilled = false;
      this.tableHeadLine = [];
      this.tableWidths = [];
      this.yorg = dart.notNull(this.yorg) - 0.5;
      for (let i = 0; i < 24; i = i + 1) {
        let list = JSArrayOfEntryDataL().of([]);
        for (let day of this.repData.data.days) {
          let entries = day.entries[$where](dart.fn(e => e.time.hour === i, EntryDataLToboolL()));
          list[$addAll](entries);
        }
        let row = [];
        this.fillRow(row, f, i, list, "row");
        if (dart.test(body[$isEmpty])) body[$add](this.tableHeadLine);
        body[$add](row);
      }
      this.yorg = dart.notNull(this.yorg) + 0.5;
      this.title = base_print.BasePrint.msgHourlyStats;
      this.subtitle = "";
      let hf = this.headerFooter();
      let content = [hf, this.getTable(this.tableWidths, body)];
      let ret = new base_print.Page.new(this.isPortrait, ListL().as(content));
      this.title = base_print.BasePrint.titleGPD;
      this.isPortrait = false;
      return PageL().as(ret);
    }
    getPage() {
      let t35;
      this.isPortrait = this.showBasal;
      this[_gridHeight] = dart.test(this.isPortrait) ? (dart.notNull(this.width) - 7) / (dart.notNull(this.height) - 7) * (dart.notNull(this.width) - 11) : dart.notNull(this.height) - 11.0;
      this.title = this[_title$];
      this.subtitle = dart.test(this.isPortrait) ? base_print.BasePrint.titleGPD : "";
      let xo = this.xorg;
      let yo = this.yorg;
      let data = this.repData.data;
      this.lineWidth = this.cm(0.03);
      let percList = JSArrayOfPercentileDataL().of([]);
      for (let entry of data.entries) {
        if (dart.notNull(entry.gluc) < 0) continue;
        let time = new core.DateTime.new(0, 1, 1, entry.time.hour, entry.time.minute);
        let src = percList[$firstWhere](dart.fn(e => dart.equals(e.time, time), PercentileDataLToboolL()), {orElse: dart.fn(() => {
            percList[$add](new print_percentile.PercentileData.new(time));
            return percList[$last];
          }, VoidToPercentileDataL())});
        src.add(entry);
      }
      percList[$sort](dart.fn((a, b) => a.time.compareTo(b.time), PercentileDataLAndPercentileDataLTointL()));
      this.glucMax = 0.0;
      for (let data of percList) {
        this.glucMax = math.max(doubleL(), data.percentile(90), this.glucMax);
      }
      if (this.g.glucMaxValue != null) this.glucMax = this.g.glucMaxValues[$_get](this.g.ppGlucMaxIdx);
      let vertLines = new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(xo), "y", this.cm(yo)]), "canvas", []]);
      let horzLines = new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(xo), "y", this.cm(yo)]), "canvas", []]);
      let horzLegend = new (IdentityMapOfStringL$ListL()).from(["stack", []]);
      let vertLegend = new (IdentityMapOfStringL$ListL()).from(["stack", []]);
      let vertCvs = ListL().as(vertLines[$_get]("canvas"));
      let horzCvs = ListL().as(horzLines[$_get]("canvas"));
      let horzStack = horzLegend[$_get]("stack");
      let vertStack = vertLegend[$_get]("stack");
      let grid = this.drawGraphicGrid(this.glucMax, this.gridHeight, this.gridWidth, vertCvs, horzCvs, horzStack, vertStack, {horzfs: this.fs(dart.test(this.isPortrait) ? 6.0 : 8.0)});
      if (grid.lineHeight === 0) {
        return new base_print.Page.new(this.isPortrait, [this.headerFooter(), new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(this.xorg), "y", this.cm(this.yorg)]), "text", this.msgMissingData])]);
      }
      this.glucMax = dart.notNull(grid.gridLines) * dart.notNull(grid.glucScale);
      let yHigh = this.glucY(doubleL().as(dart.dsend(this.targets(this.repData), '_get', ["low"])));
      let yLow = this.glucY(doubleL().as(dart.dsend(this.targets(this.repData), '_get', ["high"])));
      let limitLines = new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(xo), "y", this.cm(yo)]), "canvas", JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$ObjectL()).from(["type", "rect", "x", this.cm(0.0), "y", this.cm(yHigh), "w", this.cm(24 * dart.notNull(grid.colWidth)), "h", this.cm(dart.notNull(yLow) - dart.notNull(yHigh)), "color", "#00ff00", "fillOpacity", 0.5]), new (IdentityMapOfStringL$ObjectL()).from(["type", "line", "x1", this.cm(0.0), "y1", this.cm(yHigh), "x2", this.cm(24 * dart.notNull(grid.colWidth)), "y2", this.cm(yHigh), "lineWidth", this.cm(this.lw), "lineColor", "#00aa00"]), new (IdentityMapOfStringL$ObjectL()).from(["type", "line", "x1", this.cm(0.0), "y1", this.cm(yLow), "x2", this.cm(24 * dart.notNull(grid.colWidth)), "y2", this.cm(yLow), "lineWidth", this.cm(this.lw), "lineColor", "#00aa00"]), new (IdentityMapOfStringL$ObjectL()).from(["type", "rect", "x", 0, "y", 0, "w", 0, "h", 0, "color", "#000000", "fillOpacity", 1])])]);
      let percGraph = new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(xo), "y", this.cm(yo)]), "canvas", [], "pageBreak", "-"]);
      let percLegend = new base_print.LegendData.new(this.cm(xo), this.cm(dart.notNull(yo) + dart.notNull(grid.lineHeight) * dart.notNull(grid.gridLines) + (dart.test(this.showBasal) ? 1.0 : 2.0)), this.cm(8.0), 100);
      if (dart.test(this.addPercentileGraph(percGraph, percList, 10, 90, "#aaaaff"))) {
        this.addLegendEntry(percLegend, "#aaaaff", this.msgPercentile1090);
      }
      if (dart.test(this.addPercentileGraph(percGraph, percList, 25, 75, "#8888ff"))) {
        this.addLegendEntry(percLegend, "#8888ff", this.msgPercentile2575);
      }
      this.addPercentileGraph(percGraph, percList, 50, 50, "#000000");
      this.addLegendEntry(percLegend, "#000000", this.msgMedian, {isArea: false});
      this.addLegendEntry(percLegend, "#00ff00", this.msgTargetArea(this.g.glucFromData(dart.dsend(this.targets(this.repData), '_get', ["low"])), this.g.glucFromData(dart.dsend(this.targets(this.repData), '_get', ["high"])), StringL().as(dart.dsend(this.g.getGlucInfo(), '_get', ["unit"]))));
      let profileBasal = null;
      if (dart.test(this.showBasal)) {
        this[_profMax] = -1000.0;
        this[_basalHeight] = this.gridHeight;
        this[_basalWidth] = this.gridWidth;
        this[_colWidth$] = dart.notNull(this[_basalWidth]) / 24;
        for (let entry of data.days[$first].basalData.store.listBasal) {
          this[_profMax] = math.max(doubleL(), dart.notNull((t35 = entry.value, t35 == null ? 0.0 : t35)) + 0.2, this[_profMax]);
        }
        let y = dart.notNull(this.gridHeight) + 4.0;
        this.drawScaleIE(xo, yo, this[_basalHeight], y, 0.0, this[_profMax], this[_colWidth$], horzCvs, vertStack, JSArrayOfStepDataL().of([StepDataL().as(this.S(3.0, 0.5)), StepDataL().as(this.S(1.5, 0.2)), StepDataL().as(this.S(0.0, 0.1))]), dart.fn((i, step, opts) => {
          let t35;
          let value = opts && 'value' in opts ? opts.value : null;
          return dart.str(this.g.fmtNumber(numL().as((t35 = value, t35 == null ? dart.dsend(i, '*', [step]) : t35)), 1)) + " " + dart.str(this.msgInsulinUnit);
        }, dynamicAnddynamic__ToStringL()));
        horzCvs[$add](new (IdentityMapOfStringL$ObjectL()).from(["type", "line", "x1", this.cm(0), "y1", dart.notNull(this.cm(y + dart.notNull(this[_basalHeight]))) - dart.notNull(this.lw) / 2, "x2", this.cm(24 * dart.notNull(this[_colWidth$])), "y2", dart.notNull(this.cm(y + dart.notNull(this[_basalHeight]))) - dart.notNull(this.lw) / 2, "lineWidth", this.cm(this.lw), "lineColor", this.lcFrame]));
        profileBasal = this.getBasalGraph(y, data.days[$first], true, xo, yo);
        for (let i = 0; i < 25; i = i + 1) {
          vertCvs[$add](new (IdentityMapOfStringL$ObjectL()).from(["type", "line", "x1", this.cm(i * dart.notNull(this[_colWidth$])), "y1", this.cm(y), "x2", this.cm(i * dart.notNull(this[_colWidth$])), "y2", this.cm(y + dart.notNull(this[_basalHeight]) - dart.notNull(this.lw) / 2), "lineWidth", this.cm(this.lw), "lineColor", i > 0 && i < 24 ? this.lc : this.lcFrame]));
          if (i < 24) {
            horzStack[$add](new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(dart.notNull(this.xorg) + i * dart.notNull(this[_colWidth$])), "y", this.cm(dart.notNull(this.yorg) + y + dart.notNull(this[_basalHeight]) + 0.05)]), "text", this.fmtTime(i), "fontSize", this.fs(6.0)]));
          }
        }
        horzStack[$add](new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(this.xorg), "y", this.cm(dart.notNull(this.yorg) + y + dart.notNull(this[_basalHeight]) + 1.0)]), "text", print_percentile.PrintPercentile.msgBasalInfo1(this.fmtDate(this.repData.begDate))]));
      }
      let ret = new base_print.Page.new(this.isPortrait, [this.headerFooter(), profileBasal, vertLegend, vertLines, horzLegend, horzLines, limitLines, percLegend.asOutput, percGraph]);
      this.title = base_print.BasePrint.titleGPD;
      return PageL().as(ret);
    }
    addPercentileGraph(percGraph, percList, low, high, color) {
      let ret = high == low;
      let ptsLow = [];
      let ptsHigh = [];
      let x = 0.0;
      for (let entry of percList) {
        if (entry.percentile(high) != entry.percentile(low)) ret = true;
        x = this.glucX(entry.time);
        ptsHigh[$add](new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(x), "y", this.cm(this.glucY(entry.percentile(high)))]));
        if (high != low) ptsLow[$insert](0, new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(x), "y", this.cm(this.glucY(entry.percentile(low)))]));
      }
      x = this.glucX(new core.DateTime.new(0, 1, 1, 23, 59, 59));
      ptsHigh[$add](new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(x), "y", this.cm(this.glucY(percList[$first].percentile(high)))]));
      if (high != low) ptsLow[$insert](0, new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(x), "y", this.cm(this.glucY(percList[$first].percentile(low)))]));
      let area = new (IdentityMapOfStringL$ObjectL()).from(["type", "polyline", "lineWidth", this.cm(this.lw), "closePath", high != low, "fillOpacity", 0.5, "points", []]);
      ListL().as(area[$_get]("points"))[$addAll](ptsHigh);
      if (high != low) {
        area[$_set]("color", color);
        ListL().as(area[$_get]("points"))[$addAll](ptsLow);
      }
      ListL().as(dart.dsend(percGraph, '_get', ["canvas"]))[$add](area);
      ListL().as(dart.dsend(percGraph, '_get', ["canvas"]))[$add](new (IdentityMapOfStringL$ObjectL()).from(["type", "rect", "x", 0, "y", 0, "w", 0, "h", 0, "color", "#000000", "fillOpacity", 1]));
      ListL().as(dart.dsend(percGraph, '_get', ["canvas"]))[$add](new (IdentityMapOfStringL$ObjectL()).from(["type", "polyline", "lineWidth", this.cm(this.lw), "closePath", false, "lineColor", color, "points", ptsHigh]));
      ListL().as(dart.dsend(percGraph, '_get', ["canvas"]))[$add](new (IdentityMapOfStringL$ObjectL()).from(["type", "polyline", "lineWidth", this.cm(this.lw), "closePath", false, "lineColor", color, "points", ptsLow]));
      return ret;
    }
    basalX(time) {
      return dart.notNull(this[_basalWidth]) / 1440 * (dart.notNull(time.hour) * 60 + dart.notNull(time.minute));
    }
    basalY(value) {
      return this[_profMax] !== 0 && value != null ? dart.notNull(this[_basalHeight]) - dart.notNull(this[_basalHeight]) / dart.notNull(this[_profMax]) * dart.notNull(value) : 0.0;
    }
    getBasalGraph(top, day, useProfile, xo, yo) {
      let data = null;
      let color = null;
      if (dart.test(useProfile)) {
        data = day.basalData.store.listBasal;
        color = this.colBasalProfile;
      } else {
        data = day.profile;
        color = this.colBasalProfile;
      }
      let basalCvs = [];
      let ret = new (IdentityMapOfStringL$ListLOfMapLOfStringL$ObjectL()).from(["stack", JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(xo), "y", this.cm(dart.notNull(yo) + dart.notNull(top))]), "canvas", basalCvs])])]);
      let lastY = null;
      let areaPoints = [];
      let area = new (IdentityMapOfStringL$ObjectL()).from(["type", "polyline", "lineWidth", this.cm(this.lw), "closePath", true, "color", color, "points", areaPoints]);
      let temp = JSArrayOfProfileEntryDataL().of([]);
      for (let entry of data) {
        temp[$add](entry);
      }
      if (dart.test(useProfile) && dart.test(temp[$isNotEmpty])) {
        temp[$sort](dart.fn((a, b) => a.time(day.date, useProfile).compareTo(b.time(day.date, useProfile)), ProfileEntryDataLAndProfileEntryDataLTointL()));
        if (temp[$_get](0).timeAsSeconds !== -dart.notNull(temp[$_get](0).localDiff) * 60 * 60) {
          let clone = temp[$_get](0).clone(new core.DateTime.new(0, 1, 1, -dart.notNull(temp[$_get](0).localDiff), 0));
          temp[$insert](0, clone);
        }
      }
      areaPoints[$add](new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(this.basalX(new core.DateTime.new(0, 1, 1, 0, 0))), "y", this.cm(dart.test(useProfile) ? this.basalY(0.0) : this[_basalHeight])]));
      for (let entry of temp) {
        let x = this.basalX(entry.time(day.date, useProfile));
        let y = dart.test(useProfile) ? this.basalY(entry.value) : dart.notNull(this[_basalHeight]) / dart.notNull(this[_profMax]) * (dart.notNull(this[_profMax]) - dart.notNull(entry.tempAdjusted) * 100);
        if (lastY != null) areaPoints[$add](new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(x), "y", this.cm(lastY)]));
        areaPoints[$add](new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(x), "y", this.cm(y)]));
        lastY = y;
      }
      if (lastY != null) areaPoints[$add](new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(this.basalX(new core.DateTime.new(0, 1, 1, 23, 59))), "y", this.cm(lastY)]));
      areaPoints[$add](new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(this.basalX(new core.DateTime.new(0, 1, 1, 23, 59))), "y", this.cm(dart.test(useProfile) ? this.basalY(0.0) : this[_basalHeight])]));
      basalCvs[$add](area);
      return ret;
    }
  };
  (print_percentile.PrintPercentile.new = function() {
    this[help$10] = intl.Intl.message("Dieses Formular zeigt an, wie sich die Glukosewerte im ausgewählten Zeitraum über den Tag\nverteilen. Diese Verteilung kann graphisch und tabellarisch ausgegeben werden.\n\nIn der Grafik sind die Bereiche für bestimmte Abweichungen farblich markiert. Die Linie zeigt den Medianwert\nan. In der Tabelle kann man diese Werte nachlesen. Wenn die Basalrate mit ausgegeben wird, dann ist das die\nBasalrate, die zu Beginn des ausgewählten Zeitraums aktiv war.", {desc: "help for percentile"});
    this[id$15] = "percentile";
    this[idx$12] = "03";
    this[showGPD] = null;
    this[showTable] = null;
    this[showCol1090] = null;
    this[showBasal$] = null;
    this[params$13] = JSArrayOfParamInfoL().of([new base_print.ParamInfo.new(0, base_print.BasePrint.msgOutput, {list: JSArrayOfStringL().of([base_print.BasePrint.msgGraphic, base_print.BasePrint.msgTable, base_print.BasePrint.msgAll]), thumbValue: 2}), new base_print.ParamInfo.new(1, print_percentile.PrintPercentile.msgCol1090, {boolValue: false}), new base_print.ParamInfo.new(2, print_percentile.PrintPercentile.msgParam1, {boolValue: false})]);
    this[isPortrait] = false;
    this[lineWidth$2] = null;
    this[colBasal] = "#0097a7";
    this[glucMax$1] = 0.0;
    this[_gridHeight] = null;
    this[_basalHeight] = null;
    this[_basalWidth] = null;
    this[_profMax] = null;
    this[_colWidth$] = null;
    print_percentile.PrintPercentile.__proto__.new.call(this);
    this.init();
    this.title = base_print.BasePrint.titleGPD;
  }).prototype = print_percentile.PrintPercentile.prototype;
  dart.addTypeTests(print_percentile.PrintPercentile);
  dart.addTypeCaches(print_percentile.PrintPercentile);
  dart.setMethodSignature(print_percentile.PrintPercentile, () => ({
    __proto__: dart.getMethods(print_percentile.PrintPercentile.__proto__),
    glucY: dart.fnType(dart.legacy(core.double), [dart.legacy(core.double)]),
    glucX: dart.fnType(dart.legacy(core.double), [dart.legacy(core.DateTime)]),
    fillPages: dart.fnType(dart.void, [dart.legacy(core.List$(dart.legacy(base_print.Page)))]),
    fillRow: dart.fnType(dart.void, [dart.dynamic, dart.legacy(core.double), dart.legacy(core.int), dart.legacy(core.List$(dart.legacy(json_data.EntryData))), dart.legacy(core.String)]),
    getTablePage: dart.fnType(dart.legacy(base_print.Page), []),
    getPage: dart.fnType(dart.legacy(base_print.Page), []),
    addPercentileGraph: dart.fnType(dart.legacy(core.bool), [dart.dynamic, dart.legacy(core.List$(dart.legacy(print_percentile.PercentileData))), dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.String)]),
    basalX: dart.fnType(dart.legacy(core.double), [dart.legacy(core.DateTime)]),
    basalY: dart.fnType(dart.legacy(core.double), [dart.legacy(core.double)]),
    getBasalGraph: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(core.List$(dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(core.Object))))))), [dart.legacy(core.double), dart.legacy(json_data.DayData), dart.legacy(core.bool), dart.legacy(core.double), dart.legacy(core.double)])
  }));
  dart.setGetterSignature(print_percentile.PrintPercentile, () => ({
    __proto__: dart.getGetters(print_percentile.PrintPercentile.__proto__),
    estimatePageCount: dart.dynamic,
    [_title$]: dart.legacy(core.String),
    gridHeight: dart.legacy(core.double),
    gridWidth: dart.legacy(core.double)
  }));
  dart.setLibraryUri(print_percentile.PrintPercentile, L30);
  dart.setFieldSignature(print_percentile.PrintPercentile, () => ({
    __proto__: dart.getFields(print_percentile.PrintPercentile.__proto__),
    help: dart.fieldType(dart.legacy(core.String)),
    id: dart.fieldType(dart.legacy(core.String)),
    idx: dart.fieldType(dart.legacy(core.String)),
    showGPD: dart.fieldType(dart.legacy(core.bool)),
    showTable: dart.fieldType(dart.legacy(core.bool)),
    showCol1090: dart.fieldType(dart.legacy(core.bool)),
    showBasal: dart.fieldType(dart.legacy(core.bool)),
    params: dart.fieldType(dart.legacy(core.List$(dart.legacy(base_print.ParamInfo)))),
    isPortrait: dart.fieldType(dart.legacy(core.bool)),
    lineWidth: dart.fieldType(dart.legacy(core.num)),
    colBasal: dart.fieldType(dart.legacy(core.String)),
    glucMax: dart.fieldType(dart.legacy(core.double)),
    [_gridHeight]: dart.fieldType(dart.legacy(core.double)),
    [_basalHeight]: dart.fieldType(dart.legacy(core.double)),
    [_basalWidth]: dart.fieldType(dart.legacy(core.double)),
    [_profMax]: dart.fieldType(dart.legacy(core.double)),
    [_colWidth$]: dart.fieldType(dart.legacy(core.double))
  }));
  var _trigger$8 = dart.privateName(whatsnew_component, "_trigger");
  var g$11 = dart.privateName(whatsnew_component, "WhatsnewComponent.g");
  whatsnew_component.WhatsnewComponent = class WhatsnewComponent extends core.Object {
    get g() {
      return this[g$11];
    }
    set g(value) {
      this[g$11] = value;
    }
    get trigger() {
      return this[_trigger$8].stream;
    }
    fire(key) {
      this[_trigger$8].add(html.UIEvent.new(key, {detail: 0}));
    }
  };
  (whatsnew_component.WhatsnewComponent.new = function() {
    this[g$11] = globals.Globals.new();
    this[_trigger$8] = StreamControllerOfUIEventL().broadcast({sync: true});
    ;
  }).prototype = whatsnew_component.WhatsnewComponent.prototype;
  dart.addTypeTests(whatsnew_component.WhatsnewComponent);
  dart.addTypeCaches(whatsnew_component.WhatsnewComponent);
  dart.setMethodSignature(whatsnew_component.WhatsnewComponent, () => ({
    __proto__: dart.getMethods(whatsnew_component.WhatsnewComponent.__proto__),
    fire: dart.fnType(dart.dynamic, [dart.legacy(core.String)])
  }));
  dart.setGetterSignature(whatsnew_component.WhatsnewComponent, () => ({
    __proto__: dart.getGetters(whatsnew_component.WhatsnewComponent.__proto__),
    trigger: dart.legacy(async.Stream$(dart.legacy(html.UIEvent)))
  }));
  dart.setLibraryUri(whatsnew_component.WhatsnewComponent, L31);
  dart.setFieldSignature(whatsnew_component.WhatsnewComponent, () => ({
    __proto__: dart.getFields(whatsnew_component.WhatsnewComponent.__proto__),
    g: dart.fieldType(dart.legacy(globals.Globals)),
    [_trigger$8]: dart.finalFieldType(dart.legacy(async.StreamController$(dart.legacy(html.UIEvent))))
  }));
  var _title$0 = dart.privateName(print_weekly_graphic, "_title");
  var _getPage$ = dart.privateName(print_weekly_graphic, "_getPage");
  var help$11 = dart.privateName(print_weekly_graphic, "PrintWeeklyGraphic.help");
  var id$16 = dart.privateName(print_weekly_graphic, "PrintWeeklyGraphic.id");
  var idx$13 = dart.privateName(print_weekly_graphic, "PrintWeeklyGraphic.idx");
  var spareBool1$0 = dart.privateName(print_weekly_graphic, "PrintWeeklyGraphic.spareBool1");
  var showDaysInGraphic = dart.privateName(print_weekly_graphic, "PrintWeeklyGraphic.showDaysInGraphic");
  var showCGP$ = dart.privateName(print_weekly_graphic, "PrintWeeklyGraphic.showCGP");
  var params$14 = dart.privateName(print_weekly_graphic, "PrintWeeklyGraphic.params");
  var glucMax$2 = dart.privateName(print_weekly_graphic, "PrintWeeklyGraphic.glucMax");
  var carbMax$0 = dart.privateName(print_weekly_graphic, "PrintWeeklyGraphic.carbMax");
  var bolusMax$0 = dart.privateName(print_weekly_graphic, "PrintWeeklyGraphic.bolusMax");
  var graphHeight$0 = dart.privateName(print_weekly_graphic, "PrintWeeklyGraphic.graphHeight");
  var graphBottom$ = dart.privateName(print_weekly_graphic, "PrintWeeklyGraphic.graphBottom");
  print_weekly_graphic.PrintWeeklyGraphic = class PrintWeeklyGraphic extends base_print.BasePrint {
    get help() {
      return this[help$11];
    }
    set help(value) {
      this[help$11] = value;
    }
    get id() {
      return this[id$16];
    }
    set id(value) {
      this[id$16] = value;
    }
    get idx() {
      return this[idx$13];
    }
    set idx(value) {
      this[idx$13] = value;
    }
    get spareBool1() {
      return this[spareBool1$0];
    }
    set spareBool1(value) {
      this[spareBool1$0] = value;
    }
    get showDaysInGraphic() {
      return this[showDaysInGraphic];
    }
    set showDaysInGraphic(value) {
      this[showDaysInGraphic] = value;
    }
    get showCGP() {
      return this[showCGP$];
    }
    set showCGP(value) {
      this[showCGP$] = value;
    }
    get params() {
      return this[params$14];
    }
    set params(value) {
      this[params$14] = value;
    }
    get glucMax() {
      return this[glucMax$2];
    }
    set glucMax(value) {
      this[glucMax$2] = value;
    }
    get carbMax() {
      return this[carbMax$0];
    }
    set carbMax(value) {
      this[carbMax$0] = value;
    }
    get bolusMax() {
      return this[bolusMax$0];
    }
    set bolusMax(value) {
      this[bolusMax$0] = value;
    }
    get graphHeight() {
      return this[graphHeight$0];
    }
    set graphHeight(value) {
      this[graphHeight$0] = value;
    }
    get graphBottom() {
      return this[graphBottom$];
    }
    set graphBottom(value) {
      this[graphBottom$] = value;
    }
    extractParams() {
      this.spareBool1 = this.params[$_get](1).boolValue;
      this.showDaysInGraphic = this.params[$_get](2).boolValue;
      this.showCGP = this.params[$_get](3).boolValue;
      switch (this.params[$_get](0).intValue) {
        case 1:
        {
          this.pagesPerSheet = 2;
          break;
        }
        case 2:
        {
          this.pagesPerSheet = 4;
          break;
        }
        case 3:
        {
          this.pagesPerSheet = 8;
          break;
        }
        case 4:
        {
          this.pagesPerSheet = 16;
          break;
        }
        default:
        {
          this.pagesPerSheet = 1;
          break;
        }
      }
    }
    get estimatePageCount() {
      let t35;
      let count = 0;
      if (this.g != null && this.g.period != null && this.g.period.start != null && this.g.period.end != null) {
        count = 1;
        let date = this.g.period.start.add({days: 1});
        while (dart.test(date.isOnOrBefore(this.g.period.end))) {
          if (date.weekday === 1) count = count + 1;
          date = date.add({days: 1});
        }
        if (dart.test((t35 = this.showCGP, t35 == null ? false : t35))) count = count * 2;
      }
      return new (IdentityMapOfStringL$ObjectL()).from(["count", count, "isEstimated", false]);
    }
    get backsuffix() {
      return dart.test(this.showCGP) ? "cgp" : "";
    }
    get [_title$0]() {
      return intl.Intl.message("Wochengrafik");
    }
    get title() {
      return this[_title$0];
    }
    set title(value) {
      super.title = value;
    }
    static get msgParam3() {
      return intl.Intl.message("Tagesnamen in Grafik anzeigen");
    }
    get isPortrait() {
      return false;
    }
    glucX(time) {
      return dart.notNull(print_weekly_graphic.PrintWeeklyGraphic.graphWidth) / 1440 * (dart.notNull(time.hour) * 60 + dart.notNull(time.minute));
    }
    glucY(value) {
      return dart.notNull(this.graphHeight) / dart.notNull(this.glucMax) * (dart.notNull(this.glucMax) - dart.notNull(value));
    }
    carbY(value) {
      return dart.notNull(this.graphHeight) / dart.notNull(this.carbMax) * (dart.notNull(this.carbMax) - dart.notNull(value));
    }
    bolusY(value) {
      return dart.notNull(this.graphHeight) / dart.notNull(this.bolusMax) * dart.notNull(value);
    }
    fillPages(pages) {
      return async.async(dart.void, (function* fillPages() {
        let data = this.repData.data;
        if (dart.test(data.days[$isEmpty])) return;
        let list = JSArrayOfListLOfDayDataL().of([]);
        list[$add](JSArrayOfDayDataL().of([]));
        let lastDayInWeek = 1000;
        for (let i = 0; i < dart.notNull(data.days[$length]); i = i + 1) {
          let day = data.days[$_get](i);
          let dayInWeek = dart.notNull(day.date.weekday) - dart.notNull(this.g.period.firstDayOfWeek);
          if (dayInWeek < 0) dayInWeek = dayInWeek + 7;
          if (dayInWeek <= lastDayInWeek && dart.test(list[$last][$isNotEmpty])) list[$add](JSArrayOfDayDataL().of([]));
          lastDayInWeek = dayInWeek;
          list[$last][$add](day);
        }
        if (dart.test(this.g.ppLatestFirst)) list = list[$reversed][$toList]();
        for (let week of list) {
          print_weekly_graphic.PrintWeeklyGraphic.graphWidth = 23.25;
          this.graphHeight = 12.5;
          print_weekly_graphic.PrintWeeklyGraphic.basalTop = 2.0;
          this.graphBottom = this.graphHeight;
          pages[$add](this[_getPage$](week, this.repData));
          if (dart.test(this.showCGP)) pages[$add](this.getCGPPage(week));
          if (dart.test(this.g.showBothUnits)) {
            this.g.glucMGDLIdx = 1;
            pages[$add](this[_getPage$](week, this.repData));
            this.g.glucMGDLIdx = 2;
          }
          this.title = this[_title$0];
          if (dart.test(this.repData.isForThumbs)) break;
        }
      }).bind(this));
    }
    glucLine(points, color) {
      return new (IdentityMapOfStringL$dynamic()).from(["type", "polyline", "lineWidth", this.cm(dart.notNull(this.lw) * 2), "closePath", false, "lineColor", color, "points", points]);
    }
    [_getPage$](days, src) {
      this.title = this[_title$0];
      this.subtitle = null;
      this.footerTextAboveLine[$_set]("text", "");
      let xo = this.xorg;
      let yo = this.yorg;
      this.titleInfo = this.titleInfoDateRange(days[$_get](0).date, days[$last].date);
      this.glucMax = -1000.0;
      for (let day of days) {
        for (let entry of day.entries) {
          this.glucMax = math.max(doubleL(), entry.gluc, this.glucMax);
        }
        for (let entry of day.bloody) {
          this.glucMax = math.max(doubleL(), entry.mbg, this.glucMax);
        }
      }
      if (this.g.glucMaxValue != null) this.glucMax = this.g.glucMaxValues[$_get](this.g.ppGlucMaxIdx);
      let vertLines = new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(xo), "y", this.cm(yo)]), "canvas", []]);
      let horzLines = new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(xo), "y", this.cm(yo)]), "canvas", []]);
      let horzLegend = new (IdentityMapOfStringL$ListL()).from(["stack", []]);
      let vertLegend = new (IdentityMapOfStringL$ListL()).from(["stack", []]);
      let graphGlucCvs = [];
      let graphGlucStack = [new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(xo), "y", this.cm(yo)]), "canvas", graphGlucCvs])];
      let graphGluc = new (IdentityMapOfStringL$ListL()).from(["stack", graphGlucStack]);
      let vertCvs = ListL().as(vertLines[$_get]("canvas"));
      let horzCvs = ListL().as(vertLines[$_get]("canvas"));
      let horzStack = horzLegend[$_get]("stack");
      let vertStack = vertLegend[$_get]("stack");
      let grid = this.drawGraphicGrid(this.glucMax, this.graphHeight, print_weekly_graphic.PrintWeeklyGraphic.graphWidth, vertCvs, horzCvs, horzStack, vertStack, {glucScale: dart.test(this.g.glucMGDL) ? 20.0 : 18.02 * 0.5});
      if (grid.lineHeight === 0) {
        return new base_print.Page.new(this.isPortrait, [this.headerFooter(), new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(this.xorg), "y", this.cm(this.yorg)]), "text", this.msgMissingData])]);
      }
      this.glucMax = (dart.notNull(grid.gridLines) * dart.notNull(grid.glucScale))[$toDouble]();
      let legend = new base_print.LegendData.new(this.cm(xo), this.cm(dart.notNull(yo) + dart.notNull(this.graphHeight) + 0.8), this.cm(8.0), 3);
      for (let day of days) {
        let color = this.colWeekDays[$_get](dart.notNull(day.date.weekday) - 1);
        let size = 0.2;
        for (let entry of day.bloody) {
          let x = this.glucX(entry.time);
          let y = this.glucY(entry.mbg);
          graphGlucCvs[$add](new (IdentityMapOfStringL$ObjectL()).from(["type", "rect", "x", this.cm(x), "y", this.cm(y), "w", this.cm(size), "h", this.cm(size), "color", color]));
        }
        for (let t of day.treatments) {
          if (dart.test(t.isBloody)) {
            let x = this.glucX(t.createdAt);
            let y = this.glucY(dart.notNull(this.g.glucFactor) * dart.notNull(t.glucose));
            graphGlucCvs[$add](new (IdentityMapOfStringL$ObjectL()).from(["type", "rect", "x", this.cm(x), "y", this.cm(y), "w", this.cm(size), "h", this.cm(size), "color", color]));
          }
        }
        let points = [];
        let names = [];
        let nameBoxes = [];
        let last = null;
        let colorText = this.colWeekDaysText[$_get](dart.notNull(day.date.weekday) - 1);
        let name = datepicker_component.DatepickerPeriod.dowShortName(day.date);
        for (let entry of day.entries) {
          let x = this.glucX(entry.time);
          let y = this.glucY(entry.gluc);
          if (dart.notNull(entry.gluc) < 0) {
            if (last != null && dart.notNull(last.gluc) >= 0) {
              graphGlucCvs[$add](this.glucLine(points, color));
              points = [];
            }
          } else {
            dart.dsend(points, 'add', [new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(x), "y", this.cm(y)])]);
          }
          if (dart.test(this.showDaysInGraphic)) {
            if ((last == null || dart.notNull(entry.time.hour) > dart.notNull(last.time.hour)) && dart.notNull(entry.gluc) > 0) {
              if (entry.time.hour[$modulo](2) === 1) {
                nameBoxes[$add](new (IdentityMapOfStringL$ObjectL()).from(["type", "rect", "x", this.cm(dart.notNull(x) - 0.25), "y", this.cm(dart.notNull(y) - 0.2), "w", this.cm(0.5), "h", this.cm(0.4), "color", color]));
                names[$add](new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(dart.notNull(xo) + dart.notNull(x) - 0.25), "y", this.cm(dart.notNull(yo) + dart.notNull(y) - 0.15)]), "columns", JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$ObjectL()).from(["width", this.cm(0.5), "text", name, "fontSize", this.fs(8.0), "color", colorText, "alignment", "center"])])]));
              }
            }
          }
          last = entry;
        }
        graphGlucCvs[$add](this.glucLine(points, color));
        graphGlucCvs[$addAll](nameBoxes);
        graphGlucStack[$addAll](names);
        this.addLegendEntry(legend, color, dart.str(this.fmtDate(day.date, null, false, true)), {isArea: false, lineWidth: dart.notNull(this.lw) * 3});
      }
      let yHigh = this.glucY(math.min(doubleL(), this.glucMax, doubleL().as(dart.dsend(dart.dsend(this.targets(this.repData), '_get', ["high"]), 'toDouble', []))));
      let yLow = this.glucY(doubleL().as(dart.dsend(dart.dsend(this.targets(this.repData), '_get', ["low"]), 'toDouble', [])));
      let limitLines = new (IdentityMapOfStringL$ObjectL()).from(["relativePosition", new (IdentityMapOfStringL$doubleL()).from(["x", this.cm(xo), "y", this.cm(yo)]), "canvas", JSArrayOfMapLOfStringL$ObjectL().of([new (IdentityMapOfStringL$ObjectL()).from(["type", "rect", "x", this.cm(0.0), "y", this.cm(yHigh), "w", this.cm(24 * dart.notNull(grid.colWidth)), "h", this.cm(dart.notNull(yLow) - dart.notNull(yHigh)), "color", this.colTargetArea, "fillOpacity", 0.3]), new (IdentityMapOfStringL$ObjectL()).from(["type", "line", "x1", this.cm(0.0), "y1", this.cm(yHigh), "x2", this.cm(24 * dart.notNull(grid.colWidth)), "y2", this.cm(yHigh), "lineWidth", this.cm(this.lw), "lineColor", this.colTargetArea]), new (IdentityMapOfStringL$ObjectL()).from(["type", "line", "x1", this.cm(0.0), "y1", this.cm(yLow), "x2", this.cm(24 * dart.notNull(grid.colWidth)), "y2", this.cm(yLow), "lineWidth", this.cm(this.lw), "lineColor", this.colTargetArea]), new (IdentityMapOfStringL$ObjectL()).from(["type", "rect", "x", 0, "y", 0, "w", 0, "h", 0, "color", "#000", "fillOpacity", 1])])]);
      return new base_print.Page.new(this.isPortrait, [this.headerFooter(), vertLegend, vertLines, horzLegend, horzLines, limitLines, graphGluc, legend.asOutput, new (IdentityMapOfStringL$StringL()).from(["text", ""])]);
    }
  };
  (print_weekly_graphic.PrintWeeklyGraphic.new = function() {
    this[help$11] = intl.Intl.message("Dieses Formular zeigt den Verlauf der Glukosekurve über eine Woche hinweg an. Der Zeitraum wird\ndazu in Wochenabschnitte aufgeteilt und jede Woche wird auf einer eigenen Seite ausgegeben. Die Wochen werden\nfarblich markiert, so dass man sie gut unterscheiden kann. Zusätzlich kann noch das @10@ für die jeweilige\nWoche erzeugt werden.", {desc: "help for weekgraph"});
    this[id$16] = "weekgraph";
    this[idx$13] = "08";
    this[spareBool1$0] = null;
    this[showDaysInGraphic] = true;
    this[showCGP$] = null;
    this[params$14] = JSArrayOfParamInfoL().of([new base_print.ParamInfo.new(0, base_print.BasePrint.msgGraphsPerPage, {list: JSArrayOfStringL().of([intl.Intl.message("Eine"), intl.Intl.message("Zwei"), intl.Intl.message("Vier"), intl.Intl.message("Acht"), intl.Intl.message("Sechzehn")])}), new base_print.ParamInfo.new(1, "", {boolValue: true, isDeprecated: true}), new base_print.ParamInfo.new(2, print_weekly_graphic.PrintWeeklyGraphic.msgParam3, {boolValue: true}), new base_print.ParamInfo.new(3, print_daily_graphic.PrintDailyGraphic.msgParam19, {boolValue: false, thumbValue: true})]);
    this[glucMax$2] = 0.0;
    this[carbMax$0] = 200.0;
    this[bolusMax$0] = 50.0;
    this[graphHeight$0] = null;
    this[graphBottom$] = null;
    print_weekly_graphic.PrintWeeklyGraphic.__proto__.new.call(this);
    this.init();
  }).prototype = print_weekly_graphic.PrintWeeklyGraphic.prototype;
  dart.addTypeTests(print_weekly_graphic.PrintWeeklyGraphic);
  dart.addTypeCaches(print_weekly_graphic.PrintWeeklyGraphic);
  dart.setMethodSignature(print_weekly_graphic.PrintWeeklyGraphic, () => ({
    __proto__: dart.getMethods(print_weekly_graphic.PrintWeeklyGraphic.__proto__),
    glucX: dart.fnType(dart.legacy(core.double), [dart.legacy(core.DateTime)]),
    glucY: dart.fnType(dart.legacy(core.double), [dart.legacy(core.double)]),
    carbY: dart.fnType(dart.legacy(core.double), [dart.legacy(core.double)]),
    bolusY: dart.fnType(dart.legacy(core.double), [dart.legacy(core.double)]),
    fillPages: dart.fnType(dart.void, [dart.legacy(core.List$(dart.legacy(base_print.Page)))]),
    glucLine: dart.fnType(dart.dynamic, [dart.dynamic, dart.legacy(core.String)]),
    [_getPage$]: dart.fnType(dart.legacy(base_print.Page), [dart.legacy(core.List$(dart.legacy(json_data.DayData))), dart.legacy(json_data.ReportData)])
  }));
  dart.setGetterSignature(print_weekly_graphic.PrintWeeklyGraphic, () => ({
    __proto__: dart.getGetters(print_weekly_graphic.PrintWeeklyGraphic.__proto__),
    estimatePageCount: dart.dynamic,
    [_title$0]: dart.legacy(core.String),
    title: dart.legacy(core.String)
  }));
  dart.setLibraryUri(print_weekly_graphic.PrintWeeklyGraphic, L32);
  dart.setFieldSignature(print_weekly_graphic.PrintWeeklyGraphic, () => ({
    __proto__: dart.getFields(print_weekly_graphic.PrintWeeklyGraphic.__proto__),
    help: dart.fieldType(dart.legacy(core.String)),
    id: dart.fieldType(dart.legacy(core.String)),
    idx: dart.fieldType(dart.legacy(core.String)),
    spareBool1: dart.fieldType(dart.legacy(core.bool)),
    showDaysInGraphic: dart.fieldType(dart.legacy(core.bool)),
    showCGP: dart.fieldType(dart.legacy(core.bool)),
    params: dart.fieldType(dart.legacy(core.List$(dart.legacy(base_print.ParamInfo)))),
    glucMax: dart.fieldType(dart.legacy(core.double)),
    carbMax: dart.fieldType(dart.legacy(core.double)),
    bolusMax: dart.fieldType(dart.legacy(core.double)),
    graphHeight: dart.fieldType(dart.legacy(core.double)),
    graphBottom: dart.fieldType(dart.legacy(core.double))
  }));
  dart.defineLazy(print_weekly_graphic.PrintWeeklyGraphic, {
    /*print_weekly_graphic.PrintWeeklyGraphic.graphWidth*/get graphWidth() {
      return null;
    },
    set graphWidth(_) {},
    /*print_weekly_graphic.PrintWeeklyGraphic.basalTop*/get basalTop() {
      return null;
    },
    set basalTop(_) {},
    /*print_weekly_graphic.PrintWeeklyGraphic.basalHeight*/get basalHeight() {
      return 3.0;
    },
    set basalHeight(_) {},
    /*print_weekly_graphic.PrintWeeklyGraphic.basalWidth*/get basalWidth() {
      return print_weekly_graphic.PrintWeeklyGraphic.graphWidth;
    },
    set basalWidth(_) {}
  }, true);
  dart.trackLibraries("packages/nightscout_reporter/src/controls/datepicker/datepicker_component", {
    "package:nightscout_reporter/src/dsgvo/dsgvo_component.dart": dsgvo_component,
    "package:nightscout_reporter/src/globals.dart": globals,
    "package:nightscout_reporter/src/json_data.dart": json_data,
    "package:nightscout_reporter/src/forms/base-print.dart": base_print,
    "package:nightscout_reporter/src/forms/print-cgp.dart": print_cgp,
    "package:nightscout_reporter/src/controls/datepicker/datepicker_component.dart": datepicker_component,
    "package:nightscout_reporter/src/controls/datepicker/month_component.dart": month_component,
    "package:nightscout_reporter/src/forms/base-daily.dart": base_daily,
    "package:nightscout_reporter/src/controls/signin/signin_component.dart": signin_component,
    "package:nightscout_reporter/src/forms/print-analysis.dart": print_analysis,
    "package:nightscout_reporter/src/forms/print-daily-statistics.dart": print_daily_statistics,
    "package:nightscout_reporter/src/forms/base-profile.dart": base_profile,
    "package:nightscout_reporter/src/forms/print-basalrate.dart": print_basalrate,
    "package:nightscout_reporter/src/infoview/infoview_component.dart": infoview_component,
    "package:nightscout_reporter/src/forms/print-user-data.dart": print_user_data,
    "package:nightscout_reporter/src/forms/print-test.dart": print_test,
    "package:nightscout_reporter/src/forms/print-daily-graphic.dart": print_daily_graphic,
    "package:nightscout_reporter/src/impressum/impressum_component.dart": impressum_component,
    "package:nightscout_reporter/src/forms/print-daily-gluc.dart": print_daily_gluc,
    "package:nightscout_reporter/src/forms/print-daily-analysis.dart": print_daily_analysis,
    "package:nightscout_reporter/src/welcome/welcome_component.dart": welcome_component,
    "package:nightscout_reporter/src/forms/print-daily-log.dart": print_daily_log,
    "package:nightscout_reporter/src/forms/print-daily-profile.dart": print_daily_profile,
    "package:nightscout_reporter/src/printparams/printparams_component.dart": printparams_component,
    "package:nightscout_reporter/src/controls/formparams/formparams_component.dart": formparams_component,
    "package:nightscout_reporter/src/helpview/helpview_component.dart": helpview_component,
    "package:nightscout_reporter/src/settings/settings_component.dart": settings_component,
    "package:nightscout_reporter/src/forms/print-daily-hours.dart": print_daily_hours,
    "package:nightscout_reporter/src/forms/print-profile.dart": print_profile,
    "package:nightscout_reporter/src/shortcutedit/shortcutedit_component.dart": shortcutedit_component,
    "package:nightscout_reporter/src/forms/print-percentile.dart": print_percentile,
    "package:nightscout_reporter/src/whatsnew/whatsnew_component.dart": whatsnew_component,
    "package:nightscout_reporter/src/forms/print-weekly-graphic.dart": print_weekly_graphic
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["../../dsgvo/dsgvo_component.dart","../../globals.dart","../../json_data.dart","../../forms/base-print.dart","../../forms/print-cgp.dart","datepicker_component.dart","month_component.dart","../../forms/base-daily.dart","../signin/signin_component.dart","../../forms/print-analysis.dart","../../forms/print-daily-statistics.dart","../../forms/base-profile.dart","../../forms/print-basalrate.dart","../../infoview/infoview_component.dart","../../forms/print-user-data.dart","../../forms/print-test.dart","../../forms/print-daily-graphic.dart","../../impressum/impressum_component.dart","../../forms/print-daily-gluc.dart","../../forms/print-daily-analysis.dart","../../welcome/welcome_component.dart","../../forms/print-daily-log.dart","../../forms/print-daily-profile.dart","../../printparams/printparams_component.dart","../formparams/formparams_component.dart","../../helpview/helpview_component.dart","../../settings/settings_component.dart","../../forms/print-daily-hours.dart","../../forms/print-profile.dart","../../shortcutedit/shortcutedit_component.dart","../../forms/print-percentile.dart","../../whatsnew/whatsnew_component.dart","../../forms/print-weekly-graphic.dart"],"names":[],"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","file":"datepicker_component.ddc.js"}');
  // Exports:
  return {
    src__dsgvo__dsgvo_component: dsgvo_component,
    src__globals: globals,
    src__json_data: json_data,
    src__forms__base_print: base_print,
    src__forms__print_cgp: print_cgp,
    src__controls__datepicker__datepicker_component: datepicker_component,
    src__controls__datepicker__month_component: month_component,
    src__forms__base_daily: base_daily,
    src__controls__signin__signin_component: signin_component,
    src__forms__print_analysis: print_analysis,
    src__forms__print_daily_statistics: print_daily_statistics,
    src__forms__base_profile: base_profile,
    src__forms__print_basalrate: print_basalrate,
    src__infoview__infoview_component: infoview_component,
    src__forms__print_user_data: print_user_data,
    src__forms__print_test: print_test,
    src__forms__print_daily_graphic: print_daily_graphic,
    src__impressum__impressum_component: impressum_component,
    src__forms__print_daily_gluc: print_daily_gluc,
    src__forms__print_daily_analysis: print_daily_analysis,
    src__welcome__welcome_component: welcome_component,
    src__forms__print_daily_log: print_daily_log,
    src__forms__print_daily_profile: print_daily_profile,
    src__printparams__printparams_component: printparams_component,
    src__controls__formparams__formparams_component: formparams_component,
    src__helpview__helpview_component: helpview_component,
    src__settings__settings_component: settings_component,
    src__forms__print_daily_hours: print_daily_hours,
    src__forms__print_profile: print_profile,
    src__shortcutedit__shortcutedit_component: shortcutedit_component,
    src__forms__print_percentile: print_percentile,
    src__whatsnew__whatsnew_component: whatsnew_component,
    src__forms__print_weekly_graphic: print_weekly_graphic
  };
}));

//# sourceMappingURL=datepicker_component.ddc.js.map
